{
 "pages": [
  {
   "layout": "layout-container",
   "name": "API",
   "order": 10,
   "published": true,
   "showInNav": false,
   "showBreadcrumbs": true,
   "title": "APIs",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": false,
   "showInFooter": false,
   "showInSearch": true,
   "breadcrumbs": "Api",
   "abspath": "api/index.md",
   "uri": "/api/",
   "nav_links": [
    {
     "layout": "layout-container",
     "name": "Entity Reference",
     "order": 250,
     "published": true,
     "showInNav": true,
     "showBreadcrumbs": true,
     "title": "Entity Reference",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference",
     "abspath": "api/entity-reference/index.html",
     "uri": "/api/entity-reference/",
     "nav_links": [
      {
       "layout": "layout-container",
       "name": "Accounts Payable Entity Reference",
       "title": "Accounts Payable Entity Reference",
       "order": 10,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference Accounts-payable",
       "abspath": "api/entity-reference/accounts-payable/index.html",
       "uri": "/api/entity-reference/accounts-payable/",
       "text": " Accounts Payable Entity Reference Updated: August 3, 2016 This topic describes the entity and type representations for common items used by the Accounts Payable API. Vendor filters Vendor summary Vendor address Address contact method Vendor payment default Vendor detail Vendor note/action Invoice filters Invoice summary Invoice detail Invoice payment details Remit to address Invoice payment summary Distribution Distribution split Transaction code value For more information about working with the SKY API, see the Getting Started guide. Vendor filters\nThe vendor filters entity has the following properties: Property Type Description offset integer The number of records to skip, for use with pagination. limit integer The number of records to return. If not specified, the default is 100. The maximum allowed value is 1000. vendor_name string The name of the vendor. status string The status of the vendor. ui_vendor_id string The UI defined ID for the vendor. Vendor summary\nThe vendor summary entity has the following properties: Property Type Description vendor_id integer Vendor identifier. vendor_name string The name of the vendor. balance_due number The balance due on this vendor. ui_defined_id string The UI defined Id of this vendor. customer_number string The customer number. vendor_status string The status of the vendor. issue_1099s boolean Whether to issue 1099s to this vendor. primary_address vendor address The primary address of the vendor. payment_method string The default payment of this vendor. Vendor address\nThe vendor address entity has the following properties: Property Type Description address_id integer The address identifier. description string The description for this address. country string The country for the address. city string The city for the address. county string The county for the address. state string The state or province (or suburb in NZ) for the address. postal string Refers to the Postal Code or ZIP of the address. address_line string The street for this address. is_primary boolean If this address is the primary address. is_invoices boolean If invoices are sent to this address. is_pos boolean If POs are sent to this address. is_1099 boolean If 1099s are sent to this address. title string The title for the primary contact. first_name string The first name of the primary contact. middle_name string The middle initial or name of the primary contact. last_name string The last name of the primary contact. suffix string The suffix of the primary contact. position string The position of the primary contact. address_contact_methods array of address contact methods The list of contact methods for this address. Address contact method\nThe address contact method entity has the following properties: Property Type Description contact_method_id integer The address contact method identifier. contact_type string The type of contact (email, phone, etc). contact_info string The contact information (email address, phone number, etc) for this method. Vendor payment default\nThe vendor payment default entity has the following properties: Property Type Description has_credit_limit boolean Whether or not this vendor has as credit limit. credit_limit number The credit limit, if any. payment_terms string The terms of the payment (NET D). account_name string The account from which to pay invoices. payment_method string The payment method for this invoice. payment_option string The payment option for this invoice. Vendor detail\nThe vendor detail entity has the following properties: Property Type Description vendor_id integer Vendor identifier. vendor_name string The name of the vendor. balance_due number The balance due on this vendor. ui_defined_id string The UI defined ID for this vendor. customer_number string The customer number. vendor_status string The status of the vendor. issue_1099s boolean Whether to issue 1099s to this vendor. addresses array of vendor addresses The address(es) of the vendor. vendor_payment_default vendor payment default The default payment of this vendor. Vendor note action\nThe vendor note action entity has the following properties: Property Type Description note_action_id integer The note/action identifier. note_type string The type - note or action. date string The date for this note/action. content string The content of this note/action. description string The description for this note/action. type string The type of the note/action. is_complete boolean Whether this note/action is complete. assign_to string To whom this note/action is assigned. completed_date string The date on which this note/action was completed. Invoice filters\nThe invoice filters entity has the following properties: Property Type Description offset integer The number of records to skip. limit integer The number of records to return. If not specified, the default is 100. The maxiumum allowed value is 1000. to_date date-time Filter for invoices before a certain date. from_date date-time Filter for invoices after a certain date. invoice_status string Filter by the status of the invoice. vendor_name string Filter by vendor name. Invoice summary\nThe invoice summary entity has the following properties: Property Type Description invoice_id integer The invoice identifier. invoice_number string The number for the invoice. invoice_date date-time The date for this invoice. vendor_id integer The vendor identifier associated with this invoice. vendor_name string The name of the vendor associated with this invoice. vendor_status string The status of the vendor. amount number The amount for this invoice. description string The description of this invoice. status string The status of this invoice. invoice_post_status string The post status of this invoice. balance number The balance on this invoice. is_past_due boolean Whether this invoice is past due. amount_due number The amount due on this invoice. remit_to string The account number to which to remit for this invoice. payment_method string The method to which to pay this invoice. create_separate_payment boolean Whether to create a separate payment for invoice. age string The age of this invoice. Invoice detail\nThe invoice detail entity has the following properties: Property Type Description invoice_id integer The invoice identifier. vendor_id integer The vendor identifier associated with this invoice. vendor_name string The name of the vendor associated with this invoice. invoice_number string The number for the invoice. invoice_date date-time The date for this invoice. due_date date-time The due date for this invoice. amount number The amount for this invoice. balance number The balance on this invoice. total_paid number The total amount paid on this invoice. description string The description of this invoice. approval_status string The approval status of this invoice. invoice_payment_details invoice payment details The payment details for this invoice. post_status string The post status of this invoice. post_date date-time The post date for this invoice. distribute_discounts boolean Whether to distribute discounts on this invoice. distributions array of distributions The distributions on this invoice. Invoice payment details\nThe invoice payment details entity has the following properties: Property Type Description remit_to remit to address The address to which to remit for this invoice. payment_method string The method with which the invoice will be paid. paid_from string The bank from which payments are made. hold_payment boolean Whether to hold payment on this invoice. create_separate_payment boolean Whether to create a separate payment for this invoice. payments array of invoice payment summaries The payments on this invoice. Remit to address\nThe remit to address entity has the following properties: Property Type Description address_id integer The address identifier. description string The description for this address. country string The country for the address. city string The city for the address. county string The county for the address. state string The state or province (or suburb in NZ) for the address. postal string Refers to the Postal Code or ZIP of the address. address_line string The street for this address. contact_name string The full name of the contact for this address. Invoice payment summary\nThe invoice payment summary entity has the following properties: Property Type Description payment_date date-time The date of this payment. transaction_number string The transaction number for this payment. payment_status string The status for this payment. amount number The amount of this payment. br_transaction_id integer The bank register transaction identifier for this payment. checks_7_id integer The Checks identifier for this payment (FE 7). Distribution\nThe distribution entity has the following properties: Property Type Description distribution_id integer The identifier for this distribution. distribution_split array of distribution splits The splits on this distribution. amount number The distribution amount. description string The description for this distribution. account_number string The account number for this distribution. type_code string The journal entry transaction type (debit or credit). Distribution split\nThe distribution split entity has the following properties: Property Type Description distribution_split_id integer The identifier for this distribution split. ui_project_id string The project id for this split. transaction_code_values array of transaction code values The transaction codes and values for this split. amount number The amount for this distribution split. percent number The amount percentage for this distribution split. Transaction code value\nThe transaction code value entity has the following properties: Property Type Description name string The name for this transaction code. value string The value for this transaction code. "
      },
      {
       "layout": "layout-container",
       "name": "Constituent Entity Reference",
       "title": "Constituent Entity Reference",
       "order": 20,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference Constituent",
       "abspath": "api/entity-reference/constituent/index.html",
       "uri": "/api/entity-reference/constituent/",
       "text": " Constituent Entity Reference Updated: February 09, 2017 This topic describes the entity and type representations for common items that the Constituent API uses. To learn about how to set up your developer account and work with the SKY API, see the Getting Started guide. Action Address Appeal Attachment Campaign Collection Communication preference Constituent Constituent code Country Currency Currency configuration Custom field Education Email address Fund Fundraiser Fuzzy date Gift Lifetime giving Member Membership Name format Note Online presence Phone Profile picture Prospect status Rating Rating category Rating source Relationship Search result Spouse Action\nThe action entity has the following properties: Property Type Description id string The action identifier. constituent_id string The constituent identifier. category string The channel or intent of the constituent interaction. Available values are Phone Call, Meeting, Mailing, Email, and Task/Other. type string Additional description of the action to complement the category. Available values are the entries in the Action Types table. date dateTime The action date. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. summary string The short description of the action that appears at the top of the record. description string The detailed explanation that elaborates on the action summary. completed boolean Indicates whether the action is complete. If the system is configured to use custom action statuses, this value is based on the action status value. If no value is specified, a value of false is assumed. completed_date dateTime The date when the action was completed. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. status string The action status. Available values are the entries in the Action Statuses table. (Only applies if the system is configured to use custom action statuses.) fundraisers array of string The set of constituent IDs for the fundraisers associated with the action. opportunity_id string The identifier for the opportunity associated with the action. Address\nThe address entity has the following properties: Property Type Description id string The address identifier. constituent_id string The constituent identifier. type string The address type. Available values are the entries in the Address Types table. formatted_address string The formatted address. preferred boolean Indicates whether this is the constituent's preferred address. inactive boolean Indicates whether the address is inactive. do_not_mail boolean Indicates whether the constituent requests not to be contacted at this address. address_lines string The address lines. city string The city of the address. suburb string The suburb of the address. county string The county of the address. state string The state of the address. postal_code string The postal code of the address. country string The country of the address. date_added dateTime The date when the address was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the address was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Some Address entity properties include international address support. Property United States Canada United Kingdom Australia New Zealand address_lines city * suburb state ! postal_code county country Australia — For GET operations, the city property returns city or suburb data. For POST and PATCH operations, you can use either the suburb or city properties, but not both. An error occurs if you provide values for both properties.\n! Canada — Use the state property to track provinces. Appeal\nThe appeal entity has the following properties: Property Type Description id string The appeal identifier. description string The appeal description. Attachment\nThe attachment entity has the following properties: Property Type Description id string The attachment identifier. parent_id string The parent object's identifier. tags array of string The set of tags associated with the attachment. Available values are the entries in the Document Tags table. name string The name of the attachment. type string The attachment type. Available values are link and physical. Physical attachments are stored and managed in the system. Link attachments are stored and managed externally. At this time, only link attachments can be created through the API. url string The URL for the attachment. The URL for a physical attachment contains a time-bound signature that limits access to 60 minutes. content_type string The content type. Only applies to physical attachments. file_name string The file name. Only applies to physical attachments. file_size long The file size in bytes. Only applies to physical attachments. thumbnail_url string The URL for a thumbnail. Only applies to physical attachments that are images. Contains a time-bound signature that limits access to 60 minutes. Campaign\nThe campaign entity has the following properties: Property Type Description id string The campaign identifier. description string The campaign description. Collection\nThe collection entity has the following properties: Property Type Description count integer The number of items in the collection. next_link URI For paginated responses, the URI for the next page of results. value array The set of items included in the response. This may be a subset of the items in the collection. Communication preference\nThe communication preference entity has the following properties: Property Type Description id string The communication preference identifier. constituent_id string The constituent identifier. solicit_code string Communication instructions and/or restrictions for a constituent. Available values are the entries in the Solicit Codes table. start dateTime The start date of the communication preference. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end dateTime The end date of the communication preference. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. Constituent\nThe constituent entity has the following properties: Property Type Description id string The constituent identifier. type string The type of constituent. Available values are individual and organization. lookup_id string The user-defined identifier for the constituent. inactive boolean Indicates whether the constituent is inactive. name string The constituent's full name. last string The constituent's last name. first string The constituent's first name. middle string The constituent's middle name. preferred_name string The constituent's preferred name. former_name string The constituent's former name. suffix string The constituent's primary suffix. Available values are the entries in the Suffix Types table. suffix_2 string The constituent's secondary suffix. Available values are the entries in the Suffix Types table. title string The constituent's primary title. Available values are the entries in the Title Types table. title_2 string The constituent's secondary title. Available values are the entries in the Title Types table. gender string The constituent's gender. Available values are male, female, and unknown. birthdate fuzzy date The constituent's birthdate. age integer The constituent's age. deceased boolean Indicates whether the constituent is deceased. deceased_date fuzzy date The date when the constituent died. address address The constituent's preferred address. email email address The constituent's primary email address, or the constituent's first email address if no email address is marked as primary. phone phone The constituent's primary phone, or the constituent's first phone if no phone is marked as primary. online_presence online presence The constituent's primary online presence, or the constituent's first online presence if no online presense is marked as primary. marital_status string The constituent's marital status. Available values are the entries in the Marital Statuses table. spouse spouse The constituent's spouse. date_added dateTime The date when the constituent was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the constituent was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. gives_anonymously boolean Indicates whether the constituent gives anonymously. Constituent code\nThe constituent code entity has the following properties: Property Type Description id string The constituent code identifier. constituent_id string The constituent identifier. description string The description of the constituent code. Available values are the entries in the Constituent Codes table. start fuzzy date The start date of the constituent code. end fuzzy date The end date of the constituent code. date_added dateTime The date when the constituent code was created. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the constituent code was last modified. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. inactive boolean Indicates whether the constituent code is inactive. Country\nThe country entity has the following properties: Property Type Description id string The country identifier. name string The country name. abbreviation string The user-defined abbreviation for the country. Currency\nThe currency entity has the following properties: Property Type Description value decimal The monetary value. Currency configuration\nThe currency configuration entity has the following properties: Property Type Description country_name string The country that issues the currency. currency_symbol string The symbol for the currency. Custom field\nThe custom field entity has the following properties: Property Type Description id string The custom field identifier. parent_id string The parent object's identifier. category string The custom field category. Available values are the entries in the Custom Field Categories table. type string The type of data that the custom field represents. Available values are listed below. date dateTime The date on the custom field. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. comment string The comment on the custom field. value object The value of the custom field. The type property determines the format. date_added dateTime The date when the custom field was created. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the custom field was last modified. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Available values for the type of a custom field: Type Description boolean Defines the custom field as a boolean value. codetableentry Defines the custom field as a string value that represents a code table entry description. constituentid Defines the custom field as a constituent identifier value. currency Defines the custom field as a decimal value. date Defines the custom field as a date value in ISO-8601 format: 1969-11-21T10:29:43-04:00. fuzzydate Defines the custom field as a fuzzy date value. number Defines the custom field as an integer value. text Defines the custom field as a string value. Education\nThe education entity has the following properties: Property Type Description id string The education identifier. constituent_id string The constituent identifier. school string The school name. Available values are the entries in the ​Schools table. For the UK, this property is for the establishment name, and available values are the entries in the ​Establishment​ table. type string The type of education. Available values are the entries in the School Types table. degree string The degree received. Available values are the entries in the Degrees table. class_of string The year the constituent graduated. date_entered fuzzy date The first date of attendance. date_left fuzzy date The last date of attendance. date_graduated fuzzy date The graduation date. status string The status of the education. Available values are the entries in the Education Statuses table. primary boolean Indicates whether this is the constituent's primary school association. majors array of string The major courses of study. Available values are the entries in the Major/Minor table. minors array of string The minor courses of study. Available values are the entries in the Major/Minor table. gpa decimal The grade point average. campus string The campus. known_name string The known name. social_organization string The social organization. class_of_degree string The class of degree. Available values are the entries in the Class of Degree table. For the UK only. faculty string The name of the faculty. Available values are the entries in the Faculties table. For the UK only. department string The name of the education department. Available values are the entries in the Departments table. For the UK only. registration_number string The registration number. For the UK only. subject_of_study string The subject of study. Available values are the entries in the ​Subject of Study​ table. For the UK only. Email address\nThe email address entity has the following properties: Property Type Description id string The email address identifier. constituent_id string The constituent identifier. type string The type of email address. Available values are the entries in the Email Address Types table. address string The email address. do_not_email boolean Indicates whether the constituent requests not to be contacted at this email address. primary boolean Indicates whether this is the constituent's primary email address. inactive boolean Indicates whether the email address is inactive. date_added dateTime The date when the email address was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the email address was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Fund\nThe fund entity has the following properties: Property Type Description id string The fund identifier. description string The fund description. Fundraiser\nThe fundraiser entity has the following properties: Property Type Description constituent_id string The fundraiser identifier. type string The type of fundraiser. start fuzzy date The fundraiser start date. end fuzzy date The fundraiser end date. Fuzzy date\nThe fuzzy date entity has the following properties: Property Type Description y integer The year in the fuzzy date. m integer The month in the fuzzy date. d integer The day in the fuzzy date. Gift\nThe gift entity has the following properties: Property Type Description id string The gift identifier. date dateTime The gift date. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. amount currency The gift amount. type string The gift type. funds array of fund The set of funds associated with the gift. campaigns array of campaign The set of campaigns associated with the gift. appeals array of appeal The set of appeals associated with the gift. Lifetime giving\nThe lifetime giving entity has the following properties: Property Type Description constituent_id string The constituent identifier. total_giving currency The total amount given by the constituent. total_received_giving currency The total received amount given by the constituent. total_pledge_balance currency The unpaid pledge balance for the constituent. total_soft_credits currency The total amount of soft credits applied to the constituent. total_years_given integer The total number of years the constituent has given. consecutive_years_given integer The number of consecutive years the constituent has given. total_committed_matching_gifts currency The total amount of matching gift commitments attributed to the constituent. total_received_matching_gifts currency The total amount of payments toward matching gift pledges attributed to the constituent. Member\nThe member entity has the following properties: Property Type Description id string The member identifier. constituent_id string The constituent identifier. primary boolean Indicates whether this is the primary member on the membership. Membership\nThe membership entity has the following properties: Property Type Description id string The membership identifier. program string The membership program. category string The membership category. subcategory string The membership subcategory. dues currency The membership dues. joined dateTime The date when the membership becomes active. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. expires dateTime The date when the membership expires. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. standing string The membership status. Available values are New, Active, Lapsed, and Dropped. members array of member The set of members who belong to the membership. Name format\nThe name format entity has the following properties: Property Type Description id string The name format identifier. constituent_id string The constituent identifier. addressee string The name format addressee. salutation string The name format salutation. Note\nThe note entity has the following properties: Property Type Description id string The note identifier. constituent_id string The constituent identifier. type string The note type. Available values are the entries in the Note Types table. date fuzzy date The note date. summary string The note summary. Maximum length is 50 characters. text string The note's contents. Online presence\nThe online presence entity has the following properties: Property Type Description id string The online presence identifier. constituent_id string The constituent identifier. type string The online presence type. Available values are the entries in the Online Presence Types table. address string The web address for the online presence. primary boolean Indicates whether this is the constituent's primary online presence. inactive boolean Indicates whether the online presence is inactive. date_added dateTime The date when the online presence was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the online presence was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Phone\nThe phone entity has the following properties: Property Type Description id string The phone identifier. constituent_id string The constituent identifier. type string The phone type. Available values are the entries in the Phone Types table. number string The phone number. do_not_call boolean Indicates whether the constituent requests not to be contacted at this number. primary boolean Indicates whether this is the constituent's primary phone. inactive boolean Indicates whether the phone is inactive. date_added dateTime The date when the phone was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the phone was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Profile picture\nThe profile picture entity has the following properties: Property Type Description constituent_id string The constituent identifier. url string The URL for the profile picture. The URL contains a time-bound signature that limits access to 60 minutes. thumbnail_url string The URL for a thumbnail of the profile picture. Contains a time-bound signature that limits access to 60 minutes. Prospect status\nThe prospect status entity has the following properties: Property Type Description constituent_id string The identifier of the constituent associated with the prospect status. status string The constituent's current prospect status. comments string The comments on the prospect status. days_elapsed integer The total number of days in the current prospect status. start_date dateTime The start date of the prospect status. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. Rating\nThe rating entity has the following properties: Property Type Description id string The rating identifier. constituent_id string The constituent identifier. category string The category of the rating. comment string A comment about the rating. date dateTime The date of the rating. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. inactive boolean Indicates whether the rating is inactive. source string The source of the rating. type string The type of data that the rating represents. Available values are listed below. value object The value of the rating. The type property determines the format. Available values for the type of a rating: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. dateTime Defines the rating value as a string JSON data type in ISO-8601 format: 1969-11-21T10:29:43-04:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. Rating category\nThe rating category entity has the following properties: Property Type Description name string The name of the rating category. inactive boolean Indicates whether the category is inactive. source_name string The source of the category.* type string The type of ratings in the rating category. Available values are listed below. * source_name is not required for all rating categories, but when rating categories have sources, endpoint calls require both the source name and category name for proper identification. Available values for the type of a rating category: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. dateTime Defines the rating value as a string JSON data type in ISO-8601 format: 1969-11-21T10:29:43-04:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. Rating source\nThe rating source entity has the following properties: Property Type Description name string The name of the rating source. inactive boolean Indicates whether the rating source is inactive. Relationship\nThe relationship entity has the following properties: Property Type Description id string The relationship identifier. constituent_id string The constituent identifier. relation_id string The identifier of the related individual or organization. name string The name of the related individual or organization. type string The relation type. Available values are the entries in the Relationship Types table. start fuzzy date The start date for the relationship. end fuzzy date The end date for the relationship . Search result\nThe search result entity has the following properties: Property Type Description id string The constituent identifier. lookup_id string The user-defined identifier for the constituent. name string The constituent name. address string The constituent's preferred address. email string The constituent's email address. Spouse\nThe spouse entity has the following properties: Property Type Description id string The spouse identifier. last string The spouse's last name. first string The spouse's first name. "
      },
      {
       "layout": "layout-container",
       "name": "Fundraising Entity Reference (Beta)",
       "title": "Fundraising Entity Reference (Beta)",
       "order": 30,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference Fundraising",
       "abspath": "api/entity-reference/fundraising/index.html",
       "uri": "/api/entity-reference/fundraising/",
       "text": " Fundraising Entity Reference (Beta) Updated: March 8, 2017 This topic describes the entity and type representations for common items that the Fundraising API uses. To learn about how to set up your developer account and work with the SKY API, see the Getting Started guide. Appeal Campaign Fund Appeal\nAppeals track the sources that organizations use to generate gifts and the expenses associated with those sources. You can set up appeals such as direct mailings, phonathons, dinners, and auctions and track the number of constituents that you solicit for each appeal.\nThe appeal entity has the following properties: Property Type Description id string The appeal identifier. description string The display name of the appeal. lookup_id string The user-defined identifier for the appeal. start_date dateTime The start date of the appeal. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end_date dateTime The end date of the appeal. Uses ISO-8601 format: 1969-12-25T10:29:43-04:00. inactive boolean Indicates whether the appeal is active. goal currency The monetary goal associated with the appeal. Campaign\nCampaigns set the overall objectives for raising money. For example, a school could create a New Library Campaign to organize fundraising efforts for the construction of a new library.\nThe campaign entity has the following properties: Property Type Description id string The campaign identifier. description string The display name of the campaign. lookup_id string The user-defined identifier for the campaign. start_date dateTime The start date of the campaign. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end_date dateTime The end date of the campaign. Uses ISO-8601 format: 1969-12-25T10:29:43-04:00. inactive boolean Indicates whether the campaign is active. goal currency The monetary goal associated with the campaign. Fund\nFunds designate the specific financial purpose of a gift. They identify the financial accounts where you record gifts and pledges, and they are key to managing your gifts.\nThe fund entity has the following properties: Property Type Description id string The fund identifier. description string The display name of the fund. lookup_id string The user-defined identifier for the fund. start_date dateTime The start date of the fund. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end_date dateTime The end date of the fund. Uses ISO-8601 format: 1969-12-25T10:29:43-04:00. inactive boolean Indicates whether the fund is active. goal currency The monetary goal associated with the fund. "
      },
      {
       "layout": "layout-container",
       "name": "General Ledger Entity Reference",
       "title": "General Ledger Entity Reference",
       "order": 40,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference General-ledger",
       "abspath": "api/entity-reference/general-ledger/index.html",
       "uri": "/api/entity-reference/general-ledger/",
       "text": " General Ledger Entity Reference Updated: July 06, 2016 This topic describes the entity and type representations for common items used by the General Ledger API. Account Account code Account segment detail Account segment value Account structure detail Class Distribution Fiscal period Fiscal year Fund Journal code Journal entry Journal entry batch Project Project type Project status Project division Project location Project department Transaction code Transaction code value Transaction distribution For more information about working with the SKY API, see the Getting Started guide. Account\nThe account entity has the following properties: Property Type Description account_id string The account identifier. number string The account number. description string The account description. Account code\nThe account code entity has the following properties: Property Type Description account_code_id string The account code identifier. value integer The value of this account code. category string The category for this account code. class string The class of this account code. is_contra boolean Whether this account code is contra. is_control boolean Whether this account code is controlled. description string The description for this account code. Account segment detail\nThe account segment detail entity has the following properties: Property Type Description segment_id integer The account segment identifier. type string The type for this account segment. values an array of account segment value entities The set of account segment values associated with the distribution. Account segment value\nThe account segment value entity has the following properties: Property Type Description description string The description for this segment value. value string The value of this segment value. Account structure detail\nThe account structure detail entity has the following properties: Property Type Description segment_id integer The identifier for this segment. separator string The separator for this segment. type string The type of this segment. length integer The length of this segment. sequence integer The sequence of this segment. Class\nThe class entity has the following properties: Property Type Description class_id string The class identifier. description string The description for this account class. value string The value for this account class. Distribution\nThe distribution entity has the following properties: Property Type Description distribution_id integer The distribution identifier. ui_project_id string The user-visible identifier of the project. account_class string The class of this distribution. transaction_code_values an array of transaction code value entities The set of transaction code values associated with the distribution. amount decimal The distribution amount. percent decimal The distribtuion journal entry amount percentage. Fiscal period\nThe fiscal period entity has the following properties: Property Type Description fiscal_period_id integer The distribution identifier. start_date dateTime The start date of this fiscal period. end_date dateTime The end date of this fiscal period. sequence integer The sequence of this fiscal period. closed boolean Whether or not this fiscal period is closed. Fiscal year\nThe fiscal year entity has the following properties: Property Type Description fiscal_year_id integer The distribution identifier. year integer The fiscal year. description string The description of this fiscal year. start_date dateTime The start date of this fiscal year. end_date dateTime The end date of this fiscal year. status string The status of this fiscal year. fiscal_periods an array of fiscal period entities The set of fiscal periods associated with the distribution. Fund\nThe fund entity has the following properties: Property Type Description fund_id string The fund identifier. description string The description for this fund. value string The value for this fund. Journal code\nThe journal code entity has the following properties: Property Type Description journal_code_id integer The journal identifier. code string The abbreviated code of the journal. journal string The full journal name of the journal. Journal entry batch\nThe journal entry batch entity has the following properties: Property Type Description batch_id integer The journal entry batch identifier. ui_batch_id string The user-visible identifier of the journal entry batch. description string The description of the journal entry batch. batch_status string The status of the journal entry batch. create_interfund_sets boolean Indicates whether or not the journal entry batch will automatically generate interfund sets to balance journal entries. create_bank_account_adjustments boolean Indicates whether or not the journal entry batch will automatically generate bank account adjustments to balance journal entries. journal_entries an array of journal entry entities The set of journal entries associated with the journal entry batch. Journal entry\nThe journal entry entity has the following properties: Property Type Description journal_entry_id integer The journal entry identifier. type_code string The journal entry transaction type (debit or credit). line_number integer The journal entry line number. account_number string The journal entry account number. post_date dateTime The journal entry post date, in ISO 8601 format: 2016-03-14. encumbrance string The journal entry encumbrance type. journal string The full name of the journal entry. reference string The journal entry reference. amount decimal The journal entry amount. notes string The journal entry notes. distributions array of distribution entities. The set of distributions associated with the journal entry. Project\nThe project entity has the following properties: Property Type Description project_id integer The project database identifier. ui_project_id string The user-visible project identifier. description string The project description. start_date dateTime The project start date, in ISO 8601 format: 2016-03-14. end_date dateTime The project end date, in ISO 8601 format: 2016-03-14. location string The project location. division string The project division. department string The project department. status string The project status. Project type\nThe project type entity has the following properties: Property Type Description id string The type identifier. description string The description for this type. value string The value for this type. Project status\nThe project status entity has the following properties: Property Type Description id string The status identifier. description string The description for this status. value string The value for this status. Project division\nThe project division entity has the following properties: Property Type Description id string The division identifier. description string The description for this division. value string The value for this division. Project type\nThe project location entity has the following properties: Property Type Description id string The location identifier. description string The description for this location. value string The value for this location. Project type\nThe project department entity has the following properties: Property Type Description id string The department identifier. description string The description for this department. value string The value for this department. Transaction code\nThe transaction code entity has the following properties: Property Type Description transaction_code_id integer The transaction code identifier. name string The transaction code name. description string The transaction code description. Transaction code value\nThe transaction code value entity has the following properties: Property Type Description name string The transaction code name. value string The transaction code value. Transaction distribution\nThe transaction distribution entity has the following properties: Property Type Description transaction_id integer The transaction identifier. transaction_amount decimal The transaction amount. distribution_amount decimal The total distribution amount. distribution_id integer The distribution identifier. account_number string The account number associated with the transaction distribution. account_class string The account class associated with the transaction distribution. ui_project_id string The user-visible project identifier associated with the transaction distribution. post_date dateTime The transaction distribution post date, in ISO 8601 format: 2016-03-14. is_credit boolean Indicates whether the transaction distribution is a credit or debit. reference string The reference of the transaction distribution. journal string The journal name associated with the transaction distribution. encumbrance string The encumbrance of the transaction distribution. transaction_codes_values an array of transaction code value entities The collection of transaction code values associated with the transaction distribution. "
      },
      {
       "layout": "layout-container",
       "name": "Gift Entity Reference (Beta)",
       "title": "Gift Entity Reference (Beta)",
       "order": 50,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference Gift",
       "abspath": "api/entity-reference/gift/index.html",
       "uri": "/api/entity-reference/gift/",
       "text": " Gift Entity Reference (Beta) Updated: March 8, 2017 This topic describes the entity and type representations for common items that the Gift API uses. To learn about how to set up your developer account and work with the SKY API, see the Getting Started guide. Gift Gift attachment Gift fundraiser Gift split Soft credit Gift\nThe gift entity has the following properties: Property Type Description id string The gift identifier. date dateTime The gift date. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. date_added dateTime The date when the gift was added. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the gift was last modified. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. amount currency The monetary amount of the gift. type string The gift type. Available values are listed below. constituent_id string The constituent identifier. is_anonymous boolean Indicates whether the gift is anonymous. gift_splits array of gift split The set of gift splits associated with the gift. subtype string The subtype of the gift. Available values are the entries in the Gift Subtypes table. lookup_id string The user-defined identifier for the gift. soft_credits array of soft credit The set of soft credits associated with the gift. fundraisers array of fundraiser The set of fundraisers who receive credit for the gift. post_status string The general ledger post status of the gift. Available values are posted, notposted, and donotpost. gift_status string The status of the gift. Available values are active, held, terminated, completed, and cancelled. reference string Notes to track special details about a gift such as the motivation behind it or a detailed description of a gift-in-kind. Available values for the type of a gift: Type Description amendment An amendment. donation A donation. giftinkind A gift-in-kind. generalledgerreversal A general ledger reversal. matchinggiftpledge A matching gift pledge. matchinggiftpayment A matching gift payment. matchinggiftwriteoff A matching gift write-off. plannedgift A planned gift. pledge A pledge. pledgepayment A pledge payment. pledgewriteoff A pledge write-off. recurringgift A recurring gift. recurringgiftpayment A recurring gift payment. stock A stock. soldstock A sold stock. other Another type of gift. Gift attachment\nThe gift attachment entity has the following properties: Property Type Description id string The gift attachment identifier. parent_id string The parent object's identifier. tags array of string The set of tags associated with the attachment. Available values are the entries in the Document Tags table. name string The name of the attachment. type string The attachment type. Available values are link and physical. Physical attachments are stored and managed in the system. Link attachments are stored and managed externally. At this time, only link attachments can be created through the API. url string The URL for the attachment. The URL for a physical gift attachment contains a time-bound signature that limits access to 60 minutes. content_type string The content type. Only applies to physical attachments. file_name string The file name. Only applies to physical attachments. file_size long The file size in bytes. Only applies to physical attachments. thumbnail_url string The URL for a thumbnail. Only applies to physical attachments that are images. Contains a time-bound signature that limits access to 60 minutes. Gift fundraiser\nThe gift fundraiser entity has the following properties: Property Type Description amount currency The amount credited to the fundraiser for the gift. constituent_id string The constituent identifier. Gift split\nA gift split is the distribution of the total amount of a gift among multiple campaigns, funds, or appeals.\nThe gift split entity has the following properties: Property Type Description fund_id string The identifier of the fund associated with the gift split. amount currency The amount of the gift split. campaign_id string The identifier of the campaign associated with the gift split. appeal_id string The identifier of the appeal associated with the gift split. Soft credit\nA soft credit is a way to share the credit for a gift with other individuals such as friends or spouses.\nThe soft credit entity has the following properties: Property Type Description amount currency The amount of the soft credit. constituent_id string The constituent identifier. id string The soft credit identifier. gift_id string The gift identifier. "
      }
     ],
     "text": " Entity Reference Accounts Payable Describes the entity and type representations for common items that the Accounts Payable API uses. Constituent Describes the entity and type representations for common items that the Constituent API uses. Fundraising (Beta) Describes the entity and type representations for common items that the Fundraising API uses. General Ledger Describes the entity and type representations for common items that the General Ledger API uses. Gift (Beta) Describes the entity and type representations for common items that the Gift API uses. "
    }
   ],
   "text": " API Endpoint Reference Explore the endpoints available to you with the SKY API. Entity Reference Describes the entity and type representations for common items that the SKY API uses. Products Learn about and subscribe to the products offered through the SKY API. "
  },
  {
   "layout": "layout-container",
   "name": "Entity Reference",
   "order": 250,
   "published": true,
   "showInNav": true,
   "showBreadcrumbs": true,
   "title": "Entity Reference",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference",
   "abspath": "api/entity-reference/index.html",
   "uri": "/api/entity-reference/",
   "nav_links": [
    {
     "layout": "layout-container",
     "name": "Accounts Payable Entity Reference",
     "title": "Accounts Payable Entity Reference",
     "order": 10,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference Accounts-payable",
     "abspath": "api/entity-reference/accounts-payable/index.html",
     "uri": "/api/entity-reference/accounts-payable/",
     "text": " Accounts Payable Entity Reference Updated: August 3, 2016 This topic describes the entity and type representations for common items used by the Accounts Payable API. Vendor filters Vendor summary Vendor address Address contact method Vendor payment default Vendor detail Vendor note/action Invoice filters Invoice summary Invoice detail Invoice payment details Remit to address Invoice payment summary Distribution Distribution split Transaction code value For more information about working with the SKY API, see the Getting Started guide. Vendor filters\nThe vendor filters entity has the following properties: Property Type Description offset integer The number of records to skip, for use with pagination. limit integer The number of records to return. If not specified, the default is 100. The maximum allowed value is 1000. vendor_name string The name of the vendor. status string The status of the vendor. ui_vendor_id string The UI defined ID for the vendor. Vendor summary\nThe vendor summary entity has the following properties: Property Type Description vendor_id integer Vendor identifier. vendor_name string The name of the vendor. balance_due number The balance due on this vendor. ui_defined_id string The UI defined Id of this vendor. customer_number string The customer number. vendor_status string The status of the vendor. issue_1099s boolean Whether to issue 1099s to this vendor. primary_address vendor address The primary address of the vendor. payment_method string The default payment of this vendor. Vendor address\nThe vendor address entity has the following properties: Property Type Description address_id integer The address identifier. description string The description for this address. country string The country for the address. city string The city for the address. county string The county for the address. state string The state or province (or suburb in NZ) for the address. postal string Refers to the Postal Code or ZIP of the address. address_line string The street for this address. is_primary boolean If this address is the primary address. is_invoices boolean If invoices are sent to this address. is_pos boolean If POs are sent to this address. is_1099 boolean If 1099s are sent to this address. title string The title for the primary contact. first_name string The first name of the primary contact. middle_name string The middle initial or name of the primary contact. last_name string The last name of the primary contact. suffix string The suffix of the primary contact. position string The position of the primary contact. address_contact_methods array of address contact methods The list of contact methods for this address. Address contact method\nThe address contact method entity has the following properties: Property Type Description contact_method_id integer The address contact method identifier. contact_type string The type of contact (email, phone, etc). contact_info string The contact information (email address, phone number, etc) for this method. Vendor payment default\nThe vendor payment default entity has the following properties: Property Type Description has_credit_limit boolean Whether or not this vendor has as credit limit. credit_limit number The credit limit, if any. payment_terms string The terms of the payment (NET D). account_name string The account from which to pay invoices. payment_method string The payment method for this invoice. payment_option string The payment option for this invoice. Vendor detail\nThe vendor detail entity has the following properties: Property Type Description vendor_id integer Vendor identifier. vendor_name string The name of the vendor. balance_due number The balance due on this vendor. ui_defined_id string The UI defined ID for this vendor. customer_number string The customer number. vendor_status string The status of the vendor. issue_1099s boolean Whether to issue 1099s to this vendor. addresses array of vendor addresses The address(es) of the vendor. vendor_payment_default vendor payment default The default payment of this vendor. Vendor note action\nThe vendor note action entity has the following properties: Property Type Description note_action_id integer The note/action identifier. note_type string The type - note or action. date string The date for this note/action. content string The content of this note/action. description string The description for this note/action. type string The type of the note/action. is_complete boolean Whether this note/action is complete. assign_to string To whom this note/action is assigned. completed_date string The date on which this note/action was completed. Invoice filters\nThe invoice filters entity has the following properties: Property Type Description offset integer The number of records to skip. limit integer The number of records to return. If not specified, the default is 100. The maxiumum allowed value is 1000. to_date date-time Filter for invoices before a certain date. from_date date-time Filter for invoices after a certain date. invoice_status string Filter by the status of the invoice. vendor_name string Filter by vendor name. Invoice summary\nThe invoice summary entity has the following properties: Property Type Description invoice_id integer The invoice identifier. invoice_number string The number for the invoice. invoice_date date-time The date for this invoice. vendor_id integer The vendor identifier associated with this invoice. vendor_name string The name of the vendor associated with this invoice. vendor_status string The status of the vendor. amount number The amount for this invoice. description string The description of this invoice. status string The status of this invoice. invoice_post_status string The post status of this invoice. balance number The balance on this invoice. is_past_due boolean Whether this invoice is past due. amount_due number The amount due on this invoice. remit_to string The account number to which to remit for this invoice. payment_method string The method to which to pay this invoice. create_separate_payment boolean Whether to create a separate payment for invoice. age string The age of this invoice. Invoice detail\nThe invoice detail entity has the following properties: Property Type Description invoice_id integer The invoice identifier. vendor_id integer The vendor identifier associated with this invoice. vendor_name string The name of the vendor associated with this invoice. invoice_number string The number for the invoice. invoice_date date-time The date for this invoice. due_date date-time The due date for this invoice. amount number The amount for this invoice. balance number The balance on this invoice. total_paid number The total amount paid on this invoice. description string The description of this invoice. approval_status string The approval status of this invoice. invoice_payment_details invoice payment details The payment details for this invoice. post_status string The post status of this invoice. post_date date-time The post date for this invoice. distribute_discounts boolean Whether to distribute discounts on this invoice. distributions array of distributions The distributions on this invoice. Invoice payment details\nThe invoice payment details entity has the following properties: Property Type Description remit_to remit to address The address to which to remit for this invoice. payment_method string The method with which the invoice will be paid. paid_from string The bank from which payments are made. hold_payment boolean Whether to hold payment on this invoice. create_separate_payment boolean Whether to create a separate payment for this invoice. payments array of invoice payment summaries The payments on this invoice. Remit to address\nThe remit to address entity has the following properties: Property Type Description address_id integer The address identifier. description string The description for this address. country string The country for the address. city string The city for the address. county string The county for the address. state string The state or province (or suburb in NZ) for the address. postal string Refers to the Postal Code or ZIP of the address. address_line string The street for this address. contact_name string The full name of the contact for this address. Invoice payment summary\nThe invoice payment summary entity has the following properties: Property Type Description payment_date date-time The date of this payment. transaction_number string The transaction number for this payment. payment_status string The status for this payment. amount number The amount of this payment. br_transaction_id integer The bank register transaction identifier for this payment. checks_7_id integer The Checks identifier for this payment (FE 7). Distribution\nThe distribution entity has the following properties: Property Type Description distribution_id integer The identifier for this distribution. distribution_split array of distribution splits The splits on this distribution. amount number The distribution amount. description string The description for this distribution. account_number string The account number for this distribution. type_code string The journal entry transaction type (debit or credit). Distribution split\nThe distribution split entity has the following properties: Property Type Description distribution_split_id integer The identifier for this distribution split. ui_project_id string The project id for this split. transaction_code_values array of transaction code values The transaction codes and values for this split. amount number The amount for this distribution split. percent number The amount percentage for this distribution split. Transaction code value\nThe transaction code value entity has the following properties: Property Type Description name string The name for this transaction code. value string The value for this transaction code. "
    },
    {
     "layout": "layout-container",
     "name": "Constituent Entity Reference",
     "title": "Constituent Entity Reference",
     "order": 20,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference Constituent",
     "abspath": "api/entity-reference/constituent/index.html",
     "uri": "/api/entity-reference/constituent/",
     "text": " Constituent Entity Reference Updated: February 09, 2017 This topic describes the entity and type representations for common items that the Constituent API uses. To learn about how to set up your developer account and work with the SKY API, see the Getting Started guide. Action Address Appeal Attachment Campaign Collection Communication preference Constituent Constituent code Country Currency Currency configuration Custom field Education Email address Fund Fundraiser Fuzzy date Gift Lifetime giving Member Membership Name format Note Online presence Phone Profile picture Prospect status Rating Rating category Rating source Relationship Search result Spouse Action\nThe action entity has the following properties: Property Type Description id string The action identifier. constituent_id string The constituent identifier. category string The channel or intent of the constituent interaction. Available values are Phone Call, Meeting, Mailing, Email, and Task/Other. type string Additional description of the action to complement the category. Available values are the entries in the Action Types table. date dateTime The action date. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. summary string The short description of the action that appears at the top of the record. description string The detailed explanation that elaborates on the action summary. completed boolean Indicates whether the action is complete. If the system is configured to use custom action statuses, this value is based on the action status value. If no value is specified, a value of false is assumed. completed_date dateTime The date when the action was completed. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. status string The action status. Available values are the entries in the Action Statuses table. (Only applies if the system is configured to use custom action statuses.) fundraisers array of string The set of constituent IDs for the fundraisers associated with the action. opportunity_id string The identifier for the opportunity associated with the action. Address\nThe address entity has the following properties: Property Type Description id string The address identifier. constituent_id string The constituent identifier. type string The address type. Available values are the entries in the Address Types table. formatted_address string The formatted address. preferred boolean Indicates whether this is the constituent's preferred address. inactive boolean Indicates whether the address is inactive. do_not_mail boolean Indicates whether the constituent requests not to be contacted at this address. address_lines string The address lines. city string The city of the address. suburb string The suburb of the address. county string The county of the address. state string The state of the address. postal_code string The postal code of the address. country string The country of the address. date_added dateTime The date when the address was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the address was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Some Address entity properties include international address support. Property United States Canada United Kingdom Australia New Zealand address_lines city * suburb state ! postal_code county country Australia — For GET operations, the city property returns city or suburb data. For POST and PATCH operations, you can use either the suburb or city properties, but not both. An error occurs if you provide values for both properties.\n! Canada — Use the state property to track provinces. Appeal\nThe appeal entity has the following properties: Property Type Description id string The appeal identifier. description string The appeal description. Attachment\nThe attachment entity has the following properties: Property Type Description id string The attachment identifier. parent_id string The parent object's identifier. tags array of string The set of tags associated with the attachment. Available values are the entries in the Document Tags table. name string The name of the attachment. type string The attachment type. Available values are link and physical. Physical attachments are stored and managed in the system. Link attachments are stored and managed externally. At this time, only link attachments can be created through the API. url string The URL for the attachment. The URL for a physical attachment contains a time-bound signature that limits access to 60 minutes. content_type string The content type. Only applies to physical attachments. file_name string The file name. Only applies to physical attachments. file_size long The file size in bytes. Only applies to physical attachments. thumbnail_url string The URL for a thumbnail. Only applies to physical attachments that are images. Contains a time-bound signature that limits access to 60 minutes. Campaign\nThe campaign entity has the following properties: Property Type Description id string The campaign identifier. description string The campaign description. Collection\nThe collection entity has the following properties: Property Type Description count integer The number of items in the collection. next_link URI For paginated responses, the URI for the next page of results. value array The set of items included in the response. This may be a subset of the items in the collection. Communication preference\nThe communication preference entity has the following properties: Property Type Description id string The communication preference identifier. constituent_id string The constituent identifier. solicit_code string Communication instructions and/or restrictions for a constituent. Available values are the entries in the Solicit Codes table. start dateTime The start date of the communication preference. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end dateTime The end date of the communication preference. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. Constituent\nThe constituent entity has the following properties: Property Type Description id string The constituent identifier. type string The type of constituent. Available values are individual and organization. lookup_id string The user-defined identifier for the constituent. inactive boolean Indicates whether the constituent is inactive. name string The constituent's full name. last string The constituent's last name. first string The constituent's first name. middle string The constituent's middle name. preferred_name string The constituent's preferred name. former_name string The constituent's former name. suffix string The constituent's primary suffix. Available values are the entries in the Suffix Types table. suffix_2 string The constituent's secondary suffix. Available values are the entries in the Suffix Types table. title string The constituent's primary title. Available values are the entries in the Title Types table. title_2 string The constituent's secondary title. Available values are the entries in the Title Types table. gender string The constituent's gender. Available values are male, female, and unknown. birthdate fuzzy date The constituent's birthdate. age integer The constituent's age. deceased boolean Indicates whether the constituent is deceased. deceased_date fuzzy date The date when the constituent died. address address The constituent's preferred address. email email address The constituent's primary email address, or the constituent's first email address if no email address is marked as primary. phone phone The constituent's primary phone, or the constituent's first phone if no phone is marked as primary. online_presence online presence The constituent's primary online presence, or the constituent's first online presence if no online presense is marked as primary. marital_status string The constituent's marital status. Available values are the entries in the Marital Statuses table. spouse spouse The constituent's spouse. date_added dateTime The date when the constituent was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the constituent was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. gives_anonymously boolean Indicates whether the constituent gives anonymously. Constituent code\nThe constituent code entity has the following properties: Property Type Description id string The constituent code identifier. constituent_id string The constituent identifier. description string The description of the constituent code. Available values are the entries in the Constituent Codes table. start fuzzy date The start date of the constituent code. end fuzzy date The end date of the constituent code. date_added dateTime The date when the constituent code was created. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the constituent code was last modified. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. inactive boolean Indicates whether the constituent code is inactive. Country\nThe country entity has the following properties: Property Type Description id string The country identifier. name string The country name. abbreviation string The user-defined abbreviation for the country. Currency\nThe currency entity has the following properties: Property Type Description value decimal The monetary value. Currency configuration\nThe currency configuration entity has the following properties: Property Type Description country_name string The country that issues the currency. currency_symbol string The symbol for the currency. Custom field\nThe custom field entity has the following properties: Property Type Description id string The custom field identifier. parent_id string The parent object's identifier. category string The custom field category. Available values are the entries in the Custom Field Categories table. type string The type of data that the custom field represents. Available values are listed below. date dateTime The date on the custom field. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. comment string The comment on the custom field. value object The value of the custom field. The type property determines the format. date_added dateTime The date when the custom field was created. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the custom field was last modified. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Available values for the type of a custom field: Type Description boolean Defines the custom field as a boolean value. codetableentry Defines the custom field as a string value that represents a code table entry description. constituentid Defines the custom field as a constituent identifier value. currency Defines the custom field as a decimal value. date Defines the custom field as a date value in ISO-8601 format: 1969-11-21T10:29:43-04:00. fuzzydate Defines the custom field as a fuzzy date value. number Defines the custom field as an integer value. text Defines the custom field as a string value. Education\nThe education entity has the following properties: Property Type Description id string The education identifier. constituent_id string The constituent identifier. school string The school name. Available values are the entries in the ​Schools table. For the UK, this property is for the establishment name, and available values are the entries in the ​Establishment​ table. type string The type of education. Available values are the entries in the School Types table. degree string The degree received. Available values are the entries in the Degrees table. class_of string The year the constituent graduated. date_entered fuzzy date The first date of attendance. date_left fuzzy date The last date of attendance. date_graduated fuzzy date The graduation date. status string The status of the education. Available values are the entries in the Education Statuses table. primary boolean Indicates whether this is the constituent's primary school association. majors array of string The major courses of study. Available values are the entries in the Major/Minor table. minors array of string The minor courses of study. Available values are the entries in the Major/Minor table. gpa decimal The grade point average. campus string The campus. known_name string The known name. social_organization string The social organization. class_of_degree string The class of degree. Available values are the entries in the Class of Degree table. For the UK only. faculty string The name of the faculty. Available values are the entries in the Faculties table. For the UK only. department string The name of the education department. Available values are the entries in the Departments table. For the UK only. registration_number string The registration number. For the UK only. subject_of_study string The subject of study. Available values are the entries in the ​Subject of Study​ table. For the UK only. Email address\nThe email address entity has the following properties: Property Type Description id string The email address identifier. constituent_id string The constituent identifier. type string The type of email address. Available values are the entries in the Email Address Types table. address string The email address. do_not_email boolean Indicates whether the constituent requests not to be contacted at this email address. primary boolean Indicates whether this is the constituent's primary email address. inactive boolean Indicates whether the email address is inactive. date_added dateTime The date when the email address was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the email address was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Fund\nThe fund entity has the following properties: Property Type Description id string The fund identifier. description string The fund description. Fundraiser\nThe fundraiser entity has the following properties: Property Type Description constituent_id string The fundraiser identifier. type string The type of fundraiser. start fuzzy date The fundraiser start date. end fuzzy date The fundraiser end date. Fuzzy date\nThe fuzzy date entity has the following properties: Property Type Description y integer The year in the fuzzy date. m integer The month in the fuzzy date. d integer The day in the fuzzy date. Gift\nThe gift entity has the following properties: Property Type Description id string The gift identifier. date dateTime The gift date. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. amount currency The gift amount. type string The gift type. funds array of fund The set of funds associated with the gift. campaigns array of campaign The set of campaigns associated with the gift. appeals array of appeal The set of appeals associated with the gift. Lifetime giving\nThe lifetime giving entity has the following properties: Property Type Description constituent_id string The constituent identifier. total_giving currency The total amount given by the constituent. total_received_giving currency The total received amount given by the constituent. total_pledge_balance currency The unpaid pledge balance for the constituent. total_soft_credits currency The total amount of soft credits applied to the constituent. total_years_given integer The total number of years the constituent has given. consecutive_years_given integer The number of consecutive years the constituent has given. total_committed_matching_gifts currency The total amount of matching gift commitments attributed to the constituent. total_received_matching_gifts currency The total amount of payments toward matching gift pledges attributed to the constituent. Member\nThe member entity has the following properties: Property Type Description id string The member identifier. constituent_id string The constituent identifier. primary boolean Indicates whether this is the primary member on the membership. Membership\nThe membership entity has the following properties: Property Type Description id string The membership identifier. program string The membership program. category string The membership category. subcategory string The membership subcategory. dues currency The membership dues. joined dateTime The date when the membership becomes active. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. expires dateTime The date when the membership expires. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. standing string The membership status. Available values are New, Active, Lapsed, and Dropped. members array of member The set of members who belong to the membership. Name format\nThe name format entity has the following properties: Property Type Description id string The name format identifier. constituent_id string The constituent identifier. addressee string The name format addressee. salutation string The name format salutation. Note\nThe note entity has the following properties: Property Type Description id string The note identifier. constituent_id string The constituent identifier. type string The note type. Available values are the entries in the Note Types table. date fuzzy date The note date. summary string The note summary. Maximum length is 50 characters. text string The note's contents. Online presence\nThe online presence entity has the following properties: Property Type Description id string The online presence identifier. constituent_id string The constituent identifier. type string The online presence type. Available values are the entries in the Online Presence Types table. address string The web address for the online presence. primary boolean Indicates whether this is the constituent's primary online presence. inactive boolean Indicates whether the online presence is inactive. date_added dateTime The date when the online presence was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the online presence was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Phone\nThe phone entity has the following properties: Property Type Description id string The phone identifier. constituent_id string The constituent identifier. type string The phone type. Available values are the entries in the Phone Types table. number string The phone number. do_not_call boolean Indicates whether the constituent requests not to be contacted at this number. primary boolean Indicates whether this is the constituent's primary phone. inactive boolean Indicates whether the phone is inactive. date_added dateTime The date when the phone was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the phone was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Profile picture\nThe profile picture entity has the following properties: Property Type Description constituent_id string The constituent identifier. url string The URL for the profile picture. The URL contains a time-bound signature that limits access to 60 minutes. thumbnail_url string The URL for a thumbnail of the profile picture. Contains a time-bound signature that limits access to 60 minutes. Prospect status\nThe prospect status entity has the following properties: Property Type Description constituent_id string The identifier of the constituent associated with the prospect status. status string The constituent's current prospect status. comments string The comments on the prospect status. days_elapsed integer The total number of days in the current prospect status. start_date dateTime The start date of the prospect status. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. Rating\nThe rating entity has the following properties: Property Type Description id string The rating identifier. constituent_id string The constituent identifier. category string The category of the rating. comment string A comment about the rating. date dateTime The date of the rating. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. inactive boolean Indicates whether the rating is inactive. source string The source of the rating. type string The type of data that the rating represents. Available values are listed below. value object The value of the rating. The type property determines the format. Available values for the type of a rating: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. dateTime Defines the rating value as a string JSON data type in ISO-8601 format: 1969-11-21T10:29:43-04:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. Rating category\nThe rating category entity has the following properties: Property Type Description name string The name of the rating category. inactive boolean Indicates whether the category is inactive. source_name string The source of the category.* type string The type of ratings in the rating category. Available values are listed below. * source_name is not required for all rating categories, but when rating categories have sources, endpoint calls require both the source name and category name for proper identification. Available values for the type of a rating category: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. dateTime Defines the rating value as a string JSON data type in ISO-8601 format: 1969-11-21T10:29:43-04:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. Rating source\nThe rating source entity has the following properties: Property Type Description name string The name of the rating source. inactive boolean Indicates whether the rating source is inactive. Relationship\nThe relationship entity has the following properties: Property Type Description id string The relationship identifier. constituent_id string The constituent identifier. relation_id string The identifier of the related individual or organization. name string The name of the related individual or organization. type string The relation type. Available values are the entries in the Relationship Types table. start fuzzy date The start date for the relationship. end fuzzy date The end date for the relationship . Search result\nThe search result entity has the following properties: Property Type Description id string The constituent identifier. lookup_id string The user-defined identifier for the constituent. name string The constituent name. address string The constituent's preferred address. email string The constituent's email address. Spouse\nThe spouse entity has the following properties: Property Type Description id string The spouse identifier. last string The spouse's last name. first string The spouse's first name. "
    },
    {
     "layout": "layout-container",
     "name": "Fundraising Entity Reference (Beta)",
     "title": "Fundraising Entity Reference (Beta)",
     "order": 30,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference Fundraising",
     "abspath": "api/entity-reference/fundraising/index.html",
     "uri": "/api/entity-reference/fundraising/",
     "text": " Fundraising Entity Reference (Beta) Updated: March 8, 2017 This topic describes the entity and type representations for common items that the Fundraising API uses. To learn about how to set up your developer account and work with the SKY API, see the Getting Started guide. Appeal Campaign Fund Appeal\nAppeals track the sources that organizations use to generate gifts and the expenses associated with those sources. You can set up appeals such as direct mailings, phonathons, dinners, and auctions and track the number of constituents that you solicit for each appeal.\nThe appeal entity has the following properties: Property Type Description id string The appeal identifier. description string The display name of the appeal. lookup_id string The user-defined identifier for the appeal. start_date dateTime The start date of the appeal. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end_date dateTime The end date of the appeal. Uses ISO-8601 format: 1969-12-25T10:29:43-04:00. inactive boolean Indicates whether the appeal is active. goal currency The monetary goal associated with the appeal. Campaign\nCampaigns set the overall objectives for raising money. For example, a school could create a New Library Campaign to organize fundraising efforts for the construction of a new library.\nThe campaign entity has the following properties: Property Type Description id string The campaign identifier. description string The display name of the campaign. lookup_id string The user-defined identifier for the campaign. start_date dateTime The start date of the campaign. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end_date dateTime The end date of the campaign. Uses ISO-8601 format: 1969-12-25T10:29:43-04:00. inactive boolean Indicates whether the campaign is active. goal currency The monetary goal associated with the campaign. Fund\nFunds designate the specific financial purpose of a gift. They identify the financial accounts where you record gifts and pledges, and they are key to managing your gifts.\nThe fund entity has the following properties: Property Type Description id string The fund identifier. description string The display name of the fund. lookup_id string The user-defined identifier for the fund. start_date dateTime The start date of the fund. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end_date dateTime The end date of the fund. Uses ISO-8601 format: 1969-12-25T10:29:43-04:00. inactive boolean Indicates whether the fund is active. goal currency The monetary goal associated with the fund. "
    },
    {
     "layout": "layout-container",
     "name": "General Ledger Entity Reference",
     "title": "General Ledger Entity Reference",
     "order": 40,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference General-ledger",
     "abspath": "api/entity-reference/general-ledger/index.html",
     "uri": "/api/entity-reference/general-ledger/",
     "text": " General Ledger Entity Reference Updated: July 06, 2016 This topic describes the entity and type representations for common items used by the General Ledger API. Account Account code Account segment detail Account segment value Account structure detail Class Distribution Fiscal period Fiscal year Fund Journal code Journal entry Journal entry batch Project Project type Project status Project division Project location Project department Transaction code Transaction code value Transaction distribution For more information about working with the SKY API, see the Getting Started guide. Account\nThe account entity has the following properties: Property Type Description account_id string The account identifier. number string The account number. description string The account description. Account code\nThe account code entity has the following properties: Property Type Description account_code_id string The account code identifier. value integer The value of this account code. category string The category for this account code. class string The class of this account code. is_contra boolean Whether this account code is contra. is_control boolean Whether this account code is controlled. description string The description for this account code. Account segment detail\nThe account segment detail entity has the following properties: Property Type Description segment_id integer The account segment identifier. type string The type for this account segment. values an array of account segment value entities The set of account segment values associated with the distribution. Account segment value\nThe account segment value entity has the following properties: Property Type Description description string The description for this segment value. value string The value of this segment value. Account structure detail\nThe account structure detail entity has the following properties: Property Type Description segment_id integer The identifier for this segment. separator string The separator for this segment. type string The type of this segment. length integer The length of this segment. sequence integer The sequence of this segment. Class\nThe class entity has the following properties: Property Type Description class_id string The class identifier. description string The description for this account class. value string The value for this account class. Distribution\nThe distribution entity has the following properties: Property Type Description distribution_id integer The distribution identifier. ui_project_id string The user-visible identifier of the project. account_class string The class of this distribution. transaction_code_values an array of transaction code value entities The set of transaction code values associated with the distribution. amount decimal The distribution amount. percent decimal The distribtuion journal entry amount percentage. Fiscal period\nThe fiscal period entity has the following properties: Property Type Description fiscal_period_id integer The distribution identifier. start_date dateTime The start date of this fiscal period. end_date dateTime The end date of this fiscal period. sequence integer The sequence of this fiscal period. closed boolean Whether or not this fiscal period is closed. Fiscal year\nThe fiscal year entity has the following properties: Property Type Description fiscal_year_id integer The distribution identifier. year integer The fiscal year. description string The description of this fiscal year. start_date dateTime The start date of this fiscal year. end_date dateTime The end date of this fiscal year. status string The status of this fiscal year. fiscal_periods an array of fiscal period entities The set of fiscal periods associated with the distribution. Fund\nThe fund entity has the following properties: Property Type Description fund_id string The fund identifier. description string The description for this fund. value string The value for this fund. Journal code\nThe journal code entity has the following properties: Property Type Description journal_code_id integer The journal identifier. code string The abbreviated code of the journal. journal string The full journal name of the journal. Journal entry batch\nThe journal entry batch entity has the following properties: Property Type Description batch_id integer The journal entry batch identifier. ui_batch_id string The user-visible identifier of the journal entry batch. description string The description of the journal entry batch. batch_status string The status of the journal entry batch. create_interfund_sets boolean Indicates whether or not the journal entry batch will automatically generate interfund sets to balance journal entries. create_bank_account_adjustments boolean Indicates whether or not the journal entry batch will automatically generate bank account adjustments to balance journal entries. journal_entries an array of journal entry entities The set of journal entries associated with the journal entry batch. Journal entry\nThe journal entry entity has the following properties: Property Type Description journal_entry_id integer The journal entry identifier. type_code string The journal entry transaction type (debit or credit). line_number integer The journal entry line number. account_number string The journal entry account number. post_date dateTime The journal entry post date, in ISO 8601 format: 2016-03-14. encumbrance string The journal entry encumbrance type. journal string The full name of the journal entry. reference string The journal entry reference. amount decimal The journal entry amount. notes string The journal entry notes. distributions array of distribution entities. The set of distributions associated with the journal entry. Project\nThe project entity has the following properties: Property Type Description project_id integer The project database identifier. ui_project_id string The user-visible project identifier. description string The project description. start_date dateTime The project start date, in ISO 8601 format: 2016-03-14. end_date dateTime The project end date, in ISO 8601 format: 2016-03-14. location string The project location. division string The project division. department string The project department. status string The project status. Project type\nThe project type entity has the following properties: Property Type Description id string The type identifier. description string The description for this type. value string The value for this type. Project status\nThe project status entity has the following properties: Property Type Description id string The status identifier. description string The description for this status. value string The value for this status. Project division\nThe project division entity has the following properties: Property Type Description id string The division identifier. description string The description for this division. value string The value for this division. Project type\nThe project location entity has the following properties: Property Type Description id string The location identifier. description string The description for this location. value string The value for this location. Project type\nThe project department entity has the following properties: Property Type Description id string The department identifier. description string The description for this department. value string The value for this department. Transaction code\nThe transaction code entity has the following properties: Property Type Description transaction_code_id integer The transaction code identifier. name string The transaction code name. description string The transaction code description. Transaction code value\nThe transaction code value entity has the following properties: Property Type Description name string The transaction code name. value string The transaction code value. Transaction distribution\nThe transaction distribution entity has the following properties: Property Type Description transaction_id integer The transaction identifier. transaction_amount decimal The transaction amount. distribution_amount decimal The total distribution amount. distribution_id integer The distribution identifier. account_number string The account number associated with the transaction distribution. account_class string The account class associated with the transaction distribution. ui_project_id string The user-visible project identifier associated with the transaction distribution. post_date dateTime The transaction distribution post date, in ISO 8601 format: 2016-03-14. is_credit boolean Indicates whether the transaction distribution is a credit or debit. reference string The reference of the transaction distribution. journal string The journal name associated with the transaction distribution. encumbrance string The encumbrance of the transaction distribution. transaction_codes_values an array of transaction code value entities The collection of transaction code values associated with the transaction distribution. "
    },
    {
     "layout": "layout-container",
     "name": "Gift Entity Reference (Beta)",
     "title": "Gift Entity Reference (Beta)",
     "order": 50,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference Gift",
     "abspath": "api/entity-reference/gift/index.html",
     "uri": "/api/entity-reference/gift/",
     "text": " Gift Entity Reference (Beta) Updated: March 8, 2017 This topic describes the entity and type representations for common items that the Gift API uses. To learn about how to set up your developer account and work with the SKY API, see the Getting Started guide. Gift Gift attachment Gift fundraiser Gift split Soft credit Gift\nThe gift entity has the following properties: Property Type Description id string The gift identifier. date dateTime The gift date. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. date_added dateTime The date when the gift was added. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the gift was last modified. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. amount currency The monetary amount of the gift. type string The gift type. Available values are listed below. constituent_id string The constituent identifier. is_anonymous boolean Indicates whether the gift is anonymous. gift_splits array of gift split The set of gift splits associated with the gift. subtype string The subtype of the gift. Available values are the entries in the Gift Subtypes table. lookup_id string The user-defined identifier for the gift. soft_credits array of soft credit The set of soft credits associated with the gift. fundraisers array of fundraiser The set of fundraisers who receive credit for the gift. post_status string The general ledger post status of the gift. Available values are posted, notposted, and donotpost. gift_status string The status of the gift. Available values are active, held, terminated, completed, and cancelled. reference string Notes to track special details about a gift such as the motivation behind it or a detailed description of a gift-in-kind. Available values for the type of a gift: Type Description amendment An amendment. donation A donation. giftinkind A gift-in-kind. generalledgerreversal A general ledger reversal. matchinggiftpledge A matching gift pledge. matchinggiftpayment A matching gift payment. matchinggiftwriteoff A matching gift write-off. plannedgift A planned gift. pledge A pledge. pledgepayment A pledge payment. pledgewriteoff A pledge write-off. recurringgift A recurring gift. recurringgiftpayment A recurring gift payment. stock A stock. soldstock A sold stock. other Another type of gift. Gift attachment\nThe gift attachment entity has the following properties: Property Type Description id string The gift attachment identifier. parent_id string The parent object's identifier. tags array of string The set of tags associated with the attachment. Available values are the entries in the Document Tags table. name string The name of the attachment. type string The attachment type. Available values are link and physical. Physical attachments are stored and managed in the system. Link attachments are stored and managed externally. At this time, only link attachments can be created through the API. url string The URL for the attachment. The URL for a physical gift attachment contains a time-bound signature that limits access to 60 minutes. content_type string The content type. Only applies to physical attachments. file_name string The file name. Only applies to physical attachments. file_size long The file size in bytes. Only applies to physical attachments. thumbnail_url string The URL for a thumbnail. Only applies to physical attachments that are images. Contains a time-bound signature that limits access to 60 minutes. Gift fundraiser\nThe gift fundraiser entity has the following properties: Property Type Description amount currency The amount credited to the fundraiser for the gift. constituent_id string The constituent identifier. Gift split\nA gift split is the distribution of the total amount of a gift among multiple campaigns, funds, or appeals.\nThe gift split entity has the following properties: Property Type Description fund_id string The identifier of the fund associated with the gift split. amount currency The amount of the gift split. campaign_id string The identifier of the campaign associated with the gift split. appeal_id string The identifier of the appeal associated with the gift split. Soft credit\nA soft credit is a way to share the credit for a gift with other individuals such as friends or spouses.\nThe soft credit entity has the following properties: Property Type Description amount currency The amount of the soft credit. constituent_id string The constituent identifier. id string The soft credit identifier. gift_id string The gift identifier. "
    }
   ],
   "text": " Entity Reference Accounts Payable Describes the entity and type representations for common items that the Accounts Payable API uses. Constituent Describes the entity and type representations for common items that the Constituent API uses. Fundraising (Beta) Describes the entity and type representations for common items that the Fundraising API uses. General Ledger Describes the entity and type representations for common items that the General Ledger API uses. Gift (Beta) Describes the entity and type representations for common items that the Gift API uses. "
  },
  {
   "layout": "layout-container",
   "name": "Accounts Payable Entity Reference",
   "title": "Accounts Payable Entity Reference",
   "order": 10,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference Accounts-payable",
   "abspath": "api/entity-reference/accounts-payable/index.html",
   "uri": "/api/entity-reference/accounts-payable/",
   "text": " Accounts Payable Entity Reference Updated: August 3, 2016 This topic describes the entity and type representations for common items used by the Accounts Payable API. Vendor filters Vendor summary Vendor address Address contact method Vendor payment default Vendor detail Vendor note/action Invoice filters Invoice summary Invoice detail Invoice payment details Remit to address Invoice payment summary Distribution Distribution split Transaction code value For more information about working with the SKY API, see the Getting Started guide. Vendor filters\nThe vendor filters entity has the following properties: Property Type Description offset integer The number of records to skip, for use with pagination. limit integer The number of records to return. If not specified, the default is 100. The maximum allowed value is 1000. vendor_name string The name of the vendor. status string The status of the vendor. ui_vendor_id string The UI defined ID for the vendor. Vendor summary\nThe vendor summary entity has the following properties: Property Type Description vendor_id integer Vendor identifier. vendor_name string The name of the vendor. balance_due number The balance due on this vendor. ui_defined_id string The UI defined Id of this vendor. customer_number string The customer number. vendor_status string The status of the vendor. issue_1099s boolean Whether to issue 1099s to this vendor. primary_address vendor address The primary address of the vendor. payment_method string The default payment of this vendor. Vendor address\nThe vendor address entity has the following properties: Property Type Description address_id integer The address identifier. description string The description for this address. country string The country for the address. city string The city for the address. county string The county for the address. state string The state or province (or suburb in NZ) for the address. postal string Refers to the Postal Code or ZIP of the address. address_line string The street for this address. is_primary boolean If this address is the primary address. is_invoices boolean If invoices are sent to this address. is_pos boolean If POs are sent to this address. is_1099 boolean If 1099s are sent to this address. title string The title for the primary contact. first_name string The first name of the primary contact. middle_name string The middle initial or name of the primary contact. last_name string The last name of the primary contact. suffix string The suffix of the primary contact. position string The position of the primary contact. address_contact_methods array of address contact methods The list of contact methods for this address. Address contact method\nThe address contact method entity has the following properties: Property Type Description contact_method_id integer The address contact method identifier. contact_type string The type of contact (email, phone, etc). contact_info string The contact information (email address, phone number, etc) for this method. Vendor payment default\nThe vendor payment default entity has the following properties: Property Type Description has_credit_limit boolean Whether or not this vendor has as credit limit. credit_limit number The credit limit, if any. payment_terms string The terms of the payment (NET D). account_name string The account from which to pay invoices. payment_method string The payment method for this invoice. payment_option string The payment option for this invoice. Vendor detail\nThe vendor detail entity has the following properties: Property Type Description vendor_id integer Vendor identifier. vendor_name string The name of the vendor. balance_due number The balance due on this vendor. ui_defined_id string The UI defined ID for this vendor. customer_number string The customer number. vendor_status string The status of the vendor. issue_1099s boolean Whether to issue 1099s to this vendor. addresses array of vendor addresses The address(es) of the vendor. vendor_payment_default vendor payment default The default payment of this vendor. Vendor note action\nThe vendor note action entity has the following properties: Property Type Description note_action_id integer The note/action identifier. note_type string The type - note or action. date string The date for this note/action. content string The content of this note/action. description string The description for this note/action. type string The type of the note/action. is_complete boolean Whether this note/action is complete. assign_to string To whom this note/action is assigned. completed_date string The date on which this note/action was completed. Invoice filters\nThe invoice filters entity has the following properties: Property Type Description offset integer The number of records to skip. limit integer The number of records to return. If not specified, the default is 100. The maxiumum allowed value is 1000. to_date date-time Filter for invoices before a certain date. from_date date-time Filter for invoices after a certain date. invoice_status string Filter by the status of the invoice. vendor_name string Filter by vendor name. Invoice summary\nThe invoice summary entity has the following properties: Property Type Description invoice_id integer The invoice identifier. invoice_number string The number for the invoice. invoice_date date-time The date for this invoice. vendor_id integer The vendor identifier associated with this invoice. vendor_name string The name of the vendor associated with this invoice. vendor_status string The status of the vendor. amount number The amount for this invoice. description string The description of this invoice. status string The status of this invoice. invoice_post_status string The post status of this invoice. balance number The balance on this invoice. is_past_due boolean Whether this invoice is past due. amount_due number The amount due on this invoice. remit_to string The account number to which to remit for this invoice. payment_method string The method to which to pay this invoice. create_separate_payment boolean Whether to create a separate payment for invoice. age string The age of this invoice. Invoice detail\nThe invoice detail entity has the following properties: Property Type Description invoice_id integer The invoice identifier. vendor_id integer The vendor identifier associated with this invoice. vendor_name string The name of the vendor associated with this invoice. invoice_number string The number for the invoice. invoice_date date-time The date for this invoice. due_date date-time The due date for this invoice. amount number The amount for this invoice. balance number The balance on this invoice. total_paid number The total amount paid on this invoice. description string The description of this invoice. approval_status string The approval status of this invoice. invoice_payment_details invoice payment details The payment details for this invoice. post_status string The post status of this invoice. post_date date-time The post date for this invoice. distribute_discounts boolean Whether to distribute discounts on this invoice. distributions array of distributions The distributions on this invoice. Invoice payment details\nThe invoice payment details entity has the following properties: Property Type Description remit_to remit to address The address to which to remit for this invoice. payment_method string The method with which the invoice will be paid. paid_from string The bank from which payments are made. hold_payment boolean Whether to hold payment on this invoice. create_separate_payment boolean Whether to create a separate payment for this invoice. payments array of invoice payment summaries The payments on this invoice. Remit to address\nThe remit to address entity has the following properties: Property Type Description address_id integer The address identifier. description string The description for this address. country string The country for the address. city string The city for the address. county string The county for the address. state string The state or province (or suburb in NZ) for the address. postal string Refers to the Postal Code or ZIP of the address. address_line string The street for this address. contact_name string The full name of the contact for this address. Invoice payment summary\nThe invoice payment summary entity has the following properties: Property Type Description payment_date date-time The date of this payment. transaction_number string The transaction number for this payment. payment_status string The status for this payment. amount number The amount of this payment. br_transaction_id integer The bank register transaction identifier for this payment. checks_7_id integer The Checks identifier for this payment (FE 7). Distribution\nThe distribution entity has the following properties: Property Type Description distribution_id integer The identifier for this distribution. distribution_split array of distribution splits The splits on this distribution. amount number The distribution amount. description string The description for this distribution. account_number string The account number for this distribution. type_code string The journal entry transaction type (debit or credit). Distribution split\nThe distribution split entity has the following properties: Property Type Description distribution_split_id integer The identifier for this distribution split. ui_project_id string The project id for this split. transaction_code_values array of transaction code values The transaction codes and values for this split. amount number The amount for this distribution split. percent number The amount percentage for this distribution split. Transaction code value\nThe transaction code value entity has the following properties: Property Type Description name string The name for this transaction code. value string The value for this transaction code. "
  },
  {
   "layout": "layout-container",
   "name": "Constituent Entity Reference",
   "title": "Constituent Entity Reference",
   "order": 20,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference Constituent",
   "abspath": "api/entity-reference/constituent/index.html",
   "uri": "/api/entity-reference/constituent/",
   "text": " Constituent Entity Reference Updated: February 09, 2017 This topic describes the entity and type representations for common items that the Constituent API uses. To learn about how to set up your developer account and work with the SKY API, see the Getting Started guide. Action Address Appeal Attachment Campaign Collection Communication preference Constituent Constituent code Country Currency Currency configuration Custom field Education Email address Fund Fundraiser Fuzzy date Gift Lifetime giving Member Membership Name format Note Online presence Phone Profile picture Prospect status Rating Rating category Rating source Relationship Search result Spouse Action\nThe action entity has the following properties: Property Type Description id string The action identifier. constituent_id string The constituent identifier. category string The channel or intent of the constituent interaction. Available values are Phone Call, Meeting, Mailing, Email, and Task/Other. type string Additional description of the action to complement the category. Available values are the entries in the Action Types table. date dateTime The action date. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. summary string The short description of the action that appears at the top of the record. description string The detailed explanation that elaborates on the action summary. completed boolean Indicates whether the action is complete. If the system is configured to use custom action statuses, this value is based on the action status value. If no value is specified, a value of false is assumed. completed_date dateTime The date when the action was completed. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. status string The action status. Available values are the entries in the Action Statuses table. (Only applies if the system is configured to use custom action statuses.) fundraisers array of string The set of constituent IDs for the fundraisers associated with the action. opportunity_id string The identifier for the opportunity associated with the action. Address\nThe address entity has the following properties: Property Type Description id string The address identifier. constituent_id string The constituent identifier. type string The address type. Available values are the entries in the Address Types table. formatted_address string The formatted address. preferred boolean Indicates whether this is the constituent's preferred address. inactive boolean Indicates whether the address is inactive. do_not_mail boolean Indicates whether the constituent requests not to be contacted at this address. address_lines string The address lines. city string The city of the address. suburb string The suburb of the address. county string The county of the address. state string The state of the address. postal_code string The postal code of the address. country string The country of the address. date_added dateTime The date when the address was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the address was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Some Address entity properties include international address support. Property United States Canada United Kingdom Australia New Zealand address_lines city * suburb state ! postal_code county country Australia — For GET operations, the city property returns city or suburb data. For POST and PATCH operations, you can use either the suburb or city properties, but not both. An error occurs if you provide values for both properties.\n! Canada — Use the state property to track provinces. Appeal\nThe appeal entity has the following properties: Property Type Description id string The appeal identifier. description string The appeal description. Attachment\nThe attachment entity has the following properties: Property Type Description id string The attachment identifier. parent_id string The parent object's identifier. tags array of string The set of tags associated with the attachment. Available values are the entries in the Document Tags table. name string The name of the attachment. type string The attachment type. Available values are link and physical. Physical attachments are stored and managed in the system. Link attachments are stored and managed externally. At this time, only link attachments can be created through the API. url string The URL for the attachment. The URL for a physical attachment contains a time-bound signature that limits access to 60 minutes. content_type string The content type. Only applies to physical attachments. file_name string The file name. Only applies to physical attachments. file_size long The file size in bytes. Only applies to physical attachments. thumbnail_url string The URL for a thumbnail. Only applies to physical attachments that are images. Contains a time-bound signature that limits access to 60 minutes. Campaign\nThe campaign entity has the following properties: Property Type Description id string The campaign identifier. description string The campaign description. Collection\nThe collection entity has the following properties: Property Type Description count integer The number of items in the collection. next_link URI For paginated responses, the URI for the next page of results. value array The set of items included in the response. This may be a subset of the items in the collection. Communication preference\nThe communication preference entity has the following properties: Property Type Description id string The communication preference identifier. constituent_id string The constituent identifier. solicit_code string Communication instructions and/or restrictions for a constituent. Available values are the entries in the Solicit Codes table. start dateTime The start date of the communication preference. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end dateTime The end date of the communication preference. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. Constituent\nThe constituent entity has the following properties: Property Type Description id string The constituent identifier. type string The type of constituent. Available values are individual and organization. lookup_id string The user-defined identifier for the constituent. inactive boolean Indicates whether the constituent is inactive. name string The constituent's full name. last string The constituent's last name. first string The constituent's first name. middle string The constituent's middle name. preferred_name string The constituent's preferred name. former_name string The constituent's former name. suffix string The constituent's primary suffix. Available values are the entries in the Suffix Types table. suffix_2 string The constituent's secondary suffix. Available values are the entries in the Suffix Types table. title string The constituent's primary title. Available values are the entries in the Title Types table. title_2 string The constituent's secondary title. Available values are the entries in the Title Types table. gender string The constituent's gender. Available values are male, female, and unknown. birthdate fuzzy date The constituent's birthdate. age integer The constituent's age. deceased boolean Indicates whether the constituent is deceased. deceased_date fuzzy date The date when the constituent died. address address The constituent's preferred address. email email address The constituent's primary email address, or the constituent's first email address if no email address is marked as primary. phone phone The constituent's primary phone, or the constituent's first phone if no phone is marked as primary. online_presence online presence The constituent's primary online presence, or the constituent's first online presence if no online presense is marked as primary. marital_status string The constituent's marital status. Available values are the entries in the Marital Statuses table. spouse spouse The constituent's spouse. date_added dateTime The date when the constituent was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the constituent was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. gives_anonymously boolean Indicates whether the constituent gives anonymously. Constituent code\nThe constituent code entity has the following properties: Property Type Description id string The constituent code identifier. constituent_id string The constituent identifier. description string The description of the constituent code. Available values are the entries in the Constituent Codes table. start fuzzy date The start date of the constituent code. end fuzzy date The end date of the constituent code. date_added dateTime The date when the constituent code was created. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the constituent code was last modified. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. inactive boolean Indicates whether the constituent code is inactive. Country\nThe country entity has the following properties: Property Type Description id string The country identifier. name string The country name. abbreviation string The user-defined abbreviation for the country. Currency\nThe currency entity has the following properties: Property Type Description value decimal The monetary value. Currency configuration\nThe currency configuration entity has the following properties: Property Type Description country_name string The country that issues the currency. currency_symbol string The symbol for the currency. Custom field\nThe custom field entity has the following properties: Property Type Description id string The custom field identifier. parent_id string The parent object's identifier. category string The custom field category. Available values are the entries in the Custom Field Categories table. type string The type of data that the custom field represents. Available values are listed below. date dateTime The date on the custom field. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. comment string The comment on the custom field. value object The value of the custom field. The type property determines the format. date_added dateTime The date when the custom field was created. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the custom field was last modified. The date includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Available values for the type of a custom field: Type Description boolean Defines the custom field as a boolean value. codetableentry Defines the custom field as a string value that represents a code table entry description. constituentid Defines the custom field as a constituent identifier value. currency Defines the custom field as a decimal value. date Defines the custom field as a date value in ISO-8601 format: 1969-11-21T10:29:43-04:00. fuzzydate Defines the custom field as a fuzzy date value. number Defines the custom field as an integer value. text Defines the custom field as a string value. Education\nThe education entity has the following properties: Property Type Description id string The education identifier. constituent_id string The constituent identifier. school string The school name. Available values are the entries in the ​Schools table. For the UK, this property is for the establishment name, and available values are the entries in the ​Establishment​ table. type string The type of education. Available values are the entries in the School Types table. degree string The degree received. Available values are the entries in the Degrees table. class_of string The year the constituent graduated. date_entered fuzzy date The first date of attendance. date_left fuzzy date The last date of attendance. date_graduated fuzzy date The graduation date. status string The status of the education. Available values are the entries in the Education Statuses table. primary boolean Indicates whether this is the constituent's primary school association. majors array of string The major courses of study. Available values are the entries in the Major/Minor table. minors array of string The minor courses of study. Available values are the entries in the Major/Minor table. gpa decimal The grade point average. campus string The campus. known_name string The known name. social_organization string The social organization. class_of_degree string The class of degree. Available values are the entries in the Class of Degree table. For the UK only. faculty string The name of the faculty. Available values are the entries in the Faculties table. For the UK only. department string The name of the education department. Available values are the entries in the Departments table. For the UK only. registration_number string The registration number. For the UK only. subject_of_study string The subject of study. Available values are the entries in the ​Subject of Study​ table. For the UK only. Email address\nThe email address entity has the following properties: Property Type Description id string The email address identifier. constituent_id string The constituent identifier. type string The type of email address. Available values are the entries in the Email Address Types table. address string The email address. do_not_email boolean Indicates whether the constituent requests not to be contacted at this email address. primary boolean Indicates whether this is the constituent's primary email address. inactive boolean Indicates whether the email address is inactive. date_added dateTime The date when the email address was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the email address was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Fund\nThe fund entity has the following properties: Property Type Description id string The fund identifier. description string The fund description. Fundraiser\nThe fundraiser entity has the following properties: Property Type Description constituent_id string The fundraiser identifier. type string The type of fundraiser. start fuzzy date The fundraiser start date. end fuzzy date The fundraiser end date. Fuzzy date\nThe fuzzy date entity has the following properties: Property Type Description y integer The year in the fuzzy date. m integer The month in the fuzzy date. d integer The day in the fuzzy date. Gift\nThe gift entity has the following properties: Property Type Description id string The gift identifier. date dateTime The gift date. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. amount currency The gift amount. type string The gift type. funds array of fund The set of funds associated with the gift. campaigns array of campaign The set of campaigns associated with the gift. appeals array of appeal The set of appeals associated with the gift. Lifetime giving\nThe lifetime giving entity has the following properties: Property Type Description constituent_id string The constituent identifier. total_giving currency The total amount given by the constituent. total_received_giving currency The total received amount given by the constituent. total_pledge_balance currency The unpaid pledge balance for the constituent. total_soft_credits currency The total amount of soft credits applied to the constituent. total_years_given integer The total number of years the constituent has given. consecutive_years_given integer The number of consecutive years the constituent has given. total_committed_matching_gifts currency The total amount of matching gift commitments attributed to the constituent. total_received_matching_gifts currency The total amount of payments toward matching gift pledges attributed to the constituent. Member\nThe member entity has the following properties: Property Type Description id string The member identifier. constituent_id string The constituent identifier. primary boolean Indicates whether this is the primary member on the membership. Membership\nThe membership entity has the following properties: Property Type Description id string The membership identifier. program string The membership program. category string The membership category. subcategory string The membership subcategory. dues currency The membership dues. joined dateTime The date when the membership becomes active. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. expires dateTime The date when the membership expires. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. standing string The membership status. Available values are New, Active, Lapsed, and Dropped. members array of member The set of members who belong to the membership. Name format\nThe name format entity has the following properties: Property Type Description id string The name format identifier. constituent_id string The constituent identifier. addressee string The name format addressee. salutation string The name format salutation. Note\nThe note entity has the following properties: Property Type Description id string The note identifier. constituent_id string The constituent identifier. type string The note type. Available values are the entries in the Note Types table. date fuzzy date The note date. summary string The note summary. Maximum length is 50 characters. text string The note's contents. Online presence\nThe online presence entity has the following properties: Property Type Description id string The online presence identifier. constituent_id string The constituent identifier. type string The online presence type. Available values are the entries in the Online Presence Types table. address string The web address for the online presence. primary boolean Indicates whether this is the constituent's primary online presence. inactive boolean Indicates whether the online presence is inactive. date_added dateTime The date when the online presence was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the online presence was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Phone\nThe phone entity has the following properties: Property Type Description id string The phone identifier. constituent_id string The constituent identifier. type string The phone type. Available values are the entries in the Phone Types table. number string The phone number. do_not_call boolean Indicates whether the constituent requests not to be contacted at this number. primary boolean Indicates whether this is the constituent's primary phone. inactive boolean Indicates whether the phone is inactive. date_added dateTime The date when the phone was created. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the phone was last modified. Includes an offset from UTC in ISO-8601 format: 1969-11-21T10:29:43-04:00. Profile picture\nThe profile picture entity has the following properties: Property Type Description constituent_id string The constituent identifier. url string The URL for the profile picture. The URL contains a time-bound signature that limits access to 60 minutes. thumbnail_url string The URL for a thumbnail of the profile picture. Contains a time-bound signature that limits access to 60 minutes. Prospect status\nThe prospect status entity has the following properties: Property Type Description constituent_id string The identifier of the constituent associated with the prospect status. status string The constituent's current prospect status. comments string The comments on the prospect status. days_elapsed integer The total number of days in the current prospect status. start_date dateTime The start date of the prospect status. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. Rating\nThe rating entity has the following properties: Property Type Description id string The rating identifier. constituent_id string The constituent identifier. category string The category of the rating. comment string A comment about the rating. date dateTime The date of the rating. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. inactive boolean Indicates whether the rating is inactive. source string The source of the rating. type string The type of data that the rating represents. Available values are listed below. value object The value of the rating. The type property determines the format. Available values for the type of a rating: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. dateTime Defines the rating value as a string JSON data type in ISO-8601 format: 1969-11-21T10:29:43-04:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. Rating category\nThe rating category entity has the following properties: Property Type Description name string The name of the rating category. inactive boolean Indicates whether the category is inactive. source_name string The source of the category.* type string The type of ratings in the rating category. Available values are listed below. * source_name is not required for all rating categories, but when rating categories have sources, endpoint calls require both the source name and category name for proper identification. Available values for the type of a rating category: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. dateTime Defines the rating value as a string JSON data type in ISO-8601 format: 1969-11-21T10:29:43-04:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. Rating source\nThe rating source entity has the following properties: Property Type Description name string The name of the rating source. inactive boolean Indicates whether the rating source is inactive. Relationship\nThe relationship entity has the following properties: Property Type Description id string The relationship identifier. constituent_id string The constituent identifier. relation_id string The identifier of the related individual or organization. name string The name of the related individual or organization. type string The relation type. Available values are the entries in the Relationship Types table. start fuzzy date The start date for the relationship. end fuzzy date The end date for the relationship . Search result\nThe search result entity has the following properties: Property Type Description id string The constituent identifier. lookup_id string The user-defined identifier for the constituent. name string The constituent name. address string The constituent's preferred address. email string The constituent's email address. Spouse\nThe spouse entity has the following properties: Property Type Description id string The spouse identifier. last string The spouse's last name. first string The spouse's first name. "
  },
  {
   "layout": "layout-container",
   "name": "Fundraising Entity Reference (Beta)",
   "title": "Fundraising Entity Reference (Beta)",
   "order": 30,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference Fundraising",
   "abspath": "api/entity-reference/fundraising/index.html",
   "uri": "/api/entity-reference/fundraising/",
   "text": " Fundraising Entity Reference (Beta) Updated: March 8, 2017 This topic describes the entity and type representations for common items that the Fundraising API uses. To learn about how to set up your developer account and work with the SKY API, see the Getting Started guide. Appeal Campaign Fund Appeal\nAppeals track the sources that organizations use to generate gifts and the expenses associated with those sources. You can set up appeals such as direct mailings, phonathons, dinners, and auctions and track the number of constituents that you solicit for each appeal.\nThe appeal entity has the following properties: Property Type Description id string The appeal identifier. description string The display name of the appeal. lookup_id string The user-defined identifier for the appeal. start_date dateTime The start date of the appeal. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end_date dateTime The end date of the appeal. Uses ISO-8601 format: 1969-12-25T10:29:43-04:00. inactive boolean Indicates whether the appeal is active. goal currency The monetary goal associated with the appeal. Campaign\nCampaigns set the overall objectives for raising money. For example, a school could create a New Library Campaign to organize fundraising efforts for the construction of a new library.\nThe campaign entity has the following properties: Property Type Description id string The campaign identifier. description string The display name of the campaign. lookup_id string The user-defined identifier for the campaign. start_date dateTime The start date of the campaign. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end_date dateTime The end date of the campaign. Uses ISO-8601 format: 1969-12-25T10:29:43-04:00. inactive boolean Indicates whether the campaign is active. goal currency The monetary goal associated with the campaign. Fund\nFunds designate the specific financial purpose of a gift. They identify the financial accounts where you record gifts and pledges, and they are key to managing your gifts.\nThe fund entity has the following properties: Property Type Description id string The fund identifier. description string The display name of the fund. lookup_id string The user-defined identifier for the fund. start_date dateTime The start date of the fund. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. end_date dateTime The end date of the fund. Uses ISO-8601 format: 1969-12-25T10:29:43-04:00. inactive boolean Indicates whether the fund is active. goal currency The monetary goal associated with the fund. "
  },
  {
   "layout": "layout-container",
   "name": "General Ledger Entity Reference",
   "title": "General Ledger Entity Reference",
   "order": 40,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference General-ledger",
   "abspath": "api/entity-reference/general-ledger/index.html",
   "uri": "/api/entity-reference/general-ledger/",
   "text": " General Ledger Entity Reference Updated: July 06, 2016 This topic describes the entity and type representations for common items used by the General Ledger API. Account Account code Account segment detail Account segment value Account structure detail Class Distribution Fiscal period Fiscal year Fund Journal code Journal entry Journal entry batch Project Project type Project status Project division Project location Project department Transaction code Transaction code value Transaction distribution For more information about working with the SKY API, see the Getting Started guide. Account\nThe account entity has the following properties: Property Type Description account_id string The account identifier. number string The account number. description string The account description. Account code\nThe account code entity has the following properties: Property Type Description account_code_id string The account code identifier. value integer The value of this account code. category string The category for this account code. class string The class of this account code. is_contra boolean Whether this account code is contra. is_control boolean Whether this account code is controlled. description string The description for this account code. Account segment detail\nThe account segment detail entity has the following properties: Property Type Description segment_id integer The account segment identifier. type string The type for this account segment. values an array of account segment value entities The set of account segment values associated with the distribution. Account segment value\nThe account segment value entity has the following properties: Property Type Description description string The description for this segment value. value string The value of this segment value. Account structure detail\nThe account structure detail entity has the following properties: Property Type Description segment_id integer The identifier for this segment. separator string The separator for this segment. type string The type of this segment. length integer The length of this segment. sequence integer The sequence of this segment. Class\nThe class entity has the following properties: Property Type Description class_id string The class identifier. description string The description for this account class. value string The value for this account class. Distribution\nThe distribution entity has the following properties: Property Type Description distribution_id integer The distribution identifier. ui_project_id string The user-visible identifier of the project. account_class string The class of this distribution. transaction_code_values an array of transaction code value entities The set of transaction code values associated with the distribution. amount decimal The distribution amount. percent decimal The distribtuion journal entry amount percentage. Fiscal period\nThe fiscal period entity has the following properties: Property Type Description fiscal_period_id integer The distribution identifier. start_date dateTime The start date of this fiscal period. end_date dateTime The end date of this fiscal period. sequence integer The sequence of this fiscal period. closed boolean Whether or not this fiscal period is closed. Fiscal year\nThe fiscal year entity has the following properties: Property Type Description fiscal_year_id integer The distribution identifier. year integer The fiscal year. description string The description of this fiscal year. start_date dateTime The start date of this fiscal year. end_date dateTime The end date of this fiscal year. status string The status of this fiscal year. fiscal_periods an array of fiscal period entities The set of fiscal periods associated with the distribution. Fund\nThe fund entity has the following properties: Property Type Description fund_id string The fund identifier. description string The description for this fund. value string The value for this fund. Journal code\nThe journal code entity has the following properties: Property Type Description journal_code_id integer The journal identifier. code string The abbreviated code of the journal. journal string The full journal name of the journal. Journal entry batch\nThe journal entry batch entity has the following properties: Property Type Description batch_id integer The journal entry batch identifier. ui_batch_id string The user-visible identifier of the journal entry batch. description string The description of the journal entry batch. batch_status string The status of the journal entry batch. create_interfund_sets boolean Indicates whether or not the journal entry batch will automatically generate interfund sets to balance journal entries. create_bank_account_adjustments boolean Indicates whether or not the journal entry batch will automatically generate bank account adjustments to balance journal entries. journal_entries an array of journal entry entities The set of journal entries associated with the journal entry batch. Journal entry\nThe journal entry entity has the following properties: Property Type Description journal_entry_id integer The journal entry identifier. type_code string The journal entry transaction type (debit or credit). line_number integer The journal entry line number. account_number string The journal entry account number. post_date dateTime The journal entry post date, in ISO 8601 format: 2016-03-14. encumbrance string The journal entry encumbrance type. journal string The full name of the journal entry. reference string The journal entry reference. amount decimal The journal entry amount. notes string The journal entry notes. distributions array of distribution entities. The set of distributions associated with the journal entry. Project\nThe project entity has the following properties: Property Type Description project_id integer The project database identifier. ui_project_id string The user-visible project identifier. description string The project description. start_date dateTime The project start date, in ISO 8601 format: 2016-03-14. end_date dateTime The project end date, in ISO 8601 format: 2016-03-14. location string The project location. division string The project division. department string The project department. status string The project status. Project type\nThe project type entity has the following properties: Property Type Description id string The type identifier. description string The description for this type. value string The value for this type. Project status\nThe project status entity has the following properties: Property Type Description id string The status identifier. description string The description for this status. value string The value for this status. Project division\nThe project division entity has the following properties: Property Type Description id string The division identifier. description string The description for this division. value string The value for this division. Project type\nThe project location entity has the following properties: Property Type Description id string The location identifier. description string The description for this location. value string The value for this location. Project type\nThe project department entity has the following properties: Property Type Description id string The department identifier. description string The description for this department. value string The value for this department. Transaction code\nThe transaction code entity has the following properties: Property Type Description transaction_code_id integer The transaction code identifier. name string The transaction code name. description string The transaction code description. Transaction code value\nThe transaction code value entity has the following properties: Property Type Description name string The transaction code name. value string The transaction code value. Transaction distribution\nThe transaction distribution entity has the following properties: Property Type Description transaction_id integer The transaction identifier. transaction_amount decimal The transaction amount. distribution_amount decimal The total distribution amount. distribution_id integer The distribution identifier. account_number string The account number associated with the transaction distribution. account_class string The account class associated with the transaction distribution. ui_project_id string The user-visible project identifier associated with the transaction distribution. post_date dateTime The transaction distribution post date, in ISO 8601 format: 2016-03-14. is_credit boolean Indicates whether the transaction distribution is a credit or debit. reference string The reference of the transaction distribution. journal string The journal name associated with the transaction distribution. encumbrance string The encumbrance of the transaction distribution. transaction_codes_values an array of transaction code value entities The collection of transaction code values associated with the transaction distribution. "
  },
  {
   "layout": "layout-container",
   "name": "Gift Entity Reference (Beta)",
   "title": "Gift Entity Reference (Beta)",
   "order": 50,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference Gift",
   "abspath": "api/entity-reference/gift/index.html",
   "uri": "/api/entity-reference/gift/",
   "text": " Gift Entity Reference (Beta) Updated: March 8, 2017 This topic describes the entity and type representations for common items that the Gift API uses. To learn about how to set up your developer account and work with the SKY API, see the Getting Started guide. Gift Gift attachment Gift fundraiser Gift split Soft credit Gift\nThe gift entity has the following properties: Property Type Description id string The gift identifier. date dateTime The gift date. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. date_added dateTime The date when the gift was added. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. date_modified dateTime The date when the gift was last modified. Uses ISO-8601 format: 1969-11-21T10:29:43-04:00. amount currency The monetary amount of the gift. type string The gift type. Available values are listed below. constituent_id string The constituent identifier. is_anonymous boolean Indicates whether the gift is anonymous. gift_splits array of gift split The set of gift splits associated with the gift. subtype string The subtype of the gift. Available values are the entries in the Gift Subtypes table. lookup_id string The user-defined identifier for the gift. soft_credits array of soft credit The set of soft credits associated with the gift. fundraisers array of fundraiser The set of fundraisers who receive credit for the gift. post_status string The general ledger post status of the gift. Available values are posted, notposted, and donotpost. gift_status string The status of the gift. Available values are active, held, terminated, completed, and cancelled. reference string Notes to track special details about a gift such as the motivation behind it or a detailed description of a gift-in-kind. Available values for the type of a gift: Type Description amendment An amendment. donation A donation. giftinkind A gift-in-kind. generalledgerreversal A general ledger reversal. matchinggiftpledge A matching gift pledge. matchinggiftpayment A matching gift payment. matchinggiftwriteoff A matching gift write-off. plannedgift A planned gift. pledge A pledge. pledgepayment A pledge payment. pledgewriteoff A pledge write-off. recurringgift A recurring gift. recurringgiftpayment A recurring gift payment. stock A stock. soldstock A sold stock. other Another type of gift. Gift attachment\nThe gift attachment entity has the following properties: Property Type Description id string The gift attachment identifier. parent_id string The parent object's identifier. tags array of string The set of tags associated with the attachment. Available values are the entries in the Document Tags table. name string The name of the attachment. type string The attachment type. Available values are link and physical. Physical attachments are stored and managed in the system. Link attachments are stored and managed externally. At this time, only link attachments can be created through the API. url string The URL for the attachment. The URL for a physical gift attachment contains a time-bound signature that limits access to 60 minutes. content_type string The content type. Only applies to physical attachments. file_name string The file name. Only applies to physical attachments. file_size long The file size in bytes. Only applies to physical attachments. thumbnail_url string The URL for a thumbnail. Only applies to physical attachments that are images. Contains a time-bound signature that limits access to 60 minutes. Gift fundraiser\nThe gift fundraiser entity has the following properties: Property Type Description amount currency The amount credited to the fundraiser for the gift. constituent_id string The constituent identifier. Gift split\nA gift split is the distribution of the total amount of a gift among multiple campaigns, funds, or appeals.\nThe gift split entity has the following properties: Property Type Description fund_id string The identifier of the fund associated with the gift split. amount currency The amount of the gift split. campaign_id string The identifier of the campaign associated with the gift split. appeal_id string The identifier of the appeal associated with the gift split. Soft credit\nA soft credit is a way to share the credit for a gift with other individuals such as friends or spouses.\nThe soft credit entity has the following properties: Property Type Description amount currency The amount of the soft credit. constituent_id string The constituent identifier. id string The soft credit identifier. gift_id string The gift identifier. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Documentation",
   "description": "Docs to learn our APIs.",
   "order": 200,
   "published": true,
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": false,
   "showNavDropdown": true,
   "title": "Documentation",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Docs",
   "abspath": "docs/index.md",
   "uri": "/docs/",
   "nav_links": [
    {
     "layout": "layout-sidebar",
     "name": "Managing your apps",
     "description": "Registering your application and regenerating the client secret",
     "order": 200,
     "published": true,
     "showInNav": true,
     "title": "Managing your Apps",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Apps",
     "abspath": "docs/apps/index.md",
     "uri": "/docs/apps/",
     "text": " Comments Edit in GitHub Managing your apps\nIn order to call the SKY API, you'll need to register your application. This registration provides a unique set of credentials that your application will use when asking a user for permission to access their organization's Blackbaud data during the authorization process.\nRegister your application\nTo register your application: Go to My Applications to manage your applications. Click Register app. Enter the following information: Field Description Application name (Required) Enter a name for your application. This is the name that users will see when asked to grant access to your application during the authorization process. It will also be seen by administrators within the Applications area of the product when they view the list of applications that have been granted access to their data. Application details (Required) Provide a description for your application. This will be seen by administrators when activating your application within the product. Organization name (Required) Specify the company name that users and administrators will see associated with your application. Application logo (Optional) Provide a 512 by 512 pixel PNG or JPEG image that users and administrators will see associated with your application. Application website URL (Required) Enter a URL where users can find out more information about your application. Redirect URIs (Required) Specify one or more URIs that should be used when redirecting the user's browser back to your application after providing consent during the authorization process. The URIs must be absolute and use https (note that we do support http://localhost:port or http://127.0.0.1:port for local development). To register multiple URIs, click Add another redirect URI. Important! When your application requests authorization to access a Blackbaud customer's data, it will include a redirect_uri parameter as part of the query string. This value must match exactly against one of the values you listed when registering your application, including any trailing slashes. If the value supplied does not match any of the registered redirect URIs, then authorization will fail. For more information on commonly encountered authorization problems, see common authorization issues. Click Save to complete the registration of your application. After you register an application, take note of the credentials (ID and Secret) that are displayed in the Application Credentials column. These credentials are unique to your application, and are used to verify your application's identity during the authorization process. Application ID is the unique identifier for your application. This value is not sensitive and can be shared publicly. It cannot be modified after the application is registered, so if you need change it for any reason you must delete the application and re-add it.\nApplication secret is the key your application will provide when requesting an access token to call the SKY API as part of the authorization process. This value is sensitive and should NOT be shared with anyone else! To display the secret, click Show in the Application Credentials column. Very Important! The application secret should be kept private and safe! Regenerate your secret if it is compromised. Blackbaud reserves the right to remove or deactivate your application in order to protect our customers' data. Regenerate your secret\nIf you think your Application secret has been compromised, follow these steps to regenerate the value: Go to My Applications. Locate the application in the list. Select the context menu and click Regenerate secret. Select Show to display the regenerated secret. Be sure to store the new secret securely. Important! Don't forget to update your application to use the regenerated value when requesting access during the authorization process. Activate your application\nFor your application to successfully access a tenant's data, it must be approved by a tenant administrator. For Blackbaud customers, the tenant administrator is a user within their organization. You need to have the tenant administrator provide approval by activating your application within the Applications area of the product. To activate your application in a customer's tenant, have the tenant administrator complete the following steps: Copy the Application ID that you provided to them. Visit the Control Panel, Applications area of the product. Select Add application, and paste your Application ID, and select Save. Your application will then appear in the list of activated applications for the tenant. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Authorization",
     "description": "Description",
     "order": 200,
     "published": true,
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "priority": "high",
     "title": "Authorization",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInSearch": true,
     "breadcrumbs": "Docs Authorization",
     "abspath": "docs/authorization/index.md",
     "uri": "/docs/authorization/",
     "nav_links": [
      {
       "layout": "layout-sidebar",
       "name": "Authorization Code Flow",
       "description": "The Authorization Code Flow is appropriate for applications that the user logs into once. Since this flow involves an exchange of your **Application secret* for an access token, it is suitable for applications than run from secure locations such as server-side web application or back-end service.",
       "order": 100,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "title": "Authorization Code Flow",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Authorization Auth-code-flow",
       "abspath": "docs/authorization/auth-code-flow/index.md",
       "uri": "/docs/authorization/auth-code-flow/",
       "text": " Comments Edit in GitHub Authorization Code Flow\nThe authorization code grant is meant for web applications where API calls are made from the server. It is the most secure as it involves server-to-server communication, and is also the most functional as it also provides refresh tokens. This allows your application to have indefinite connectivity to the SKY API after the one-time user-interactive consent process.\nThe flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an authorization code that you can exchange for an access token. You can store this access token (and the refresh token) in your application, and use it when making API calls on that user's behalf.\nSince this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints.\nWe demonstrate this flow in our tutorials and code samples. Step 1 — Request authorization\nInitiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to code. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=code\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 — User authorizes your app\nIn this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission.\nStep 3 — User is redirected back\nAfter the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the query string will contain the following parameters: Query parameter Description code An authorization code that can be exchanged for an access token. state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\ncode=3BB723FF-74C9-4AED-B4F6-7E8A192CBA21\n&state=fdf80155 If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues.\nStep 4 — Request tokens\nWhen your application receives an authorization code, you will need to exchange it for an access token by making a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value authorization_code. code Required. The authorization code supplied to your application's redirect_uri. redirect_uri Required. This parameter is used for validation only (there is no actual redirection). The value of this parameter must exactly match the value of the redirect_uri parameter you supplied when initiating authorization. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=authorization_code&redirect_uri=https%3A%2F%2Fwww.example.com%2Foauth2%2Fcallback&code=bd2d702f47bc453580098c8076d471b4 Note: The authorization code expires in 5 minutes. Be sure to quickly exchange it for an access token. Step 5 — Tokens returned\nIf the access token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"eyJ0eXAiOiJKV1...CTtP0CQ\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"eb78ffd...7cb7b\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\", \"tenant_name\":\"Raiser's Edge NXT - Blackbaud (Developer Sandbox)\"\n} If the token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues.\nStep 6 — Call the SKY API\nThe access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the bb-api-subscription-key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nbb-api-subscription-key: 77f137116...480d633 Step 7 — Refresh access token\nFor security purposes, access tokens will expire after 60 minutes minutes. When this happens, calls to the SKY API will respond with a status code of 401 Not Authorized along with the message \"The required Authorization header was missing or invalid, or the token has expired\". To continue making calls to the API, you will need to exchange the value you received in the refresh_token field for a new access token.\nThis exchange happens on the server, and does not involve any user interactivity. In this way, your application can have indefinite connectivity to after the initial one-time user-interactive consent.\nTo refresh your access token, make a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value refresh_token. refresh_token Required. The refresh token supplied to your application's redirect_uri. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=refresh_token&refresh_token=eb78ffdabc7cb7b If the refresh token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"azH0eXAiOiJKV1...DTxS1DR\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"ab478xsd...7ab6c\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\"\n} If the refresh token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues.\nTutorial\nFor more information on implementing the authorization code flow, check out our tutorials. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Common Authorization Issues",
       "description": "Common errors encountered when interacting with the OAuth endpoints.",
       "order": 200,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "title": "Common Authorization Issues",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Authorization Common-auth-issues",
       "abspath": "docs/authorization/common-auth-issues/index.md",
       "uri": "/docs/authorization/common-auth-issues/",
       "text": " Comments Edit in GitHub Common Authorization Issues\nYou may encounter one of the following common issues when initiating authorization and calling the SKY API.\nRequest authorization\nImportant! Pop up blockers may interfere with obtaining access tokens in the SKY API Console. Please enable pop ups when using the SKY API Console to obtain access tokens. Invalid client_id After you register an application, its credentials are created and displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application. Use this value for the client_id parameter value.\nInvalid redirect_uri This URI needs to be in the Redirect URI whitelist that you specify when you register your application. The value must match exactly, including capitalization, terminating slashes, etc.\nInvalid response_type\nWhen initiating authorization with the \\authorization endpoint, you must pass an appropriate value for the response_type request body parameter as per the OAuth 2 specification. The value must be set to code when using Authorization Code Flow and token when using Implicit Flow.\nUser has no tenants To authorize access to a user’s Blackbaud data, the user must have access to web view for Raiser’s Edge NXT or Financial Edge NXT. This requirement allows SKY API to respect the security rights of the authorized Blackbaud product user. To become a web view user, contact your organization administrator and request an invitation.\nApplication not activated Before an application can request authorization and make API calls to a Blackbaud product, an organization administrator must add the application to the tenant. Administrators can also remove an application when they no longer want the application to have access to their Blackbaud product. For more information, see Activate your application.\nRequest tokens\ninvalid_redirect_uri error \"The specified value for the redirect_uri parameter did not match any pre-registered values.\" This URI needs to be in the Redirect URI whitelist that you specify when you register your application. The value must match exactly including capitalization, terminating slashes, etc.\nFor the Authorization Code Flow, when requesting an access token from the \\token endpoint, you must pass your registered application's redirect_uri for validation purposes. The value of this parameter must exactly match the value of redirect_uri supplied when requesting the authorization code.\nunsupported_grant_type error \"unsupported_grant_type\" error When requesting an access token from the \\token endpoint, you must pass an appropriate value for the grant_type request body parameter as per the OAuth 2 specification. Check the spelling of the grant_type value.\ninvalid_client error \"invalid_client\" error - \"The value specified for the client_id parameter 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX' was not valid.\" After you register an application, its credentials are created and displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application. Use this value for the client_id parameter value.\ninvalid_client error \"invalid_client\" error - \"The required credentials were not supplied.\" This error indicates that we were unable to retrieve the application’s credentials (client ID + secret) from either the authorization header or the request body. To resolve, ensure that you are correctly providing the application credentials as base64-encoded values within the Authorization header (preferred), or as form-url-encoded values in the request body. Note: If using the Authorization header, you need to include a space after Basic. The value must have the format: Basic <base64 encoded Application ID:Application secret>. For more information, see step 4 of Authorization Code Flow documentation.\ninvalid_grant error \"invalid_grant\" error This error is caused by an invalid value in your request to the /token endpoint. For example, this error will be seen when providing an invalid, expired, or previously used authorization code. In this case, you must restart the authorization process and obtain a fresh authorization code from the /authorization endpoint. Note that authorization codes expire in 5 minutes and are not reusable. Be sure to exchange them for access tokens quickly.\nThis error can also been seen when the redirect_uri provided to the /token endpoint does not match the one used when making the initial authorization request. To resolve this, use the same redirect_uri in both operations.\nCall the SKY API\ninvalid subscription key \"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\" Be sure to provide either your primary or secondary subscription key for an active API subscription.\nThe subscription key represents a subscription to a specific SKY API product and is associated with your developer account. To get an subscription key, you'll need to sign up for a Blackbaud developer account and an approved subscription. Once you have an approved subscription, you can view your subscription keys within your profile. The subscription key value is passed with each request to the SKY API via the bb-api-subscription-key request header. See Getting Started for instructions on how to obtain a subscription key and an example of using the subscription key in a call to the API.\nmissing/invalid authorization header \"The required Authorization header was missing or invalid, or the token has expired\" Missing Token\nWhen making calls to the API, you need to provide an access token obtained using OAuth 2.0. The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, be sure to supply the Authorization request header with a value of Bearer, followed by a space and the access_token value.\nIt's a common mistake to forget to prepend the access_token value with Bearer. Be sure to include a space between Bearer and the access_token value.\nSample request:\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nCache-Control: no-cache\nbb-api-subscription-key: 77f137116...480d633 Expired Token\nThe access token expires in 60 minutes. With the Authorization Code Flow, each time you refresh your tokens, you'll get a new access and refresh token. Refresh tokens will also expire, but after a much longer period of time (currently, 60 days). Using a sliding window, each time you exchange your refresh token for a new access token, we will issue a new refresh token as well. As long as your application connects to the SKY API at least once within the window, you will be able to continue to access the Blackbaud customer's data indefinitely (or until they deactivate your application).\nIf your access token and refresh token have expired, the user will have to re-authenticate and consent. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Implicit Flow",
       "description": "The Implicit Flow is carried out client-side within a browser-based app. Since the code is available to the browser, the <%= stache.config.guide_apps_client_secret_name %> cannot be kept a secret and is not used to request an access token.  As a result, the access tokens that are issued are short-lived and there are no refresh tokens to extend them when they expire.",
       "order": 150,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "title": "Implicit Flow",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Authorization Implicit-flow",
       "abspath": "docs/authorization/implicit-flow/index.md",
       "uri": "/docs/authorization/implicit-flow/",
       "text": " Comments Edit in GitHub Implicit Flow\nThe implicit grant is meant for applications where API calls are made from the client, typically within a browser using JavaScript. Since API calls are made from the client, they are inherently less secure and do not involve the exchange of an application secret. The access tokens that are issued are short-lived and no refresh tokens are provided, so the user must re-authorize your application when the token expires.\nLike the Authorization Code Flow, the implicit flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using the Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an access token that you can immediately use when making API calls on that user's behalf. Since this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints.\nStep 1 — Request authorization\nInitiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to token. This indicates that the access token should be returned in the fragment of the redirect URI. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=token\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 — User authorizes your app\nIn this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission.\nStep 3 — Access token provided\nAfter the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the URL fragment will contain the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. state string The value of the state parameter you supplied in the initial authorization request. tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. Reminder: The Implicit Grant Flow provides a short-lived access token that expires in 60 minutes minutes. A refresh token is not provided, so when the token expires your application should re-authorize the user again. Successful redirect response example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback#\naccess_token=1d57284f025...4975d\n&token_type=bearer\n&expires_in=3600\n&state=fdf80155\n&tenant_id=E27DD7B6-6B71-4689-8B2C-60A74F243966\n&tenant_name=Raiser%27s%20Edge%20NXT%20-%20Blackbaud%20%28Developer%20Sandbox%29 If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues.\nStep 4 — Call the SKY API\nThe access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the bb-api-subscription-key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nbb-api-subscription-key: 77f137116...480d633 "
      }
     ],
     "text": " Comments Edit in GitHub Authorization\nSKY API uses the OAuth 2.0 protocol to authorize API requests. This provides a mechanism for your application to access Blackbaud customer data without exposing any user credentials (username/password) to your application. Instead, users must provide consent to your application to access data on their behalf.\nSKY API OAuth 2.0 endpoints: Endpoint URL Authorization https://oauth2.apim.blackbaud.com/authorization Token https://oauth2.apim.blackbaud.com/token In order to call the SKY API, you must first register your application within the My Applications area of the developer portal. This registration provides your application with a unique set of credentials to use when asking a user for consent.\nBefore your application can access a given Blackbaud customer's data, it must first be approved by an administrator within the customer's organization. The administrator provides this approval by activating your application within the Applications area of the product. This allows Blackbaud customers to control which applications have access to their data, and at any time an administrator can de-activate your application and prevent future access via the API.\nOnce your application has been activated, you can then obtain consent from an authenticated Blackbaud user. Upon consent, an OAuth 2.0 access token will be issued to your application in the form of a JSON web token, or JWT. The token should be included on every API request as part of the standard Authorization header. It is tied to the authenticated user's account and organization, which means that your application can only access data to which the authenticated user can access within the system.\nSupported OAuth 2.0 flows\nThe SKY API supports the following grant types: Authorization Code Flow (aka the Web Server flow). This flow is meant for web applications where API calls are made from the server. It is the most secure as it involves server-to-server communication, and is also the most functional as it also provides refresh tokens. This allows your application to have indefinite connectivity to the SKY API after the one-time user-interactive consent process. Implicit Flow. This flow is meant for client-side applications, such as browser-based, native, and mobile applications. Since API calls are made from the client, they are inherently less secure and do not involve the exchange of an application secret. The access tokens that are issued are short-lived and no refresh tokens are provided, so the user must re-authorize your application when the token expires. User experience\nThe Authorization Code Flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with a authorization code that you can exchange for an access token. You can store this access token (and the refresh token) in your application, and use it when making API calls on that user's behalf.\nThe Implicit Flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an access token that you can use when making API calls on that user's behalf.\nToken expiration\nAs a security best-practice, access tokens will expire after a period of time (currently, 60 minutes). When this happens, your application should exchange the refresh token it received with the original access token for a new access token in order to make additional API calls. The refresh token exchange happens on the server and does not involve any interaction with the user.\nIf your access token was obtained using the Implicit Flow, you won't have a refresh token and you'll need the user to re-authorize your application before making additional API calls.\nNote: Refresh tokens will also expire, but after a much longer period of time (currently, 60 days). Using a sliding window, each time you exchange your refresh token for a new access token, we will issue a new refresh token as well. As long as your application connects to the SKY API at least once within the window, you will be able to continue accessing the Blackbaud customer's data indefinitely (or until they deactivate your application).\nScopes\nOAuth 2.0 Scopes are not yet supported within SKY API - in the future, applications may be able to express intent via scopes but for now API access is always within the context of an authenticated user, which means that API access respects the user's security permissions defined within the product. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Basics",
     "description": "Docs to learn our APIs.",
     "order": 300,
     "published": true,
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "back_to_top": true,
     "title": "Basics",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInSearch": true,
     "breadcrumbs": "Docs Basics",
     "abspath": "docs/basics/index.md",
     "uri": "/docs/basics/",
     "text": " Comments Edit in GitHub Basics\nThe following information provides an overview of some key concepts within the SKY API. We'll assume you have some familiarity with RESTful programming concepts and the associated tools and techniques for consuming web services.\nBase URL\nAll endpoints within the SKY API are located at the following base URL:\nhttps://api.sky.blackbaud.com Within this address, you'll find APIs (collections of related endpoints) covering the broad functional areas within the SKY API. For example, we currently surface the following APIs: API Location Purpose Accounts Payable /accountspayable Used to manage accounts payable, including vendors and invoices. Constituent /constituent Used to manage constituent information, including related entities such as addresses, phones, emails, and notes. Fundraising (Beta) /fundraising Used to manage information within the fundraising hierarchy and related entities such as campaigns, funds, and appeals. General Ledger /generalledger Used to manage the general ledger, including accounts, projects, and journal entries. Gift (Beta) /gift Used to manage gift information, including related entities such as acknowledgements, fundraisers, and receipts. Within each API, you'll find domain-specific endpoints that allow you to access data and perform operations like searching for records, updating information, etc. The SKY API is based on REST principles, where resources are accessed via standard requests to an API endpoint.\nScheme\nFor security, the SKY API communicates exclusively over HTTPS.\nSubscription\nIn order to call the SKY API, you'll need a subscription associated with your developer account. This subscription represents our permission for you to call the API, and you'll include your subscription key in the bb-api-subscription-key header on every request (see request headers).\nTo obtain a subscription, visit the Products page, select SKY API Standard Edition and click Review terms and subscribe to initiate the request process. You must review all the terms by scrolling down the page before you can agree to the terms and subscribe.\nYou will receive an email notification when your request is approved, and you'll be able to locate your subscription details within your developer profile.\nNote: Currently, SKY API access is limited to Blackbaud Partners and customers using Raiser's Edge NXT or Financial Edge NXT. Subscription requests are reviewed and must be approved by Blackbaud. If you are interested in using SKY API to build an integration for a specific customer, contact that organization's administrator to receive a user invite for the Blackbaud product. If you are interested in using SKY API to build an integration for multiple customers, we encourage you to become a partner. Why two subscription keys?\nBlackbaud provides two subscription keys labeled primary key and secondary key. You are free to use either in your requests to the API. As a security best practice it’s a good idea to rotate which key your applications use when calling the API. This mitigates the risk of a compromised key. Blackbaud won’t mandate a key rotation schedule. You are free to adopt a rotation strategy that best fits your needs. We also give you a mechanism to regenerate the keys associated with your subscription(s) in your Developer account profile.\nAuthorization\nAll endpoints within the SKY API require user-authorization, so in addition to a subscription key you'll also need to supply an OAuth 2.0 access token to access a specific Blackbaud customer's data. This token can be obtained through the authorization process, and should be included on every request as part of the Authorization header (see request headers).\nNote: The token should be considered an opaque value and is tied to the authenticated user's account and organization. This means that your application can only access data to which the authenticated user has permission. HTTP verbs\nThe SKY API is designed to have predictable, resource-oriented URLs to make learning easier. Where possible, the API strives to use the appropriate HTTP verb for each action: Verb Description GET Used to retrieve resources. POST Used to create resources. PATCH Used to update the properties of a resource. DELETE Used to delete resources. Request headers\nThe following request headers are required when calling the SKY API: bb-api-subscription-key - This is your API subscription key, which represents Blackbaud's permission to you to call the SKY API. You can use either the primary or the secondary key associated with your subscription (both are equally functional). For more information on obtaining an API subscription, see subscription.\nAuthorization - This value is an OAuth 2.0 Bearer token, which is obtained during the authorization process and represents a Blackbaud customer's permission for you to access their data. The expected format of this header value is \"Bearer token\" (note the space in the middle). For endpoints that accept JSON in the request body, the Content-Type request header with a value of application/json is required.\nContent types\nUnless otherwise noted, all endpoints within the SKY API accept and return data formatted as JSON. The Content-Type request header with a value of application/json is required when providing content on the body of a request.\nResponse status codes\nThe SKY API uses the following set of standard HTTP response status codes, as defined in RFC 2616 and RFC 6585. Response codes in the 4xx range indicate a problem with your request, while response codes in the 5xx range indicate a problem on our end.\nYou can view the common authentication issues page for additional guidance, and if you are experiencing a problem, feel free to review your support options in our Support area. You can also check the check the Issues page to see if we are experiencing any problems on our end.\nFor response codes in the 4xx or 5xx range (which indicate failures), the response body may contain more details on why the request failed.\nStatus codes Status code Description 200 OK The request was successful, and you can read the results from the body and headers of the response. For operations that create new resources, you'll typically find the ID of the newly created resource in the response body. For simplicity, we don't distinguish between successful calls that create, update, or delete resources. 400 Bad Request The request failed due to an error on your part, such as a syntax error or malformed content in the request body. 401 Unauthorized The request failed because the required authorization was not satisfied. This could be because you provided an invalid subscription key (see subscription), or an invalid or expired access token (see common authentication issues). 403 Forbidden The request failed because the user in whose context the API is being called either does not have permission to perform the operation itself, or does not have permission to access the data being requested. You may also see this response when the API quota associated with your subscription has been met (see quota). 404 Not Found The requested resource could not be found. You may be trying to access a record that does not exist, or you may have supplied an invalid URL. 415 Unsupported Media Type The request failed because the correct Content-Type header was not provided on the request. For endpoints that accept JSON in the request body, you must use the Content-Type header application/json. 429 Too Many Requests You will see this response if you've exceeded the rate limit associated with your API subscription (see rate limits). 500 Internal Server Error An unexpected error has occurred on our side. You should never receive this response, but if you do please let us know and we'll fix it. 503 Service Unavailable One or more API services are not available. This is usually a temporary condition caused by an unexpected outage or due to planned downtime. We'll be proactive about broadcasting outages or downtime on the Issues page, so check there for more information. Rate limits\nCalls to the SKY API are subject to the rate limit associated with your API subscription (see subscription).\nRate limits help us to keep our backend servers from being overloaded with too many requests in a short period of time by limiting the number of calls you can make within that period. When your rate limit is exceeded, you'll receives a 429 - Too Many Requests response from the API, and the body of the response will indicate how long you must wait before making the next call (you can also inspect the Retry-After header which will contain the number of seconds to wait):\nRetry-After: 1\nDate: Tue, 06 Dec 2016 19:47:44 GMT\nContent-Length: 83\nContent-Type: application/json { \"statusCode\": 429, \"message\": \"Rate limit is exceeded. Try again in 1 second.\"\n} The current rate limit for the SKY API Standard Edition is 5 calls per second. Quotas\nCalls to the SKY API are subject to the quota associated with your API subscription (see subscription).\nQuotas allow us to enforce an appropriate level of API use over a broad period of time by limiting the number of calls you can make within that period. When your quota is reached, you'll receive a 403 - Quota Exceeded response from the API, and the body of the response will indicate how long you must wait before the quota period renews (you can also inspect the Retry-After header which will contain the number of seconds to wait):\nRetry-After: 406\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Length: 83\nContent-Type: application/json { \"statusCode\": 403, \"message\": \"Out of call volume quota. Quota will be replenished in 00:06:46.\"\n} The quota enforced for the SKY API Standard Edition is 25,000 calls per day. If you need to increase your quota, please fill out our request form. Pagination\nMany endpoints in the SKY API return a collection of records. In some cases (such as the Constituents (Get List) endpoint), we also support the concept of pagination, where instead of returning all of the results in a single response, we return them in smaller sets called pages. This approach allows us to keep the performance high on the server, and also minimizes the size of our responses on the wire by breaking them into smaller, more manageable blocks.\nlimit and offset\nWhen an endpoint supports pagination, it will accept limit and offset query string parameters to allow you to control the paging. The limit parameter represents the number of records to return (page size), while the offset parameter represents the number of records to skip.\nHere's an example request for returning the first 50 constituents via the Constituents (Get List) endpoint and the limit query string parameter:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50 To retrieve the next 50 records, include offset=50 to skip the first 50 records:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50&offset=50 To retrieve the next 50 records, include offset=100 to skip the first 100 records:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50&offset=100 Note that offset numbering is zero-based, and that omitting the offset parameter will return the first n elements (where n represents the limit parameter). Refer to the endpoint documentation for specifics about any default/maximum allowed page size values.\nnext_link\nSome paginated endpoints may include a hypermedia link that can be used to fetch the next page of results. This value can be found in the next_link property of the collection response.\nDate formats\nUnless otherwise specified, dates are represented within the SKY API in ISO 8601 format. Some endpoints may further support time components or Coordinated Universal Time (UTC) format. Refer to the specific endpoint documentation for details on what date formats are supported.\nNote that fuzzy dates are handled differently from the ISO-8601 standard. For more information on fuzzy dates, see fuzzy dates.\nFuzzy dates\nFuzzy dates are found on entities with date-like properties where the complete date may be unknown. They are represented in the SKY API as a JSON object with 3 fields for the year, month, and day components: y,m,d.\nFuzzy date fields generally allow the following formats: month, day, and year\nmonth and year\nyear only Some entities may support additional formats, so be sure to reference the specific documentation for an endpoint that accepts or returns a fuzzy date.\nFor example, the constituent entity birthdate field is a fuzzy date that supports \"month and day\" as well as the above formats. In the below sample JSON representation, only the y property of the fuzzy date is shown which indicates that only the year value is known:\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Type: application/json; charset=utf-8 { \"id\": \"280\", \"type\": \"individual\", \"lookup_id\": \"96\", \"inactive\": false, \"name\": \"Dr. Robert C. Hernandez\", \"last\": \"Hernandez\", \"first\": \"Robert\", \"middle\": \"Carlos\", \"nickname\": \"Bob\", \"title\": \"Dr.\", \"gender\": \"male\", \"birthdate\": { \"y\": 1961 }\n} The following example shows a partial collection of notes for a constituent. The date property is a fuzzy date, and in the first note the value represented is June, 2007.\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Type: application/json; charset=utf-8 { \"count\": 25, \"value\": [ { \"id\": \"12\", \"type\": \"Address Changes\", \"date\": { \"y\": 2007, \"m\": 6 }, \"summary\": \"Vacation\", \"text\": \"Dr. Hernandez has purchased a vacation home in Arizona.\" }, { \"id\": \"10\", \"type\": \"Career\", \"date\": { \"y\": 2006, \"m\": 6, \"d\": 11 }, \"summary\": \"Opening of Pediatric Clinic with Partner\", \"text\": \"Dr. Hernandez plans to leave the pharmaceutical company to open a practice with his former colleague.\" }, ... ]\n} Fuzzy dates are not traditional dates and do not conform to the ISO 8601 standard. For additional information about fuzzy dates, see the entity reference.\nSecurity\nWhen calling the SKY API or when manually working with data in the underlying products, remember that specific operations and access to data follow the same rules. Required fields on records, business rules, and your user security (including advanced security) are all considered. For further information, review endpoint descriptions.\nActivating the SKY API Console\nThe SKY API Console is a Blackbaud application built into the Endpoint Reference that can be used to test the SKY API. Before jumping in to build your own applications, we recommend you add the SKY API Console to your or your customer's tenant to aid with testing and development. To access a tenant's data, the SKY API Console, must be approved by a tenant administrator. For Blackbaud customers, a tenant administrator is a user within the organization that is part of the Supervisor security group. This may include Partners or API subscribers that have their own dedicated tenant, or are Supervisor users in their customer's tenant. Administrators provide approval for applications, including the SKY API Console, by activating the application within the Applications area of the product.\nTo activate the SKY API Console, the tenant administrator needs to do the following: Copy the SKY API Console Application ID:A056CA6B-A3A8-4AC7-B325-997666306E52 Visit the Control Panel, Applications area of the product. Select Add application, paste the SKY API Console Application ID, and select Save. Once added, The SKY API Console will appear in the list of activated applications for the tenant. Important! The same process can be followed to activate additional applications for your tenant. Simply substitute the application ID for the one provided in the My Applications area of your Developer Account to add your own application, or use the application ID provided to you by a Partner or third party developer that you know and trust. Breaking changes\nBreaking changes are any changes that could potentially cause failures in applications that consume SKY API. If an API change could cause API calls to fail or return different results than before, then we consider it a breaking change. This includes changes to entities such as new data types or property names, changes to response data types or status codes, and changes to result sets for collection endpoints. We strive to avoid breaking changes if at all possible, so breaking changes are few and far between. However, they are sometimes necessary. We only make breaking changes when we determine that they are critical, and we weigh the disruption that the breaking changes will cause. We strive to be transparent about these changes, and we announce them in a changelog on the SKY API website and in the Community blog at least one week before we deploy to give consumers of the API time to assess the impact of the changes, to raise any questions, and to plan accordingly.\nFor more information about how we define and handle breaking changes, please see the breaking changes post in the Community blog. "
    },
    {
     "layout": "layout-showcase",
     "order": 400,
     "name": "Code Samples",
     "description": "A listing of helpful code samples.",
     "icon": "fa fa-github fa-4x",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": false,
     "showBreadcrumbs": true,
     "title": "Code Samples",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInSearch": true,
     "breadcrumbs": "Docs Code",
     "abspath": "docs/code/index.md",
     "uri": "/docs/code/",
     "nav_links": [
      {
       "name": "App Showcase",
       "layout": "layout-container",
       "description": "A collection of fully-formed applications that can assist in quick-starting your own SKY API applications",
       "order": 3,
       "icon": "fa fa-fw fa-cube",
       "showBreadcrumbs": true,
       "title": "App Showcase",
       "appShowcase": [
        {
         "title": "Barkbaud (NodeJS)",
         "icon": "fa-cube",
         "repo": "<%= stache.config.github_repo_barkbaud_nodejs %>",
         "description": "A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow",
         "demo": "<%= stache.config.tutorial_barkbaud_live_demo %>"
        }
       ],
       "sortKey": "order",
       "sortDirection": "asc",
       "showInNav": true,
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code App-showcase",
       "abspath": "docs/code/app-showcase/index.md",
       "uri": "/docs/code/app-showcase/",
       "text": " App Showcase Barkbaud (NodeJS) A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow View on GitHub View live demo "
      },
      {
       "name": "Authorization Code Flow",
       "description": "Quick-start code samples for Authorization Code Flow",
       "layout": "layout-showcase",
       "showBreadcrumbs": true,
       "icon": "fa fa-fw fa-lock",
       "title": "Authorization Code Flow Code Samples",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInNav": true,
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Auth-code-flow",
       "abspath": "docs/code/auth-code-flow/index.md",
       "uri": "/docs/code/auth-code-flow/",
       "nav_links": [
        {
         "layout": "layout-container",
         "name": "C# .NET Core",
         "title": "Authorization Code Flow - C# .NET Core",
         "icon": "fa fa-fw fa-windows",
         "description": "Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
         "order": 1,
         "published": true,
         "showInNav": true,
         "showBreadcrumbs": true,
         "tutorial": true,
         "back_to_top": true,
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Auth-code-flow C-sharp",
         "abspath": "docs/code/auth-code-flow/c-sharp/index.md",
         "uri": "/docs/code/auth-code-flow/c-sharp/",
         "text": " Comments Edit in GitHub Authorization Code Flow - C# .NET Core GitHub Live Demo\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use ASP.NET Core for the server-side platform and C#.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites Since we are using the Authorization Code Flow, we need to use a server-side software platform, such as .NET Core. You will need to Download and install .NET Core\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the bb-api-subscription-key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo register your application: Go to My Applications to manage your applications. Click Register app. Enter the following information: Field Description Application name (Required) Enter a name for your application. This is the name that users will see when asked to grant access to your application during the authorization process. It will also be seen by administrators within the Applications area of the product when they view the list of applications that have been granted access to their data. Application details (Required) Provide a description for your application. This will be seen by administrators when activating your application within the product. Organization name (Required) Specify the company name that users and administrators will see associated with your application. Application logo (Optional) Provide a 512 by 512 pixel PNG or JPEG image that users and administrators will see associated with your application. Application website URL (Required) Enter a URL where users can find out more information about your application. Redirect URIs (Required) Specify one or more URIs that should be used when redirecting the user's browser back to your application after providing consent during the authorization process. The URIs must be absolute and use https (note that we do support http://localhost:port or http://127.0.0.1:port for local development). To register multiple URIs, click Add another redirect URI. For this tutorial, use http://localhost:5000/auth/callback. Important! When your application requests authorization to access a Blackbaud customer's data, it will include a redirect_uri parameter as part of the query string. This value must match exactly against one of the values you listed when registering your application, including any trailing slashes. If the value supplied does not match any of the registered redirect URIs, then authorization will fail. For more information on commonly encountered authorization problems, see common authorization issues. Click Save to complete the registration of your application. After you register an application, take note of the credentials (ID and Secret) that are displayed in the Application Credentials column. These credentials are unique to your application, and are used to verify your application's identity during the authorization process. Application ID is the unique identifier for your application. This value is not sensitive and can be shared publicly. It cannot be modified after the application is registered, so if you need change it for any reason you must delete the application and re-add it.\nApplication secret is the key your application will provide when requesting an access token to call the SKY API as part of the authorization process. This value is sensitive and should NOT be shared with anyone else! To display the secret, click Show in the Application Credentials column. Very Important! The application secret should be kept private and safe! Regenerate your secret if it is compromised. Blackbaud reserves the right to remove or deactivate your application in order to protect our customer's data. Step 3 — Grab the Source Code\nThe sky-api-auth-tutorial-c-sharp repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial-c-sharp repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial-c-sharp.git Step 4 — Prepare Your Environment\nLet's explore some application settings files and prep your environment variables. Open the sky-api-auth-tutorial-c-sharp working directory.\nOpen the appsettings.json which details generic properties to be used by the application. Take note of the following SKY API URI property values: AuthBaseUri URI to the Authorization Service. SkyApiBaseUri URI to the SKY API Endpoints. For local development, duplicate the file appsettings.json-sample, renaming it to appsettings.Development.json. The appsettings.Development.json file contains your registered application's environment variables. Note that private properties, such as your Application ID and Application secret, are stored in this file. For security, the appsettings.Development.json is excluded from being syncronized with GitHub via the file .gitignore. At run time, the application will merge these properties into the available environment variables. In .NET Core, the Startup class, Startup.cs provides the entry point for an application, and is required for all applications. This class configures the application and sets up the required middleware. { \"AppSettings\": { \"AuthClientId\": \"\", \"AuthClientSecret\": \"\", \"AuthRedirectUri\": \"http://localhost:5000/auth/callback\", \"AuthSubscriptionKey\": \"\" }\n} Using the values from your registered application and the subscription key from your Blackbaud Developer Profile, update appsettings.Development.json with the following values. All values are required.: AuthClientId Your registered application's Application ID. AuthClientSecret Your registered application's Application secret. AuthRedirectUri One of your registered application's Redirect URIs. For this tutorial, we will use http://localhost:5000/auth/callback. AuthSubscriptionKey Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the file. Step 5 — Run the Application Using Command Prompt/Terminal/bash prompt, ensure you are in the working directory.\nOpen and review the project.json file. This file details the application’s dependencies. These NuGet modules (project dependencies) are installed when issuing the dotnet restore command within Command Prompt/Terminal/bash prompt.\nOn a Mac, issue the following commands to restore the packages specified in the project.json file and run the actual sample:\n$ dotnet restore\n$ export ASPNETCORE_ENVIRONMENT=Development && dotnet run On a PC, type:\n$ dotnet restore\n$ set ASPNETCORE_ENVIRONMENT=Development && dotnet run Visit http://localhost:5000/ to view your locally running application. Application Starting Point IIS is used as the webserver. An ASP.NET Core Module configured in project.json is used to list dependencies and configure IIS to launch and host your application.\nOpen the Program.cs file. The Main() method is the starting point of our application. It is responsible for initializing the application. We use WebHostBuilder to listen on a particular IP address and port: http://localhost:5000/. As of RC2 an ASP.NET Core application is a .NET Core Console application that calls into ASP.NET specific libraries. This code runs on the server-side and is not visible to the application user. Running the code server-side helps to protect your Application secret.\nusing System.IO;\nusing Microsoft.AspNetCore.Hosting; namespace Blackbaud.AuthCodeFlowTutorial\n{ public class Program { public static void Main(string[] args) { var host = new WebHostBuilder() .UseKestrel() .UseContentRoot(Directory.GetCurrentDirectory()) .UseIISIntegration() .UseStartup() .Build(); host.Run(); } }\n}\nOpen your browser to http://localhost:5000/ to request the Home page. When the front page loads, the AngularJS on the Home page (/Views/Shared/_Layout.cshtml) makes a request to the /auth/authenticated endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ...\nThe call to the endpoint routes to the corresponding controller (/Controllers/AuthenticationController.cs) and returns a Boolean representing the current user's authentication status. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false.\n[HttpGet(\"authenticated\")]\npublic ActionResult Authenticated()\n{ return Json(new { authenticated = _authService.IsAuthenticated() });\n}\n... Displaying the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, click Show advanced and then click Proceed to localhost (unsafe). Open the Views/Shared/_Layout.cshtml file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button:\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /Controllers/AuthenticationController.cs.\nWhen the user clicks the Log in button, a call is made to LogIn() which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n[HttpGet(\"login\")]\npublic ActionResult LogIn()\n{ Uri address = _authService.GetAuthorizationUri(); return Redirect(address.ToString());\n}\n...\nOnce authorized, SKY API redirects the user back to the /auth/callback URI with an authorization code. Once an authorization code has been obtained, it is exchanged the code for an access token. The app is then redirected back to the Home page. [HttpGet(\"callback\")]\npublic ActionResult Callback()\n{ string code = Request.Query[\"code\"]; _authService.ExchangeCodeForAccessToken(code); return Redirect(\"/\");\n}\n... Retrieve Constituent Data Open the Home page (Views/Shared/_Layout.cshtml).\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents/280 to retrieve a constituent record:\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); ... The data is returned as JSON to the Home page where the model's data is projected through the view of the HTML template:\n<div ng-if=\"isAuthenticated\"> <h3>Constituent: </h3> <p> See <a href=\"/api/entity-reference/constituent\">Constituent</a> within the SKY API entity reference for a full listing of properties. </p> <p ng-if=\"::constituent.error\" ng-bind=\"::constituent.error\" class=\"alert alert-danger\"></p> <div ng-if=\"::constituent.id\" class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div>\n... Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /Controllers/AuthenticationController.cs\nIf the user clicks Log Out, they are redirected to /auth/logout which destroys the access/refresh token stored in the browser’s session.\nIf the user clicks Refresh Access Token, AngularJS makes a request to /auth/refresh-token, which asks SKY API to return a refreshed access token, which is then stored in the browser’s session. That's it! Be sure to take a look at our other code samples.\nCheck out the README where you can view a live demo of the application hosted on Microsoft Azure.\nThe README also contains instructions for deploying to Azure App Services rather than your local development environment.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
        },
        {
         "layout": "layout-container",
         "name": "Chrome Extension",
         "title": "Authorization Code Flow - Chrome Extension",
         "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.",
         "order": 3,
         "icon": "fa fa-fw fa-chrome",
         "showInNav": true,
         "showBreadcrumbs": true,
         "back_to_top": true,
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Auth-code-flow Chrome-extension",
         "abspath": "docs/code/auth-code-flow/chrome-extension/index.md",
         "uri": "/docs/code/auth-code-flow/chrome-extension/",
         "text": " Edit in GitHub Authorization Code Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.\nView the source on GitHub "
        },
        {
         "layout": "layout-container",
         "name": "NodeJS",
         "title": "Authorization Code Flow - NodeJS",
         "description": "Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
         "order": 2,
         "icon": "fa fa-fw fa-desktop",
         "published": true,
         "showInNav": true,
         "tutorial": true,
         "showBreadcrumbs": true,
         "back_to_top": true,
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Auth-code-flow Nodejs",
         "abspath": "docs/code/auth-code-flow/nodejs/index.md",
         "uri": "/docs/code/auth-code-flow/nodejs/",
         "text": " Comments Edit in GitHub Authorization Code Flow - NodeJS GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use Node.js, a server-side platform.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running Node.js.\nFamiliarity with Node.js, using NPM to install project dependencies, and environment variables including setting them in either an OSX/Linux or Windows environment.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection to clone the repo and install the project's dependencies. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the bb-api-subscription-key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. Keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo register your application: Go to My Applications to manage your applications. Click Register app. Enter the following information: Field Description Application name (Required) Enter a name for your application. This is the name that users will see when asked to grant access to your application during the authorization process. It will also be seen by administrators within the Applications area of the product when they view the list of applications that have been granted access to their data. Application details (Required) Provide a description for your application. This will be seen by administrators when activating your application within the product. Organization name (Required) Specify the company name that users and administrators will see associated with your application. Application logo (Optional) Provide a 512 by 512 pixel PNG or JPEG image that users and administrators will see associated with your application. Application website URL (Required) Enter a URL where users can find out more information about your application. Redirect URIs (Required) Specify one or more URIs that should be used when redirecting the user's browser back to your application after providing consent during the authorization process. The URIs must be absolute and use https (note that we do support http://localhost:port or http://127.0.0.1:port for local development). To register multiple URIs, click Add another redirect URI. For this tutorial, use http://localhost:5000/auth/callback. Important! When your application requests authorization to access a Blackbaud customer's data, it will include a redirect_uri parameter as part of the query string. This value must match exactly against one of the values you listed when registering your application, including any trailing slashes. If the value supplied does not match any of the registered redirect URIs, then authorization will fail. For more information on commonly encountered authorization problems, see common authorization issues. Click Save to complete the registration of your application. After you register an application, take note of the credentials (ID and Secret) that are displayed in the Application Credentials column. These credentials are unique to your application, and are used to verify your application's identity during the authorization process. Application ID is the unique identifier for your application. This value is not sensitive and can be shared publicly. It cannot be modified after the application is registered, so if you need change it for any reason you must delete the application and re-add it.\nApplication secret is the key your application will provide when requesting an access token to call the SKY API as part of the authorization process. This value is sensitive and should NOT be shared with anyone else! To display the secret, click Show in the Application Credentials column. Very Important! The application secret should be kept private and safe! Regenerate your secret if it is compromised. Blackbaud reserves the right to remove or deactivate your application in order to protect our customer's data. Step 3 — Install Node.js\nAfter you have your subscription key, Application ID, and Application secret, it's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use Node.js. Download and install Node.js. Use the default settings for your development environment.\nCreate a file named testserver.js and add the following code: // Create a very simple HTTP web server on your local machine. // Set up a HTTP Web server and client, require('http'). var http = require('http'); // createServer returns a new instance of the http server. // A function is used as a request listener. // req is an instance of the incoming request. // res is an instance of the server response. // When you browse to http://localhost:1337/, a 'request' event occurs and // \"Hello World\" is written from the HTTP Web server back to your browser. http.createServer(function (req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello World'); }).listen(1337, \"localhost\"); console.log('Server running at http://localhost:1337/'); Save the file in a folder named testnodejs. From a command prompt, change the directory to testnodejs and run the testserver.js file: $ cd testnodejs\n$ node testserver.js The Web server listens for requests on your localhost, port 1337. In a Web browser, navigate to localhost:1337. The Web server displays a page with with \"Hello World.\" To stop the Web server, type CTRL-C in the command line. Step 4 — Grab the Source Code\nThe sky-api-auth-tutorial repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial. The following command creates a working directory named sky-api-auth-tutorial that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial.git Step 5 — Prepare Your Environment Open the sky-api-auth-tutorial working directory and copy the configuration file sky.env-sample as sky.env. The sky.env file contains the application's environment variables for NodeJS environments. Update sky.env with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:5000/auth/callback. (See My Applications.) AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. PORT The Web server port that will run the application. For this tutorial, enter 5000. Save the environment file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that any .env files are ignored. This prevents the environment files from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 6 — Install Dependencies From the working directory, run npm install to install the project dependencies.\nNPM is the package manager that comes bundled with Node.js (since you already installed Node.js, you also have NPM). The command npm install downloads any dependencies listed in the package.json file and adds them to the app's node_modules directory (this command also creates this directory if it doesn't already exist). Each dependency is represented as a child directory of node_modules. $ cd sky-api-auth-tutorial\n$ npm install After you run npm install, verify that the sky-api-auth-tutorial working directory contains the node_modules subfolder. npm install depends on a reliable Internet connection to install dependencies. If you have issues running the command, you can hard delete the node_modules folder and run npm install again. Step 7 — Run the Application Using Command Prompt/Terminal, ensure you are in the working directory.\nType npm start to start the application server at http://localhost:5000. $ npm start Application starting point Open the index.js file. This is the starting point of our application. This code runs on the server side and is not visible to the application user. The code performs the following:\nIt registers our application dependencies such as Express.\nIt handles authorization and user requests to the home page and data endpoints.\nIt creates a web server on your local machine at https://localhost:5000. To request the home page open your browser to http://localhost:5000/. It displays the authorization options. Your browser may display a warning that the connection is not private. For this tutorial, ignore this message. To proceed, click Show advanced, and then click Proceed to localhost (unsafe). Open the ui folder and the index.html file. This opens the home page for our application, where we can initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Node.js server routes.\nBelow the body tag, the ng-view tag is used as a hook for our Angular Router to load our desired template view.\n<!-- INITIALIZE THE APP -->\n<body ng-app=\"AuthCodeFlowTutorial\"> <!-- LOAD OUR VIEWS --> <ng-view></ng-view> ... Set up the router Open the app folder and the main.js file. Our application's logic lives here.\nFirst, we declare our angular module and inject the ngRoute dependency.\nangular.module('AuthCodeFlowTutorial', ['ngRoute'])\nNext, we initialize our Angular Router to manage our views and controllers. angular.module('AuthCodeFlowTutorial', ['ngRoute']) .config(function ($routeProvider) { $routeProvider .when('/home', { templateUrl: './app/main-template.html', controller: 'MainController' }) .when('/auth-success', { template: 'Login Successful', controller: 'AuthController' }) .otherwise({ redirectTo: '/home' }) In this example, we use two views and two controllers. As your app grows, you can add more views and controllers. Display the authorize buttons Open the app folder and the main-template.html file. This is our application's core view.\nThe main.js file holds the logic to initiate our AngularJS Controllers and our Angular Router.\nJust after the page title, the authorize buttons reference the server's authorization endpoint. When a user clicks one of these buttons, the authorization process begins. When a session is authenticated, the authorize buttons are hidden. The Authorize using redirect button initiates the authorization process by redirecting the browser to the authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 well login-options\"> <span class=\"login-options-label\">Login using redirect</span> <a href=\"/auth/login\" class=\"btn btn-primary btn-block btn-lg\">Log in</a>\n</div> The Authorize using popup button opens a popup window that is directed to the server's authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 col-sm-offset-2 well login-options\"> <span class=\"login-options-label\">Login using popup</span> <button ng-click=\"popupLogin()\" class=\"btn btn-primary btn-block btn-lg\" target=\"login-iframe\">Log in</button>\n</div> Using the popup option, our Angular code performs the following actions: It calls the popupLogin() method. This method opens a window at the specified URL, and we pass in a ?redirect= parameter and set it to the hash /%23/auth-success, which translates to:/#/auth-success.\n.controller('MainController', function ($scope, $http, $window) {\n...\n$scope.popupLogin = function () { var popup popup = window.open('auth/login?redirect=/%23/auth-success', 'login', 'height=450,width=600,'); if (window.focus) { popup.focus(); }\n} When the browser redirects to the /#/auth-success, the AuthController closes the current window and redirects the browser to the route '/' so our router will redirect the page to #/home.\n.controller('AuthController', function ($window) { ... $window.opener.location = '/'; $window.close();\n}) The JavaScript in main.js in the MainController uses Ajax calls to the /auth/authenticated endpoint to determine whether the users are logged in. If the users access token has expired or is invalid, the page displays the Authorize buttons. Users must log in to obtain a valid access token. angular.module('AuthCodeFlowTutorial', ['ngRoute']) ... .controller('MainController', function ($scope, $http) { ... /** * Check user access token. */ $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; /** * Access token is valid. Fetch constituent record. */ if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } }); }); Obtain an Access Token Click one of the Authorize buttons and enter your Blackbaud account credentials. After authentication, your browser redirects to the Blackbaud Authorization Service authorization form. Open index.js and /server/routes/auth.js. The Authroize button prompt a request to the web server's /auth/login endpoint. The route in the app's main index.js file directs requests to the getLogin() function within /server/routes/auth.js. // Register our OAUTH2 routes\napp.get('/auth/authenticated', routes.auth.getAuthenticated);\napp.get('/auth/login', routes.auth.getLogin);\napp.get('/auth/callback', routes.auth.getCallback);\napp.get('/auth/logout', routes.auth.getLogout); The auth.js file relies on the simple-oauth2 client library. To creating an object you must provide your registered application's Application ID and Application secret values, which reside in the project's sky.env file as the AUTH_CLIENT_ID and AUTH_CLIENT_SECRET environment variables. You need the URL to the Blackbaud Authorization Service along with the token endpoint. oauth2 = require('simple-oauth2')({ clientID: process.env.AUTH_CLIENT_ID, clientSecret: process.env.AUTH_CLIENT_SECRET, site: 'https://oauth2.apim.blackbaud.com/', tokenPath: '/token'\n}); To obtain an authorization code, the getLogin() function uses simple-oauth2's authorizeURL() function to display the Blackbaud Authorization Service's authorization form. After users approve or deny the request, the responses are redirected using the value of the AUTH_REDIRECT_URI environment variable: https://localhost:5000/auth/callback. function getLogin(request, response) { request.session.redirect = request.query.redirect; request.session.state = crypto.randomBytes(48).toString('hex'); response.redirect(oauth2.authCode.authorizeURL({ redirect_uri: process.env.AUTH_REDIRECT_URI, state: request.session.state }));\n} The access token exchange should occur server side. Do not expose the Application secret to users in client-side code. Do not expose your Application secret in a source code repository such as GitHub. The path /auth/callback is routed to the getCallback() function that exchanges authorization codes for access tokens. function getCallback(request, response) { ... options = { code: request.query.code, redirect_uri: process.env.AUTH_REDIRECT_URI }; oauth2.authCode.getToken(options, function (errorToken, ticket) { if (errorToken) { error = errorToken.message; } else { redirect = request.session.redirect || '/'; request.session.redirect = ''; request.session.state = ''; saveTicket(request, ticket); response.redirect(redirect); } }); ...\n} The access token value is not passed back to the client. Instead, the saveTicket() function saves it to the session state. function saveTicket(request, ticket) { request.session.ticket = ticket; request.session.expires = (new Date().getTime() + (1000 * ticket.expires_in));\n} Retrieve constituent data\nThe response redirects users to the home page and AppController. The AppController verifies that users are logged in through calls to the web server's /auth/authenticated endpoint. After verification, calls are made to the web server's api/constituents/280.\nangular.module('AuthCodeFlowTutorial', [])\n.controller('AppController', function ($scope, $http, $window) { // Checks the user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); Open /server/libs/sky.js and /server/routes/api.js. The route in the app's main index.js file directs the request to the getConstituent() function in /server/libs/sky.js. The call is passed along to /server/routes/api.js, which interacts directly with SKY API endpoints. Eventually the call makes its way to the proxy() function. Here, we can see the use of the bb-api-subscription-key and Authorization request headers: function proxy(request, method, endpoint, body, callback) { var options = { json: true, method: method, body: body, url: 'https://api.sky.blackbaud.com/constituent/v1/'' + endpoint, headers: { 'bb-api-subscription-key': process.env.AUTH_SUBSCRIPTION_KEY, 'Authorization': 'Bearer ' + request.session.ticket.access_token } }; promise(options) .then(callback) .catch(function (err) { console.log('Proxy Error: ', err); });\n} The bb-api-subscription-key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The code is marries the constituent data to an AngularJS template in our ui/app/main-template.html view and renders it in a Bootstrap table. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Summary\nYou should now have a fully functioning application using implicit-flow. Users of your app should be able to log in with their Blackbaud credentials, authorize the app, and get constituent data after they are authenticated. Be sure to take a look at our other code samples. You can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
        }
       ],
       "text": " Authorization Code Flow C# .NET Core Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. NodeJS Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow. "
      },
      {
       "name": "Implicit Flow",
       "layout": "layout-showcase",
       "description": "Get up-and-running with our Implicit Flow code samples",
       "showBreadcrumbs": true,
       "icon": "fa fa-fw fa-user",
       "title": "Implicit Flow Code Samples",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInNav": true,
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Implicit-flow",
       "abspath": "docs/code/implicit-flow/index.md",
       "uri": "/docs/code/implicit-flow/",
       "nav_links": [
        {
         "layout": "layout-container",
         "name": "AngularJS",
         "title": "Implicit Flow - AngularJS",
         "description": "Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
         "order": 2,
         "icon": "fa fa-fw fa-desktop",
         "showInNav": true,
         "tutorial": true,
         "showBreadcrumbs": true,
         "back_to_top": true,
         "useComments": false,
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Implicit-flow Angular",
         "abspath": "docs/code/implicit-flow/angular/index.md",
         "uri": "/docs/code/implicit-flow/angular/",
         "text": " Edit in GitHub Implicit Flow - AngularJS GitHub\nLearn how to create an AngularJS app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
        },
        {
         "layout": "layout-container",
         "name": "Angular 2",
         "title": "Implicit Flow - Angular 2",
         "description": "Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
         "order": 2,
         "icon": "fa fa-fw fa-desktop",
         "showInNav": true,
         "tutorial": true,
         "showBreadcrumbs": true,
         "back_to_top": true,
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Implicit-flow Angular2",
         "abspath": "docs/code/implicit-flow/angular2/index.md",
         "uri": "/docs/code/implicit-flow/angular2/",
         "text": " Edit in GitHub Implicit Flow - Angular 2 GitHub\nLearn how to create an Angular 2 app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
        },
        {
         "name": "Chrome Extension",
         "layout": "layout-container",
         "title": "Implicit Flow - Chrome Extension",
         "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.",
         "icon": "fa fa-fw fa-chrome",
         "showBreadcrumbs": true,
         "sortKey": "order",
         "sortDirection": "asc",
         "showInNav": true,
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Implicit-flow Chrome-extension",
         "abspath": "docs/code/implicit-flow/chrome-extension/index.md",
         "uri": "/docs/code/implicit-flow/chrome-extension/",
         "text": " Edit in GitHub Implicit Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
        }
       ],
       "text": " Implicit Flow Angular 2 Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. AngularJS Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow. "
      }
     ],
     "text": " Code Samples App Showcase A collection of fully-formed applications that can assist in quick-starting your own SKY API applications Authorization Code Flow Quick-start code samples for Authorization Code Flow Implicit Flow Get up-and-running with our Implicit Flow code samples "
    },
    {
     "nav_links": [
      {
       "layout": "layout-base",
       "name": "Create an Application",
       "description": "Learn how to successfully create an application with SKY API.",
       "order": 600,
       "published": true,
       "showInNav": false,
       "back_to_top": true,
       "title": "Create an Application Tutorial",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": false,
       "showInFooter": false,
       "showInSearch": true,
       "breadcrumbs": "Docs Createapp A",
       "abspath": "docs/createapp/a/index.md",
       "uri": "/docs/createapp/a/",
       "text": " Create an Application with SKY API To successfully create an application with SKY API, follow this step-by-step guide. Before you begin, be sure to complete the Getting Started guide, where you'll get your Blackbaud developer account, a subscription key, and learn how to explore the Endpoint Reference. Register your application To call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app.\nEnter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product.\nIn the Application website URL field, enter where users can learn more about your application online.\nSpecify the URIs to use to redirect users back to your application during the authorization process. Note:The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. Review your application credentials After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Activate your application in a tenant For your application to access a user's Blackbaud data, the tenant's administrator must approve its use for their organization and activate it within their product. For Blackbaud customers, the tenant administrator is a user within their organization. To activate your application in a customer's tenant, provide the tenant administrator with your application ID and have the tenant administrator complete the following steps: Copy the Application ID that your Blackbaud developer provided to you.\nVisit the Control Panel, Applications area of your Blackbaud product.\nSelect Add application and then paste in the Application ID. Select Save.\nThe application will then appear in the list of activated applications for the tenant. Request authorization Once your application has been activated, you can then obtain consent from an authenticated user. Upon consent, an OAuth 2.0 access token will be issued to your application in the form of a JSON web token, or JWT. The token should be included on every API request as part of the standard Authorization header. It is tied to the authenticated user's account and organization, which means that your application can only access data to which the authenticated user can access within the system. Learn how to authorize API requests! ... and you're done! You are now ready to go make API calls! Now that you've built and tested your application, here are a few things you should know. SKY UX SKY UX is Blackbaud’s next-generation user-experience framework. You can use it to bring the same consistent experience as Blackbaud products to your customizations and applications. Blackbaud Developer Community Participate and learn from other developers on how they are using the SKY API. Blackbaud Partner Network Learn how to be a part of our Blackbaud Partner Network. © 2016 Blackbaud, Inc. All rights reserved. "
      }
     ]
    },
    {
     "nav_links": [
      {
       "layout": "layout-sidebar",
       "name": "Create an Application",
       "description": "Learn how to successfully create an application with SKY API.",
       "order": 600,
       "published": true,
       "showInNav": false,
       "back_to_top": true,
       "title": "Create an Application Tutorial",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": false,
       "showInFooter": false,
       "showInSearch": true,
       "breadcrumbs": "Docs Createapp B",
       "abspath": "docs/createapp/b/index.md",
       "uri": "/docs/createapp/b/",
       "text": " Create an Application with SKY API To successfully create an application with SKY API, follow this step-by-step guide.\nBefore you begin, be sure to complete the Getting Started guide, where you'll get your Blackbaud developer account, a subscription key, and learn how to explore the Endpoint Reference. Register your application\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product.\nIn the Application website URL field, enter where users can learn more about your application online.\nSpecify the URIs to use to redirect users back to your application during the authorization process. Note:The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. Review your application credentials After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Activate your application in a tenant For your application to access a user's Blackbaud data, the tenant's administrator must approve its use for their organization and activate it within their product. For Blackbaud customers, the tenant administrator is a user within their organization. To activate your application in a customer's tenant, provide the tenant administrator with your application ID and have the tenant administrator complete the following steps: Copy the Application ID that your Blackbaud developer provided to you.\nVisit the Control Panel, Applications area of your Blackbaud product.\nSelect Add application and then paste in the Application ID. Select Save.\nThe application will then appear in the list of activated applications for the tenant. Request authorization Once your application has been activated, you can then obtain consent from an authenticated user. Upon consent, an OAuth 2.0 access token will be issued to your application in the form of a JSON web token, or JWT. The token should be included on every API request as part of the standard Authorization header. It is tied to the authenticated user's account and organization, which means that your application can only access data to which the authenticated user can access within the system. Learn how to authorize API requests! ... and you're done!\nYou are now ready to go make API calls! Next steps\nNow that you've built and tested your application, here are a few things you should know. SKY UX is Blackbaud’s next-generation user-experience framework. You can use it to bring the same consistent experience as Blackbaud products to your customizations and applications. Participate and learn from other developers on how they are using the SKY API in the Blackbaud Developer Community. Learn how to be a part of our Blackbaud Partner Network. "
      }
     ]
    },
    {
     "name": "Getting Started",
     "description": "Obtain the necessary knowledge to make API calls using our interactive <%= stache.config.dev_console_name %>",
     "order": 100,
     "layout": "layout-sidebar",
     "published": true,
     "back_to_top": true,
     "title": "Getting Started",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Getting-started",
     "abspath": "docs/getting-started/index.md",
     "uri": "/docs/getting-started/",
     "text": " Comments Edit in GitHub Getting Started\nThis tutorial shows you how to try out the SKY API through our console.\nStep 1 - Set up your developer account\nSign up for a Blackbaud developer account. This account represents you as a developer within the Blackbaud Developer Portal.\nAlready have an account? Sign in to continue with the Getting Started. Step 2 - Get your subscription key\nWe require you to have an approved subscription key to a specific API product before you can use the SKY API.\nThis subscription key is associated with your Blackbaud developer account. How to get a subscription key? To request a subscription to an API product, from the Products page select SKY API Standard Edition.\nClick Subscribe. A confirmation screen appears.\nTo submit your request, click Confirm. Blackbaud approves the subscription requests. We will send you an email notification when your request is approved. After it is approved, you can view the subscription details within your developer profile.\nImportant! In order to be approved for a subscription key, you must be an authorized user in at least one instance of Raiser's Edge NXT or Financial Edge NXT. This requirement ensures that you have a tenant to make API calls against. Your profile provides details about your subscriptions. Each subscription contains a Primary key and a Secondary key. You can use either key as the subscription key value for the bb-api-subscription-key request header in calls to the API: Step 3 - Activate the SKY API Console\nThe SKY API Console is a Blackbaud application built into the Endpoint Reference that can be used to test the SKY API. Before jumping in to build your own applications, we recommend you add the SKY API Console to your or your customer's tenant to aid with testing and development. To access a tenant's data, the SKY API Console, must be approved by a tenant administrator. For Blackbaud customers, a tenant administrator is a user within the organization that is part of the Supervisor security group. This may include Partners or API subscribers that have their own dedicated tenant, or are Supervisor users in their customer's tenant. Administrators provide approval for applications, including the SKY API Console, by activating the application within the Applications area of the product.\nTo activate the SKY API Console, the tenant administrator needs to do the following: Copy the SKY API Console Application ID:A056CA6B-A3A8-4AC7-B325-997666306E52 Visit the Control Panel, Applications area of the product. Select Add application, paste the SKY API Console Application ID, and select Save. Once added, The SKY API Console will appear in the list of activated applications for the tenant. Important! The same process can be followed to activate additional applications for your tenant. Simply substitute the application ID for the one provided in the My Applications area of your Developer Account to add your own application, or use the application ID provided to you by a Partner or third party developer that you know and trust. Step 4 - Explore the Endpoint Reference\nNow, you are ready to explore the endpoints available to you! Open the Endpoint Reference and select an API. A list of endpoints and operations appears.\nSelect an endpoint from the list.\nReview the information in the reference, including the Request URL, Request parameters, Request headers, response codes, sample JSON data, and Code samples. Step 5 - Try it!\nWhen you are signed in, you can test the SKY API with the SKY API Console. From an Endpoint Reference, click Try it.\nFor example, in the Constituent Endpoint Reference, select the Constituent (Get) endpoint and click Try it. This enables the SKY API Console. Under Query parameters, enter a sample parameter. For example, enter 280 for the constituentId parameter.\nUnder Headers, select the show/hide icon in the bb-api-subscription-key field. The value reflects the selected subscription key from the Authorization section.\nNote: The Request URL and HTTP request change based on the values for the parameter and request header field values.\nHow does the SKY API Console security work? SKY API Console Security When your subscription was approved, Blackbaud added your developer account as a user within the Developer Sandbox tenant. This sandbox tenant represents a sample database that you can access through the SKY API Console.\nWe use OAuth 2.0 to secure the API. This ensures that only valid users have access and that they can only access resources to which they are entitled. Before the SKY API Console sends the request to the endpoint, it must obtain authorization from a valid user (you) to access the data within the Developer Sandbox tenant. Under Authorization, select Authorization code in the Blackbaud OAuth 2.0 Service field. The Blackbaud Authorization Service displays a SKY API Console pop-up window. Select a tenant. Approved API subscribers with access to their own dedicated tenant need to activate the SKY API Console as an approved application. Click Authorize. This gives the SKY API Console access to your SKY API data for the selected tenant.\nAfter you approve the SKY API Console to access the API data for your Blackbaud developer account, the HTTP request is populated with the Authorization:Bearer header. This represents the access token for the request. After you have a bearer token and configure the values for the URI parameters, click Send to submit the request. The response includes a response status, latency, and content including JSON data for the requested endpoint. Step 6 - Next steps Learn how Authorization works, including the Authorization Code Flow and associated tutorials.\nRegister your application to access the SKY API.\nReview our support resources including our Changelog, Issues, Ideas, and FAQ.\nClone our code samples that demonstrate the Authorization Code Flow and SKY UX, Blackbaud’s next-generation user-experience framework.\nJoin our Developer Community, and subscribe to stay up-to-date with the latest hot topics and announcements. "
    }
   ],
   "text": " "
  },
  {
   "layout": "layout-sidebar",
   "name": "Managing your apps",
   "description": "Registering your application and regenerating the client secret",
   "order": 200,
   "published": true,
   "showInNav": true,
   "title": "Managing your Apps",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Apps",
   "abspath": "docs/apps/index.md",
   "uri": "/docs/apps/",
   "text": " Comments Edit in GitHub Managing your apps\nIn order to call the SKY API, you'll need to register your application. This registration provides a unique set of credentials that your application will use when asking a user for permission to access their organization's Blackbaud data during the authorization process.\nRegister your application\nTo register your application: Go to My Applications to manage your applications. Click Register app. Enter the following information: Field Description Application name (Required) Enter a name for your application. This is the name that users will see when asked to grant access to your application during the authorization process. It will also be seen by administrators within the Applications area of the product when they view the list of applications that have been granted access to their data. Application details (Required) Provide a description for your application. This will be seen by administrators when activating your application within the product. Organization name (Required) Specify the company name that users and administrators will see associated with your application. Application logo (Optional) Provide a 512 by 512 pixel PNG or JPEG image that users and administrators will see associated with your application. Application website URL (Required) Enter a URL where users can find out more information about your application. Redirect URIs (Required) Specify one or more URIs that should be used when redirecting the user's browser back to your application after providing consent during the authorization process. The URIs must be absolute and use https (note that we do support http://localhost:port or http://127.0.0.1:port for local development). To register multiple URIs, click Add another redirect URI. Important! When your application requests authorization to access a Blackbaud customer's data, it will include a redirect_uri parameter as part of the query string. This value must match exactly against one of the values you listed when registering your application, including any trailing slashes. If the value supplied does not match any of the registered redirect URIs, then authorization will fail. For more information on commonly encountered authorization problems, see common authorization issues. Click Save to complete the registration of your application. After you register an application, take note of the credentials (ID and Secret) that are displayed in the Application Credentials column. These credentials are unique to your application, and are used to verify your application's identity during the authorization process. Application ID is the unique identifier for your application. This value is not sensitive and can be shared publicly. It cannot be modified after the application is registered, so if you need change it for any reason you must delete the application and re-add it.\nApplication secret is the key your application will provide when requesting an access token to call the SKY API as part of the authorization process. This value is sensitive and should NOT be shared with anyone else! To display the secret, click Show in the Application Credentials column. Very Important! The application secret should be kept private and safe! Regenerate your secret if it is compromised. Blackbaud reserves the right to remove or deactivate your application in order to protect our customers' data. Regenerate your secret\nIf you think your Application secret has been compromised, follow these steps to regenerate the value: Go to My Applications. Locate the application in the list. Select the context menu and click Regenerate secret. Select Show to display the regenerated secret. Be sure to store the new secret securely. Important! Don't forget to update your application to use the regenerated value when requesting access during the authorization process. Activate your application\nFor your application to successfully access a tenant's data, it must be approved by a tenant administrator. For Blackbaud customers, the tenant administrator is a user within their organization. You need to have the tenant administrator provide approval by activating your application within the Applications area of the product. To activate your application in a customer's tenant, have the tenant administrator complete the following steps: Copy the Application ID that you provided to them. Visit the Control Panel, Applications area of the product. Select Add application, and paste your Application ID, and select Save. Your application will then appear in the list of activated applications for the tenant. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Authorization",
   "description": "Description",
   "order": 200,
   "published": true,
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "priority": "high",
   "title": "Authorization",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Docs Authorization",
   "abspath": "docs/authorization/index.md",
   "uri": "/docs/authorization/",
   "nav_links": [
    {
     "layout": "layout-sidebar",
     "name": "Authorization Code Flow",
     "description": "The Authorization Code Flow is appropriate for applications that the user logs into once. Since this flow involves an exchange of your **Application secret* for an access token, it is suitable for applications than run from secure locations such as server-side web application or back-end service.",
     "order": 100,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "Authorization Code Flow",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Authorization Auth-code-flow",
     "abspath": "docs/authorization/auth-code-flow/index.md",
     "uri": "/docs/authorization/auth-code-flow/",
     "text": " Comments Edit in GitHub Authorization Code Flow\nThe authorization code grant is meant for web applications where API calls are made from the server. It is the most secure as it involves server-to-server communication, and is also the most functional as it also provides refresh tokens. This allows your application to have indefinite connectivity to the SKY API after the one-time user-interactive consent process.\nThe flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an authorization code that you can exchange for an access token. You can store this access token (and the refresh token) in your application, and use it when making API calls on that user's behalf.\nSince this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints.\nWe demonstrate this flow in our tutorials and code samples. Step 1 — Request authorization\nInitiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to code. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=code\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 — User authorizes your app\nIn this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission.\nStep 3 — User is redirected back\nAfter the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the query string will contain the following parameters: Query parameter Description code An authorization code that can be exchanged for an access token. state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\ncode=3BB723FF-74C9-4AED-B4F6-7E8A192CBA21\n&state=fdf80155 If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues.\nStep 4 — Request tokens\nWhen your application receives an authorization code, you will need to exchange it for an access token by making a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value authorization_code. code Required. The authorization code supplied to your application's redirect_uri. redirect_uri Required. This parameter is used for validation only (there is no actual redirection). The value of this parameter must exactly match the value of the redirect_uri parameter you supplied when initiating authorization. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=authorization_code&redirect_uri=https%3A%2F%2Fwww.example.com%2Foauth2%2Fcallback&code=bd2d702f47bc453580098c8076d471b4 Note: The authorization code expires in 5 minutes. Be sure to quickly exchange it for an access token. Step 5 — Tokens returned\nIf the access token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"eyJ0eXAiOiJKV1...CTtP0CQ\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"eb78ffd...7cb7b\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\", \"tenant_name\":\"Raiser's Edge NXT - Blackbaud (Developer Sandbox)\"\n} If the token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues.\nStep 6 — Call the SKY API\nThe access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the bb-api-subscription-key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nbb-api-subscription-key: 77f137116...480d633 Step 7 — Refresh access token\nFor security purposes, access tokens will expire after 60 minutes minutes. When this happens, calls to the SKY API will respond with a status code of 401 Not Authorized along with the message \"The required Authorization header was missing or invalid, or the token has expired\". To continue making calls to the API, you will need to exchange the value you received in the refresh_token field for a new access token.\nThis exchange happens on the server, and does not involve any user interactivity. In this way, your application can have indefinite connectivity to after the initial one-time user-interactive consent.\nTo refresh your access token, make a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value refresh_token. refresh_token Required. The refresh token supplied to your application's redirect_uri. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=refresh_token&refresh_token=eb78ffdabc7cb7b If the refresh token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"azH0eXAiOiJKV1...DTxS1DR\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"ab478xsd...7ab6c\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\"\n} If the refresh token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues.\nTutorial\nFor more information on implementing the authorization code flow, check out our tutorials. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Common Authorization Issues",
     "description": "Common errors encountered when interacting with the OAuth endpoints.",
     "order": 200,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "Common Authorization Issues",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Authorization Common-auth-issues",
     "abspath": "docs/authorization/common-auth-issues/index.md",
     "uri": "/docs/authorization/common-auth-issues/",
     "text": " Comments Edit in GitHub Common Authorization Issues\nYou may encounter one of the following common issues when initiating authorization and calling the SKY API.\nRequest authorization\nImportant! Pop up blockers may interfere with obtaining access tokens in the SKY API Console. Please enable pop ups when using the SKY API Console to obtain access tokens. Invalid client_id After you register an application, its credentials are created and displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application. Use this value for the client_id parameter value.\nInvalid redirect_uri This URI needs to be in the Redirect URI whitelist that you specify when you register your application. The value must match exactly, including capitalization, terminating slashes, etc.\nInvalid response_type\nWhen initiating authorization with the \\authorization endpoint, you must pass an appropriate value for the response_type request body parameter as per the OAuth 2 specification. The value must be set to code when using Authorization Code Flow and token when using Implicit Flow.\nUser has no tenants To authorize access to a user’s Blackbaud data, the user must have access to web view for Raiser’s Edge NXT or Financial Edge NXT. This requirement allows SKY API to respect the security rights of the authorized Blackbaud product user. To become a web view user, contact your organization administrator and request an invitation.\nApplication not activated Before an application can request authorization and make API calls to a Blackbaud product, an organization administrator must add the application to the tenant. Administrators can also remove an application when they no longer want the application to have access to their Blackbaud product. For more information, see Activate your application.\nRequest tokens\ninvalid_redirect_uri error \"The specified value for the redirect_uri parameter did not match any pre-registered values.\" This URI needs to be in the Redirect URI whitelist that you specify when you register your application. The value must match exactly including capitalization, terminating slashes, etc.\nFor the Authorization Code Flow, when requesting an access token from the \\token endpoint, you must pass your registered application's redirect_uri for validation purposes. The value of this parameter must exactly match the value of redirect_uri supplied when requesting the authorization code.\nunsupported_grant_type error \"unsupported_grant_type\" error When requesting an access token from the \\token endpoint, you must pass an appropriate value for the grant_type request body parameter as per the OAuth 2 specification. Check the spelling of the grant_type value.\ninvalid_client error \"invalid_client\" error - \"The value specified for the client_id parameter 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX' was not valid.\" After you register an application, its credentials are created and displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application. Use this value for the client_id parameter value.\ninvalid_client error \"invalid_client\" error - \"The required credentials were not supplied.\" This error indicates that we were unable to retrieve the application’s credentials (client ID + secret) from either the authorization header or the request body. To resolve, ensure that you are correctly providing the application credentials as base64-encoded values within the Authorization header (preferred), or as form-url-encoded values in the request body. Note: If using the Authorization header, you need to include a space after Basic. The value must have the format: Basic <base64 encoded Application ID:Application secret>. For more information, see step 4 of Authorization Code Flow documentation.\ninvalid_grant error \"invalid_grant\" error This error is caused by an invalid value in your request to the /token endpoint. For example, this error will be seen when providing an invalid, expired, or previously used authorization code. In this case, you must restart the authorization process and obtain a fresh authorization code from the /authorization endpoint. Note that authorization codes expire in 5 minutes and are not reusable. Be sure to exchange them for access tokens quickly.\nThis error can also been seen when the redirect_uri provided to the /token endpoint does not match the one used when making the initial authorization request. To resolve this, use the same redirect_uri in both operations.\nCall the SKY API\ninvalid subscription key \"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\" Be sure to provide either your primary or secondary subscription key for an active API subscription.\nThe subscription key represents a subscription to a specific SKY API product and is associated with your developer account. To get an subscription key, you'll need to sign up for a Blackbaud developer account and an approved subscription. Once you have an approved subscription, you can view your subscription keys within your profile. The subscription key value is passed with each request to the SKY API via the bb-api-subscription-key request header. See Getting Started for instructions on how to obtain a subscription key and an example of using the subscription key in a call to the API.\nmissing/invalid authorization header \"The required Authorization header was missing or invalid, or the token has expired\" Missing Token\nWhen making calls to the API, you need to provide an access token obtained using OAuth 2.0. The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, be sure to supply the Authorization request header with a value of Bearer, followed by a space and the access_token value.\nIt's a common mistake to forget to prepend the access_token value with Bearer. Be sure to include a space between Bearer and the access_token value.\nSample request:\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nCache-Control: no-cache\nbb-api-subscription-key: 77f137116...480d633 Expired Token\nThe access token expires in 60 minutes. With the Authorization Code Flow, each time you refresh your tokens, you'll get a new access and refresh token. Refresh tokens will also expire, but after a much longer period of time (currently, 60 days). Using a sliding window, each time you exchange your refresh token for a new access token, we will issue a new refresh token as well. As long as your application connects to the SKY API at least once within the window, you will be able to continue to access the Blackbaud customer's data indefinitely (or until they deactivate your application).\nIf your access token and refresh token have expired, the user will have to re-authenticate and consent. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Implicit Flow",
     "description": "The Implicit Flow is carried out client-side within a browser-based app. Since the code is available to the browser, the <%= stache.config.guide_apps_client_secret_name %> cannot be kept a secret and is not used to request an access token.  As a result, the access tokens that are issued are short-lived and there are no refresh tokens to extend them when they expire.",
     "order": 150,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "Implicit Flow",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Authorization Implicit-flow",
     "abspath": "docs/authorization/implicit-flow/index.md",
     "uri": "/docs/authorization/implicit-flow/",
     "text": " Comments Edit in GitHub Implicit Flow\nThe implicit grant is meant for applications where API calls are made from the client, typically within a browser using JavaScript. Since API calls are made from the client, they are inherently less secure and do not involve the exchange of an application secret. The access tokens that are issued are short-lived and no refresh tokens are provided, so the user must re-authorize your application when the token expires.\nLike the Authorization Code Flow, the implicit flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using the Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an access token that you can immediately use when making API calls on that user's behalf. Since this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints.\nStep 1 — Request authorization\nInitiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to token. This indicates that the access token should be returned in the fragment of the redirect URI. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=token\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 — User authorizes your app\nIn this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission.\nStep 3 — Access token provided\nAfter the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the URL fragment will contain the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. state string The value of the state parameter you supplied in the initial authorization request. tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. Reminder: The Implicit Grant Flow provides a short-lived access token that expires in 60 minutes minutes. A refresh token is not provided, so when the token expires your application should re-authorize the user again. Successful redirect response example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback#\naccess_token=1d57284f025...4975d\n&token_type=bearer\n&expires_in=3600\n&state=fdf80155\n&tenant_id=E27DD7B6-6B71-4689-8B2C-60A74F243966\n&tenant_name=Raiser%27s%20Edge%20NXT%20-%20Blackbaud%20%28Developer%20Sandbox%29 If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues.\nStep 4 — Call the SKY API\nThe access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the bb-api-subscription-key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nbb-api-subscription-key: 77f137116...480d633 "
    }
   ],
   "text": " Comments Edit in GitHub Authorization\nSKY API uses the OAuth 2.0 protocol to authorize API requests. This provides a mechanism for your application to access Blackbaud customer data without exposing any user credentials (username/password) to your application. Instead, users must provide consent to your application to access data on their behalf.\nSKY API OAuth 2.0 endpoints: Endpoint URL Authorization https://oauth2.apim.blackbaud.com/authorization Token https://oauth2.apim.blackbaud.com/token In order to call the SKY API, you must first register your application within the My Applications area of the developer portal. This registration provides your application with a unique set of credentials to use when asking a user for consent.\nBefore your application can access a given Blackbaud customer's data, it must first be approved by an administrator within the customer's organization. The administrator provides this approval by activating your application within the Applications area of the product. This allows Blackbaud customers to control which applications have access to their data, and at any time an administrator can de-activate your application and prevent future access via the API.\nOnce your application has been activated, you can then obtain consent from an authenticated Blackbaud user. Upon consent, an OAuth 2.0 access token will be issued to your application in the form of a JSON web token, or JWT. The token should be included on every API request as part of the standard Authorization header. It is tied to the authenticated user's account and organization, which means that your application can only access data to which the authenticated user can access within the system.\nSupported OAuth 2.0 flows\nThe SKY API supports the following grant types: Authorization Code Flow (aka the Web Server flow). This flow is meant for web applications where API calls are made from the server. It is the most secure as it involves server-to-server communication, and is also the most functional as it also provides refresh tokens. This allows your application to have indefinite connectivity to the SKY API after the one-time user-interactive consent process. Implicit Flow. This flow is meant for client-side applications, such as browser-based, native, and mobile applications. Since API calls are made from the client, they are inherently less secure and do not involve the exchange of an application secret. The access tokens that are issued are short-lived and no refresh tokens are provided, so the user must re-authorize your application when the token expires. User experience\nThe Authorization Code Flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with a authorization code that you can exchange for an access token. You can store this access token (and the refresh token) in your application, and use it when making API calls on that user's behalf.\nThe Implicit Flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an access token that you can use when making API calls on that user's behalf.\nToken expiration\nAs a security best-practice, access tokens will expire after a period of time (currently, 60 minutes). When this happens, your application should exchange the refresh token it received with the original access token for a new access token in order to make additional API calls. The refresh token exchange happens on the server and does not involve any interaction with the user.\nIf your access token was obtained using the Implicit Flow, you won't have a refresh token and you'll need the user to re-authorize your application before making additional API calls.\nNote: Refresh tokens will also expire, but after a much longer period of time (currently, 60 days). Using a sliding window, each time you exchange your refresh token for a new access token, we will issue a new refresh token as well. As long as your application connects to the SKY API at least once within the window, you will be able to continue accessing the Blackbaud customer's data indefinitely (or until they deactivate your application).\nScopes\nOAuth 2.0 Scopes are not yet supported within SKY API - in the future, applications may be able to express intent via scopes but for now API access is always within the context of an authenticated user, which means that API access respects the user's security permissions defined within the product. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Authorization Code Flow",
   "description": "The Authorization Code Flow is appropriate for applications that the user logs into once. Since this flow involves an exchange of your **Application secret* for an access token, it is suitable for applications than run from secure locations such as server-side web application or back-end service.",
   "order": 100,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "Authorization Code Flow",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Authorization Auth-code-flow",
   "abspath": "docs/authorization/auth-code-flow/index.md",
   "uri": "/docs/authorization/auth-code-flow/",
   "text": " Comments Edit in GitHub Authorization Code Flow\nThe authorization code grant is meant for web applications where API calls are made from the server. It is the most secure as it involves server-to-server communication, and is also the most functional as it also provides refresh tokens. This allows your application to have indefinite connectivity to the SKY API after the one-time user-interactive consent process.\nThe flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an authorization code that you can exchange for an access token. You can store this access token (and the refresh token) in your application, and use it when making API calls on that user's behalf.\nSince this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints.\nWe demonstrate this flow in our tutorials and code samples. Step 1 — Request authorization\nInitiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to code. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=code\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 — User authorizes your app\nIn this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission.\nStep 3 — User is redirected back\nAfter the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the query string will contain the following parameters: Query parameter Description code An authorization code that can be exchanged for an access token. state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\ncode=3BB723FF-74C9-4AED-B4F6-7E8A192CBA21\n&state=fdf80155 If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues.\nStep 4 — Request tokens\nWhen your application receives an authorization code, you will need to exchange it for an access token by making a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value authorization_code. code Required. The authorization code supplied to your application's redirect_uri. redirect_uri Required. This parameter is used for validation only (there is no actual redirection). The value of this parameter must exactly match the value of the redirect_uri parameter you supplied when initiating authorization. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=authorization_code&redirect_uri=https%3A%2F%2Fwww.example.com%2Foauth2%2Fcallback&code=bd2d702f47bc453580098c8076d471b4 Note: The authorization code expires in 5 minutes. Be sure to quickly exchange it for an access token. Step 5 — Tokens returned\nIf the access token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"eyJ0eXAiOiJKV1...CTtP0CQ\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"eb78ffd...7cb7b\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\", \"tenant_name\":\"Raiser's Edge NXT - Blackbaud (Developer Sandbox)\"\n} If the token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues.\nStep 6 — Call the SKY API\nThe access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the bb-api-subscription-key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nbb-api-subscription-key: 77f137116...480d633 Step 7 — Refresh access token\nFor security purposes, access tokens will expire after 60 minutes minutes. When this happens, calls to the SKY API will respond with a status code of 401 Not Authorized along with the message \"The required Authorization header was missing or invalid, or the token has expired\". To continue making calls to the API, you will need to exchange the value you received in the refresh_token field for a new access token.\nThis exchange happens on the server, and does not involve any user interactivity. In this way, your application can have indefinite connectivity to after the initial one-time user-interactive consent.\nTo refresh your access token, make a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value refresh_token. refresh_token Required. The refresh token supplied to your application's redirect_uri. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=refresh_token&refresh_token=eb78ffdabc7cb7b If the refresh token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"azH0eXAiOiJKV1...DTxS1DR\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"ab478xsd...7ab6c\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\"\n} If the refresh token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues.\nTutorial\nFor more information on implementing the authorization code flow, check out our tutorials. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Common Authorization Issues",
   "description": "Common errors encountered when interacting with the OAuth endpoints.",
   "order": 200,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "Common Authorization Issues",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Authorization Common-auth-issues",
   "abspath": "docs/authorization/common-auth-issues/index.md",
   "uri": "/docs/authorization/common-auth-issues/",
   "text": " Comments Edit in GitHub Common Authorization Issues\nYou may encounter one of the following common issues when initiating authorization and calling the SKY API.\nRequest authorization\nImportant! Pop up blockers may interfere with obtaining access tokens in the SKY API Console. Please enable pop ups when using the SKY API Console to obtain access tokens. Invalid client_id After you register an application, its credentials are created and displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application. Use this value for the client_id parameter value.\nInvalid redirect_uri This URI needs to be in the Redirect URI whitelist that you specify when you register your application. The value must match exactly, including capitalization, terminating slashes, etc.\nInvalid response_type\nWhen initiating authorization with the \\authorization endpoint, you must pass an appropriate value for the response_type request body parameter as per the OAuth 2 specification. The value must be set to code when using Authorization Code Flow and token when using Implicit Flow.\nUser has no tenants To authorize access to a user’s Blackbaud data, the user must have access to web view for Raiser’s Edge NXT or Financial Edge NXT. This requirement allows SKY API to respect the security rights of the authorized Blackbaud product user. To become a web view user, contact your organization administrator and request an invitation.\nApplication not activated Before an application can request authorization and make API calls to a Blackbaud product, an organization administrator must add the application to the tenant. Administrators can also remove an application when they no longer want the application to have access to their Blackbaud product. For more information, see Activate your application.\nRequest tokens\ninvalid_redirect_uri error \"The specified value for the redirect_uri parameter did not match any pre-registered values.\" This URI needs to be in the Redirect URI whitelist that you specify when you register your application. The value must match exactly including capitalization, terminating slashes, etc.\nFor the Authorization Code Flow, when requesting an access token from the \\token endpoint, you must pass your registered application's redirect_uri for validation purposes. The value of this parameter must exactly match the value of redirect_uri supplied when requesting the authorization code.\nunsupported_grant_type error \"unsupported_grant_type\" error When requesting an access token from the \\token endpoint, you must pass an appropriate value for the grant_type request body parameter as per the OAuth 2 specification. Check the spelling of the grant_type value.\ninvalid_client error \"invalid_client\" error - \"The value specified for the client_id parameter 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX' was not valid.\" After you register an application, its credentials are created and displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application. Use this value for the client_id parameter value.\ninvalid_client error \"invalid_client\" error - \"The required credentials were not supplied.\" This error indicates that we were unable to retrieve the application’s credentials (client ID + secret) from either the authorization header or the request body. To resolve, ensure that you are correctly providing the application credentials as base64-encoded values within the Authorization header (preferred), or as form-url-encoded values in the request body. Note: If using the Authorization header, you need to include a space after Basic. The value must have the format: Basic <base64 encoded Application ID:Application secret>. For more information, see step 4 of Authorization Code Flow documentation.\ninvalid_grant error \"invalid_grant\" error This error is caused by an invalid value in your request to the /token endpoint. For example, this error will be seen when providing an invalid, expired, or previously used authorization code. In this case, you must restart the authorization process and obtain a fresh authorization code from the /authorization endpoint. Note that authorization codes expire in 5 minutes and are not reusable. Be sure to exchange them for access tokens quickly.\nThis error can also been seen when the redirect_uri provided to the /token endpoint does not match the one used when making the initial authorization request. To resolve this, use the same redirect_uri in both operations.\nCall the SKY API\ninvalid subscription key \"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\" Be sure to provide either your primary or secondary subscription key for an active API subscription.\nThe subscription key represents a subscription to a specific SKY API product and is associated with your developer account. To get an subscription key, you'll need to sign up for a Blackbaud developer account and an approved subscription. Once you have an approved subscription, you can view your subscription keys within your profile. The subscription key value is passed with each request to the SKY API via the bb-api-subscription-key request header. See Getting Started for instructions on how to obtain a subscription key and an example of using the subscription key in a call to the API.\nmissing/invalid authorization header \"The required Authorization header was missing or invalid, or the token has expired\" Missing Token\nWhen making calls to the API, you need to provide an access token obtained using OAuth 2.0. The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, be sure to supply the Authorization request header with a value of Bearer, followed by a space and the access_token value.\nIt's a common mistake to forget to prepend the access_token value with Bearer. Be sure to include a space between Bearer and the access_token value.\nSample request:\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nCache-Control: no-cache\nbb-api-subscription-key: 77f137116...480d633 Expired Token\nThe access token expires in 60 minutes. With the Authorization Code Flow, each time you refresh your tokens, you'll get a new access and refresh token. Refresh tokens will also expire, but after a much longer period of time (currently, 60 days). Using a sliding window, each time you exchange your refresh token for a new access token, we will issue a new refresh token as well. As long as your application connects to the SKY API at least once within the window, you will be able to continue to access the Blackbaud customer's data indefinitely (or until they deactivate your application).\nIf your access token and refresh token have expired, the user will have to re-authenticate and consent. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Implicit Flow",
   "description": "The Implicit Flow is carried out client-side within a browser-based app. Since the code is available to the browser, the <%= stache.config.guide_apps_client_secret_name %> cannot be kept a secret and is not used to request an access token.  As a result, the access tokens that are issued are short-lived and there are no refresh tokens to extend them when they expire.",
   "order": 150,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "Implicit Flow",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Authorization Implicit-flow",
   "abspath": "docs/authorization/implicit-flow/index.md",
   "uri": "/docs/authorization/implicit-flow/",
   "text": " Comments Edit in GitHub Implicit Flow\nThe implicit grant is meant for applications where API calls are made from the client, typically within a browser using JavaScript. Since API calls are made from the client, they are inherently less secure and do not involve the exchange of an application secret. The access tokens that are issued are short-lived and no refresh tokens are provided, so the user must re-authorize your application when the token expires.\nLike the Authorization Code Flow, the implicit flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using the Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an access token that you can immediately use when making API calls on that user's behalf. Since this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints.\nStep 1 — Request authorization\nInitiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to token. This indicates that the access token should be returned in the fragment of the redirect URI. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=token\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 — User authorizes your app\nIn this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission.\nStep 3 — Access token provided\nAfter the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the URL fragment will contain the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. state string The value of the state parameter you supplied in the initial authorization request. tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. Reminder: The Implicit Grant Flow provides a short-lived access token that expires in 60 minutes minutes. A refresh token is not provided, so when the token expires your application should re-authorize the user again. Successful redirect response example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback#\naccess_token=1d57284f025...4975d\n&token_type=bearer\n&expires_in=3600\n&state=fdf80155\n&tenant_id=E27DD7B6-6B71-4689-8B2C-60A74F243966\n&tenant_name=Raiser%27s%20Edge%20NXT%20-%20Blackbaud%20%28Developer%20Sandbox%29 If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues.\nStep 4 — Call the SKY API\nThe access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the bb-api-subscription-key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nbb-api-subscription-key: 77f137116...480d633 "
  },
  {
   "layout": "layout-sidebar",
   "name": "Basics",
   "description": "Docs to learn our APIs.",
   "order": 300,
   "published": true,
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "back_to_top": true,
   "title": "Basics",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Docs Basics",
   "abspath": "docs/basics/index.md",
   "uri": "/docs/basics/",
   "text": " Comments Edit in GitHub Basics\nThe following information provides an overview of some key concepts within the SKY API. We'll assume you have some familiarity with RESTful programming concepts and the associated tools and techniques for consuming web services.\nBase URL\nAll endpoints within the SKY API are located at the following base URL:\nhttps://api.sky.blackbaud.com Within this address, you'll find APIs (collections of related endpoints) covering the broad functional areas within the SKY API. For example, we currently surface the following APIs: API Location Purpose Accounts Payable /accountspayable Used to manage accounts payable, including vendors and invoices. Constituent /constituent Used to manage constituent information, including related entities such as addresses, phones, emails, and notes. Fundraising (Beta) /fundraising Used to manage information within the fundraising hierarchy and related entities such as campaigns, funds, and appeals. General Ledger /generalledger Used to manage the general ledger, including accounts, projects, and journal entries. Gift (Beta) /gift Used to manage gift information, including related entities such as acknowledgements, fundraisers, and receipts. Within each API, you'll find domain-specific endpoints that allow you to access data and perform operations like searching for records, updating information, etc. The SKY API is based on REST principles, where resources are accessed via standard requests to an API endpoint.\nScheme\nFor security, the SKY API communicates exclusively over HTTPS.\nSubscription\nIn order to call the SKY API, you'll need a subscription associated with your developer account. This subscription represents our permission for you to call the API, and you'll include your subscription key in the bb-api-subscription-key header on every request (see request headers).\nTo obtain a subscription, visit the Products page, select SKY API Standard Edition and click Review terms and subscribe to initiate the request process. You must review all the terms by scrolling down the page before you can agree to the terms and subscribe.\nYou will receive an email notification when your request is approved, and you'll be able to locate your subscription details within your developer profile.\nNote: Currently, SKY API access is limited to Blackbaud Partners and customers using Raiser's Edge NXT or Financial Edge NXT. Subscription requests are reviewed and must be approved by Blackbaud. If you are interested in using SKY API to build an integration for a specific customer, contact that organization's administrator to receive a user invite for the Blackbaud product. If you are interested in using SKY API to build an integration for multiple customers, we encourage you to become a partner. Why two subscription keys?\nBlackbaud provides two subscription keys labeled primary key and secondary key. You are free to use either in your requests to the API. As a security best practice it’s a good idea to rotate which key your applications use when calling the API. This mitigates the risk of a compromised key. Blackbaud won’t mandate a key rotation schedule. You are free to adopt a rotation strategy that best fits your needs. We also give you a mechanism to regenerate the keys associated with your subscription(s) in your Developer account profile.\nAuthorization\nAll endpoints within the SKY API require user-authorization, so in addition to a subscription key you'll also need to supply an OAuth 2.0 access token to access a specific Blackbaud customer's data. This token can be obtained through the authorization process, and should be included on every request as part of the Authorization header (see request headers).\nNote: The token should be considered an opaque value and is tied to the authenticated user's account and organization. This means that your application can only access data to which the authenticated user has permission. HTTP verbs\nThe SKY API is designed to have predictable, resource-oriented URLs to make learning easier. Where possible, the API strives to use the appropriate HTTP verb for each action: Verb Description GET Used to retrieve resources. POST Used to create resources. PATCH Used to update the properties of a resource. DELETE Used to delete resources. Request headers\nThe following request headers are required when calling the SKY API: bb-api-subscription-key - This is your API subscription key, which represents Blackbaud's permission to you to call the SKY API. You can use either the primary or the secondary key associated with your subscription (both are equally functional). For more information on obtaining an API subscription, see subscription.\nAuthorization - This value is an OAuth 2.0 Bearer token, which is obtained during the authorization process and represents a Blackbaud customer's permission for you to access their data. The expected format of this header value is \"Bearer token\" (note the space in the middle). For endpoints that accept JSON in the request body, the Content-Type request header with a value of application/json is required.\nContent types\nUnless otherwise noted, all endpoints within the SKY API accept and return data formatted as JSON. The Content-Type request header with a value of application/json is required when providing content on the body of a request.\nResponse status codes\nThe SKY API uses the following set of standard HTTP response status codes, as defined in RFC 2616 and RFC 6585. Response codes in the 4xx range indicate a problem with your request, while response codes in the 5xx range indicate a problem on our end.\nYou can view the common authentication issues page for additional guidance, and if you are experiencing a problem, feel free to review your support options in our Support area. You can also check the check the Issues page to see if we are experiencing any problems on our end.\nFor response codes in the 4xx or 5xx range (which indicate failures), the response body may contain more details on why the request failed.\nStatus codes Status code Description 200 OK The request was successful, and you can read the results from the body and headers of the response. For operations that create new resources, you'll typically find the ID of the newly created resource in the response body. For simplicity, we don't distinguish between successful calls that create, update, or delete resources. 400 Bad Request The request failed due to an error on your part, such as a syntax error or malformed content in the request body. 401 Unauthorized The request failed because the required authorization was not satisfied. This could be because you provided an invalid subscription key (see subscription), or an invalid or expired access token (see common authentication issues). 403 Forbidden The request failed because the user in whose context the API is being called either does not have permission to perform the operation itself, or does not have permission to access the data being requested. You may also see this response when the API quota associated with your subscription has been met (see quota). 404 Not Found The requested resource could not be found. You may be trying to access a record that does not exist, or you may have supplied an invalid URL. 415 Unsupported Media Type The request failed because the correct Content-Type header was not provided on the request. For endpoints that accept JSON in the request body, you must use the Content-Type header application/json. 429 Too Many Requests You will see this response if you've exceeded the rate limit associated with your API subscription (see rate limits). 500 Internal Server Error An unexpected error has occurred on our side. You should never receive this response, but if you do please let us know and we'll fix it. 503 Service Unavailable One or more API services are not available. This is usually a temporary condition caused by an unexpected outage or due to planned downtime. We'll be proactive about broadcasting outages or downtime on the Issues page, so check there for more information. Rate limits\nCalls to the SKY API are subject to the rate limit associated with your API subscription (see subscription).\nRate limits help us to keep our backend servers from being overloaded with too many requests in a short period of time by limiting the number of calls you can make within that period. When your rate limit is exceeded, you'll receives a 429 - Too Many Requests response from the API, and the body of the response will indicate how long you must wait before making the next call (you can also inspect the Retry-After header which will contain the number of seconds to wait):\nRetry-After: 1\nDate: Tue, 06 Dec 2016 19:47:44 GMT\nContent-Length: 83\nContent-Type: application/json { \"statusCode\": 429, \"message\": \"Rate limit is exceeded. Try again in 1 second.\"\n} The current rate limit for the SKY API Standard Edition is 5 calls per second. Quotas\nCalls to the SKY API are subject to the quota associated with your API subscription (see subscription).\nQuotas allow us to enforce an appropriate level of API use over a broad period of time by limiting the number of calls you can make within that period. When your quota is reached, you'll receive a 403 - Quota Exceeded response from the API, and the body of the response will indicate how long you must wait before the quota period renews (you can also inspect the Retry-After header which will contain the number of seconds to wait):\nRetry-After: 406\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Length: 83\nContent-Type: application/json { \"statusCode\": 403, \"message\": \"Out of call volume quota. Quota will be replenished in 00:06:46.\"\n} The quota enforced for the SKY API Standard Edition is 25,000 calls per day. If you need to increase your quota, please fill out our request form. Pagination\nMany endpoints in the SKY API return a collection of records. In some cases (such as the Constituents (Get List) endpoint), we also support the concept of pagination, where instead of returning all of the results in a single response, we return them in smaller sets called pages. This approach allows us to keep the performance high on the server, and also minimizes the size of our responses on the wire by breaking them into smaller, more manageable blocks.\nlimit and offset\nWhen an endpoint supports pagination, it will accept limit and offset query string parameters to allow you to control the paging. The limit parameter represents the number of records to return (page size), while the offset parameter represents the number of records to skip.\nHere's an example request for returning the first 50 constituents via the Constituents (Get List) endpoint and the limit query string parameter:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50 To retrieve the next 50 records, include offset=50 to skip the first 50 records:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50&offset=50 To retrieve the next 50 records, include offset=100 to skip the first 100 records:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50&offset=100 Note that offset numbering is zero-based, and that omitting the offset parameter will return the first n elements (where n represents the limit parameter). Refer to the endpoint documentation for specifics about any default/maximum allowed page size values.\nnext_link\nSome paginated endpoints may include a hypermedia link that can be used to fetch the next page of results. This value can be found in the next_link property of the collection response.\nDate formats\nUnless otherwise specified, dates are represented within the SKY API in ISO 8601 format. Some endpoints may further support time components or Coordinated Universal Time (UTC) format. Refer to the specific endpoint documentation for details on what date formats are supported.\nNote that fuzzy dates are handled differently from the ISO-8601 standard. For more information on fuzzy dates, see fuzzy dates.\nFuzzy dates\nFuzzy dates are found on entities with date-like properties where the complete date may be unknown. They are represented in the SKY API as a JSON object with 3 fields for the year, month, and day components: y,m,d.\nFuzzy date fields generally allow the following formats: month, day, and year\nmonth and year\nyear only Some entities may support additional formats, so be sure to reference the specific documentation for an endpoint that accepts or returns a fuzzy date.\nFor example, the constituent entity birthdate field is a fuzzy date that supports \"month and day\" as well as the above formats. In the below sample JSON representation, only the y property of the fuzzy date is shown which indicates that only the year value is known:\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Type: application/json; charset=utf-8 { \"id\": \"280\", \"type\": \"individual\", \"lookup_id\": \"96\", \"inactive\": false, \"name\": \"Dr. Robert C. Hernandez\", \"last\": \"Hernandez\", \"first\": \"Robert\", \"middle\": \"Carlos\", \"nickname\": \"Bob\", \"title\": \"Dr.\", \"gender\": \"male\", \"birthdate\": { \"y\": 1961 }\n} The following example shows a partial collection of notes for a constituent. The date property is a fuzzy date, and in the first note the value represented is June, 2007.\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Type: application/json; charset=utf-8 { \"count\": 25, \"value\": [ { \"id\": \"12\", \"type\": \"Address Changes\", \"date\": { \"y\": 2007, \"m\": 6 }, \"summary\": \"Vacation\", \"text\": \"Dr. Hernandez has purchased a vacation home in Arizona.\" }, { \"id\": \"10\", \"type\": \"Career\", \"date\": { \"y\": 2006, \"m\": 6, \"d\": 11 }, \"summary\": \"Opening of Pediatric Clinic with Partner\", \"text\": \"Dr. Hernandez plans to leave the pharmaceutical company to open a practice with his former colleague.\" }, ... ]\n} Fuzzy dates are not traditional dates and do not conform to the ISO 8601 standard. For additional information about fuzzy dates, see the entity reference.\nSecurity\nWhen calling the SKY API or when manually working with data in the underlying products, remember that specific operations and access to data follow the same rules. Required fields on records, business rules, and your user security (including advanced security) are all considered. For further information, review endpoint descriptions.\nActivating the SKY API Console\nThe SKY API Console is a Blackbaud application built into the Endpoint Reference that can be used to test the SKY API. Before jumping in to build your own applications, we recommend you add the SKY API Console to your or your customer's tenant to aid with testing and development. To access a tenant's data, the SKY API Console, must be approved by a tenant administrator. For Blackbaud customers, a tenant administrator is a user within the organization that is part of the Supervisor security group. This may include Partners or API subscribers that have their own dedicated tenant, or are Supervisor users in their customer's tenant. Administrators provide approval for applications, including the SKY API Console, by activating the application within the Applications area of the product.\nTo activate the SKY API Console, the tenant administrator needs to do the following: Copy the SKY API Console Application ID:A056CA6B-A3A8-4AC7-B325-997666306E52 Visit the Control Panel, Applications area of the product. Select Add application, paste the SKY API Console Application ID, and select Save. Once added, The SKY API Console will appear in the list of activated applications for the tenant. Important! The same process can be followed to activate additional applications for your tenant. Simply substitute the application ID for the one provided in the My Applications area of your Developer Account to add your own application, or use the application ID provided to you by a Partner or third party developer that you know and trust. Breaking changes\nBreaking changes are any changes that could potentially cause failures in applications that consume SKY API. If an API change could cause API calls to fail or return different results than before, then we consider it a breaking change. This includes changes to entities such as new data types or property names, changes to response data types or status codes, and changes to result sets for collection endpoints. We strive to avoid breaking changes if at all possible, so breaking changes are few and far between. However, they are sometimes necessary. We only make breaking changes when we determine that they are critical, and we weigh the disruption that the breaking changes will cause. We strive to be transparent about these changes, and we announce them in a changelog on the SKY API website and in the Community blog at least one week before we deploy to give consumers of the API time to assess the impact of the changes, to raise any questions, and to plan accordingly.\nFor more information about how we define and handle breaking changes, please see the breaking changes post in the Community blog. "
  },
  {
   "layout": "layout-showcase",
   "order": 400,
   "name": "Code Samples",
   "description": "A listing of helpful code samples.",
   "icon": "fa fa-github fa-4x",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": false,
   "showBreadcrumbs": true,
   "title": "Code Samples",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Docs Code",
   "abspath": "docs/code/index.md",
   "uri": "/docs/code/",
   "nav_links": [
    {
     "name": "App Showcase",
     "layout": "layout-container",
     "description": "A collection of fully-formed applications that can assist in quick-starting your own SKY API applications",
     "order": 3,
     "icon": "fa fa-fw fa-cube",
     "showBreadcrumbs": true,
     "title": "App Showcase",
     "appShowcase": [
      {
       "title": "Barkbaud (NodeJS)",
       "icon": "fa-cube",
       "repo": "<%= stache.config.github_repo_barkbaud_nodejs %>",
       "description": "A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow",
       "demo": "<%= stache.config.tutorial_barkbaud_live_demo %>"
      }
     ],
     "sortKey": "order",
     "sortDirection": "asc",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code App-showcase",
     "abspath": "docs/code/app-showcase/index.md",
     "uri": "/docs/code/app-showcase/",
     "text": " App Showcase Barkbaud (NodeJS) A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow View on GitHub View live demo "
    },
    {
     "name": "Authorization Code Flow",
     "description": "Quick-start code samples for Authorization Code Flow",
     "layout": "layout-showcase",
     "showBreadcrumbs": true,
     "icon": "fa fa-fw fa-lock",
     "title": "Authorization Code Flow Code Samples",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Auth-code-flow",
     "abspath": "docs/code/auth-code-flow/index.md",
     "uri": "/docs/code/auth-code-flow/",
     "nav_links": [
      {
       "layout": "layout-container",
       "name": "C# .NET Core",
       "title": "Authorization Code Flow - C# .NET Core",
       "icon": "fa fa-fw fa-windows",
       "description": "Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
       "order": 1,
       "published": true,
       "showInNav": true,
       "showBreadcrumbs": true,
       "tutorial": true,
       "back_to_top": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Auth-code-flow C-sharp",
       "abspath": "docs/code/auth-code-flow/c-sharp/index.md",
       "uri": "/docs/code/auth-code-flow/c-sharp/",
       "text": " Comments Edit in GitHub Authorization Code Flow - C# .NET Core GitHub Live Demo\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use ASP.NET Core for the server-side platform and C#.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites Since we are using the Authorization Code Flow, we need to use a server-side software platform, such as .NET Core. You will need to Download and install .NET Core\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the bb-api-subscription-key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo register your application: Go to My Applications to manage your applications. Click Register app. Enter the following information: Field Description Application name (Required) Enter a name for your application. This is the name that users will see when asked to grant access to your application during the authorization process. It will also be seen by administrators within the Applications area of the product when they view the list of applications that have been granted access to their data. Application details (Required) Provide a description for your application. This will be seen by administrators when activating your application within the product. Organization name (Required) Specify the company name that users and administrators will see associated with your application. Application logo (Optional) Provide a 512 by 512 pixel PNG or JPEG image that users and administrators will see associated with your application. Application website URL (Required) Enter a URL where users can find out more information about your application. Redirect URIs (Required) Specify one or more URIs that should be used when redirecting the user's browser back to your application after providing consent during the authorization process. The URIs must be absolute and use https (note that we do support http://localhost:port or http://127.0.0.1:port for local development). To register multiple URIs, click Add another redirect URI. For this tutorial, use http://localhost:5000/auth/callback. Important! When your application requests authorization to access a Blackbaud customer's data, it will include a redirect_uri parameter as part of the query string. This value must match exactly against one of the values you listed when registering your application, including any trailing slashes. If the value supplied does not match any of the registered redirect URIs, then authorization will fail. For more information on commonly encountered authorization problems, see common authorization issues. Click Save to complete the registration of your application. After you register an application, take note of the credentials (ID and Secret) that are displayed in the Application Credentials column. These credentials are unique to your application, and are used to verify your application's identity during the authorization process. Application ID is the unique identifier for your application. This value is not sensitive and can be shared publicly. It cannot be modified after the application is registered, so if you need change it for any reason you must delete the application and re-add it.\nApplication secret is the key your application will provide when requesting an access token to call the SKY API as part of the authorization process. This value is sensitive and should NOT be shared with anyone else! To display the secret, click Show in the Application Credentials column. Very Important! The application secret should be kept private and safe! Regenerate your secret if it is compromised. Blackbaud reserves the right to remove or deactivate your application in order to protect our customer's data. Step 3 — Grab the Source Code\nThe sky-api-auth-tutorial-c-sharp repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial-c-sharp repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial-c-sharp.git Step 4 — Prepare Your Environment\nLet's explore some application settings files and prep your environment variables. Open the sky-api-auth-tutorial-c-sharp working directory.\nOpen the appsettings.json which details generic properties to be used by the application. Take note of the following SKY API URI property values: AuthBaseUri URI to the Authorization Service. SkyApiBaseUri URI to the SKY API Endpoints. For local development, duplicate the file appsettings.json-sample, renaming it to appsettings.Development.json. The appsettings.Development.json file contains your registered application's environment variables. Note that private properties, such as your Application ID and Application secret, are stored in this file. For security, the appsettings.Development.json is excluded from being syncronized with GitHub via the file .gitignore. At run time, the application will merge these properties into the available environment variables. In .NET Core, the Startup class, Startup.cs provides the entry point for an application, and is required for all applications. This class configures the application and sets up the required middleware. { \"AppSettings\": { \"AuthClientId\": \"\", \"AuthClientSecret\": \"\", \"AuthRedirectUri\": \"http://localhost:5000/auth/callback\", \"AuthSubscriptionKey\": \"\" }\n} Using the values from your registered application and the subscription key from your Blackbaud Developer Profile, update appsettings.Development.json with the following values. All values are required.: AuthClientId Your registered application's Application ID. AuthClientSecret Your registered application's Application secret. AuthRedirectUri One of your registered application's Redirect URIs. For this tutorial, we will use http://localhost:5000/auth/callback. AuthSubscriptionKey Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the file. Step 5 — Run the Application Using Command Prompt/Terminal/bash prompt, ensure you are in the working directory.\nOpen and review the project.json file. This file details the application’s dependencies. These NuGet modules (project dependencies) are installed when issuing the dotnet restore command within Command Prompt/Terminal/bash prompt.\nOn a Mac, issue the following commands to restore the packages specified in the project.json file and run the actual sample:\n$ dotnet restore\n$ export ASPNETCORE_ENVIRONMENT=Development && dotnet run On a PC, type:\n$ dotnet restore\n$ set ASPNETCORE_ENVIRONMENT=Development && dotnet run Visit http://localhost:5000/ to view your locally running application. Application Starting Point IIS is used as the webserver. An ASP.NET Core Module configured in project.json is used to list dependencies and configure IIS to launch and host your application.\nOpen the Program.cs file. The Main() method is the starting point of our application. It is responsible for initializing the application. We use WebHostBuilder to listen on a particular IP address and port: http://localhost:5000/. As of RC2 an ASP.NET Core application is a .NET Core Console application that calls into ASP.NET specific libraries. This code runs on the server-side and is not visible to the application user. Running the code server-side helps to protect your Application secret.\nusing System.IO;\nusing Microsoft.AspNetCore.Hosting; namespace Blackbaud.AuthCodeFlowTutorial\n{ public class Program { public static void Main(string[] args) { var host = new WebHostBuilder() .UseKestrel() .UseContentRoot(Directory.GetCurrentDirectory()) .UseIISIntegration() .UseStartup() .Build(); host.Run(); } }\n}\nOpen your browser to http://localhost:5000/ to request the Home page. When the front page loads, the AngularJS on the Home page (/Views/Shared/_Layout.cshtml) makes a request to the /auth/authenticated endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ...\nThe call to the endpoint routes to the corresponding controller (/Controllers/AuthenticationController.cs) and returns a Boolean representing the current user's authentication status. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false.\n[HttpGet(\"authenticated\")]\npublic ActionResult Authenticated()\n{ return Json(new { authenticated = _authService.IsAuthenticated() });\n}\n... Displaying the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, click Show advanced and then click Proceed to localhost (unsafe). Open the Views/Shared/_Layout.cshtml file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button:\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /Controllers/AuthenticationController.cs.\nWhen the user clicks the Log in button, a call is made to LogIn() which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n[HttpGet(\"login\")]\npublic ActionResult LogIn()\n{ Uri address = _authService.GetAuthorizationUri(); return Redirect(address.ToString());\n}\n...\nOnce authorized, SKY API redirects the user back to the /auth/callback URI with an authorization code. Once an authorization code has been obtained, it is exchanged the code for an access token. The app is then redirected back to the Home page. [HttpGet(\"callback\")]\npublic ActionResult Callback()\n{ string code = Request.Query[\"code\"]; _authService.ExchangeCodeForAccessToken(code); return Redirect(\"/\");\n}\n... Retrieve Constituent Data Open the Home page (Views/Shared/_Layout.cshtml).\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents/280 to retrieve a constituent record:\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); ... The data is returned as JSON to the Home page where the model's data is projected through the view of the HTML template:\n<div ng-if=\"isAuthenticated\"> <h3>Constituent: </h3> <p> See <a href=\"/api/entity-reference/constituent\">Constituent</a> within the SKY API entity reference for a full listing of properties. </p> <p ng-if=\"::constituent.error\" ng-bind=\"::constituent.error\" class=\"alert alert-danger\"></p> <div ng-if=\"::constituent.id\" class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div>\n... Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /Controllers/AuthenticationController.cs\nIf the user clicks Log Out, they are redirected to /auth/logout which destroys the access/refresh token stored in the browser’s session.\nIf the user clicks Refresh Access Token, AngularJS makes a request to /auth/refresh-token, which asks SKY API to return a refreshed access token, which is then stored in the browser’s session. That's it! Be sure to take a look at our other code samples.\nCheck out the README where you can view a live demo of the application hosted on Microsoft Azure.\nThe README also contains instructions for deploying to Azure App Services rather than your local development environment.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
      },
      {
       "layout": "layout-container",
       "name": "Chrome Extension",
       "title": "Authorization Code Flow - Chrome Extension",
       "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.",
       "order": 3,
       "icon": "fa fa-fw fa-chrome",
       "showInNav": true,
       "showBreadcrumbs": true,
       "back_to_top": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Auth-code-flow Chrome-extension",
       "abspath": "docs/code/auth-code-flow/chrome-extension/index.md",
       "uri": "/docs/code/auth-code-flow/chrome-extension/",
       "text": " Edit in GitHub Authorization Code Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.\nView the source on GitHub "
      },
      {
       "layout": "layout-container",
       "name": "NodeJS",
       "title": "Authorization Code Flow - NodeJS",
       "description": "Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
       "order": 2,
       "icon": "fa fa-fw fa-desktop",
       "published": true,
       "showInNav": true,
       "tutorial": true,
       "showBreadcrumbs": true,
       "back_to_top": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Auth-code-flow Nodejs",
       "abspath": "docs/code/auth-code-flow/nodejs/index.md",
       "uri": "/docs/code/auth-code-flow/nodejs/",
       "text": " Comments Edit in GitHub Authorization Code Flow - NodeJS GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use Node.js, a server-side platform.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running Node.js.\nFamiliarity with Node.js, using NPM to install project dependencies, and environment variables including setting them in either an OSX/Linux or Windows environment.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection to clone the repo and install the project's dependencies. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the bb-api-subscription-key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. Keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo register your application: Go to My Applications to manage your applications. Click Register app. Enter the following information: Field Description Application name (Required) Enter a name for your application. This is the name that users will see when asked to grant access to your application during the authorization process. It will also be seen by administrators within the Applications area of the product when they view the list of applications that have been granted access to their data. Application details (Required) Provide a description for your application. This will be seen by administrators when activating your application within the product. Organization name (Required) Specify the company name that users and administrators will see associated with your application. Application logo (Optional) Provide a 512 by 512 pixel PNG or JPEG image that users and administrators will see associated with your application. Application website URL (Required) Enter a URL where users can find out more information about your application. Redirect URIs (Required) Specify one or more URIs that should be used when redirecting the user's browser back to your application after providing consent during the authorization process. The URIs must be absolute and use https (note that we do support http://localhost:port or http://127.0.0.1:port for local development). To register multiple URIs, click Add another redirect URI. For this tutorial, use http://localhost:5000/auth/callback. Important! When your application requests authorization to access a Blackbaud customer's data, it will include a redirect_uri parameter as part of the query string. This value must match exactly against one of the values you listed when registering your application, including any trailing slashes. If the value supplied does not match any of the registered redirect URIs, then authorization will fail. For more information on commonly encountered authorization problems, see common authorization issues. Click Save to complete the registration of your application. After you register an application, take note of the credentials (ID and Secret) that are displayed in the Application Credentials column. These credentials are unique to your application, and are used to verify your application's identity during the authorization process. Application ID is the unique identifier for your application. This value is not sensitive and can be shared publicly. It cannot be modified after the application is registered, so if you need change it for any reason you must delete the application and re-add it.\nApplication secret is the key your application will provide when requesting an access token to call the SKY API as part of the authorization process. This value is sensitive and should NOT be shared with anyone else! To display the secret, click Show in the Application Credentials column. Very Important! The application secret should be kept private and safe! Regenerate your secret if it is compromised. Blackbaud reserves the right to remove or deactivate your application in order to protect our customer's data. Step 3 — Install Node.js\nAfter you have your subscription key, Application ID, and Application secret, it's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use Node.js. Download and install Node.js. Use the default settings for your development environment.\nCreate a file named testserver.js and add the following code: // Create a very simple HTTP web server on your local machine. // Set up a HTTP Web server and client, require('http'). var http = require('http'); // createServer returns a new instance of the http server. // A function is used as a request listener. // req is an instance of the incoming request. // res is an instance of the server response. // When you browse to http://localhost:1337/, a 'request' event occurs and // \"Hello World\" is written from the HTTP Web server back to your browser. http.createServer(function (req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello World'); }).listen(1337, \"localhost\"); console.log('Server running at http://localhost:1337/'); Save the file in a folder named testnodejs. From a command prompt, change the directory to testnodejs and run the testserver.js file: $ cd testnodejs\n$ node testserver.js The Web server listens for requests on your localhost, port 1337. In a Web browser, navigate to localhost:1337. The Web server displays a page with with \"Hello World.\" To stop the Web server, type CTRL-C in the command line. Step 4 — Grab the Source Code\nThe sky-api-auth-tutorial repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial. The following command creates a working directory named sky-api-auth-tutorial that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial.git Step 5 — Prepare Your Environment Open the sky-api-auth-tutorial working directory and copy the configuration file sky.env-sample as sky.env. The sky.env file contains the application's environment variables for NodeJS environments. Update sky.env with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:5000/auth/callback. (See My Applications.) AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. PORT The Web server port that will run the application. For this tutorial, enter 5000. Save the environment file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that any .env files are ignored. This prevents the environment files from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 6 — Install Dependencies From the working directory, run npm install to install the project dependencies.\nNPM is the package manager that comes bundled with Node.js (since you already installed Node.js, you also have NPM). The command npm install downloads any dependencies listed in the package.json file and adds them to the app's node_modules directory (this command also creates this directory if it doesn't already exist). Each dependency is represented as a child directory of node_modules. $ cd sky-api-auth-tutorial\n$ npm install After you run npm install, verify that the sky-api-auth-tutorial working directory contains the node_modules subfolder. npm install depends on a reliable Internet connection to install dependencies. If you have issues running the command, you can hard delete the node_modules folder and run npm install again. Step 7 — Run the Application Using Command Prompt/Terminal, ensure you are in the working directory.\nType npm start to start the application server at http://localhost:5000. $ npm start Application starting point Open the index.js file. This is the starting point of our application. This code runs on the server side and is not visible to the application user. The code performs the following:\nIt registers our application dependencies such as Express.\nIt handles authorization and user requests to the home page and data endpoints.\nIt creates a web server on your local machine at https://localhost:5000. To request the home page open your browser to http://localhost:5000/. It displays the authorization options. Your browser may display a warning that the connection is not private. For this tutorial, ignore this message. To proceed, click Show advanced, and then click Proceed to localhost (unsafe). Open the ui folder and the index.html file. This opens the home page for our application, where we can initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Node.js server routes.\nBelow the body tag, the ng-view tag is used as a hook for our Angular Router to load our desired template view.\n<!-- INITIALIZE THE APP -->\n<body ng-app=\"AuthCodeFlowTutorial\"> <!-- LOAD OUR VIEWS --> <ng-view></ng-view> ... Set up the router Open the app folder and the main.js file. Our application's logic lives here.\nFirst, we declare our angular module and inject the ngRoute dependency.\nangular.module('AuthCodeFlowTutorial', ['ngRoute'])\nNext, we initialize our Angular Router to manage our views and controllers. angular.module('AuthCodeFlowTutorial', ['ngRoute']) .config(function ($routeProvider) { $routeProvider .when('/home', { templateUrl: './app/main-template.html', controller: 'MainController' }) .when('/auth-success', { template: 'Login Successful', controller: 'AuthController' }) .otherwise({ redirectTo: '/home' }) In this example, we use two views and two controllers. As your app grows, you can add more views and controllers. Display the authorize buttons Open the app folder and the main-template.html file. This is our application's core view.\nThe main.js file holds the logic to initiate our AngularJS Controllers and our Angular Router.\nJust after the page title, the authorize buttons reference the server's authorization endpoint. When a user clicks one of these buttons, the authorization process begins. When a session is authenticated, the authorize buttons are hidden. The Authorize using redirect button initiates the authorization process by redirecting the browser to the authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 well login-options\"> <span class=\"login-options-label\">Login using redirect</span> <a href=\"/auth/login\" class=\"btn btn-primary btn-block btn-lg\">Log in</a>\n</div> The Authorize using popup button opens a popup window that is directed to the server's authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 col-sm-offset-2 well login-options\"> <span class=\"login-options-label\">Login using popup</span> <button ng-click=\"popupLogin()\" class=\"btn btn-primary btn-block btn-lg\" target=\"login-iframe\">Log in</button>\n</div> Using the popup option, our Angular code performs the following actions: It calls the popupLogin() method. This method opens a window at the specified URL, and we pass in a ?redirect= parameter and set it to the hash /%23/auth-success, which translates to:/#/auth-success.\n.controller('MainController', function ($scope, $http, $window) {\n...\n$scope.popupLogin = function () { var popup popup = window.open('auth/login?redirect=/%23/auth-success', 'login', 'height=450,width=600,'); if (window.focus) { popup.focus(); }\n} When the browser redirects to the /#/auth-success, the AuthController closes the current window and redirects the browser to the route '/' so our router will redirect the page to #/home.\n.controller('AuthController', function ($window) { ... $window.opener.location = '/'; $window.close();\n}) The JavaScript in main.js in the MainController uses Ajax calls to the /auth/authenticated endpoint to determine whether the users are logged in. If the users access token has expired or is invalid, the page displays the Authorize buttons. Users must log in to obtain a valid access token. angular.module('AuthCodeFlowTutorial', ['ngRoute']) ... .controller('MainController', function ($scope, $http) { ... /** * Check user access token. */ $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; /** * Access token is valid. Fetch constituent record. */ if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } }); }); Obtain an Access Token Click one of the Authorize buttons and enter your Blackbaud account credentials. After authentication, your browser redirects to the Blackbaud Authorization Service authorization form. Open index.js and /server/routes/auth.js. The Authroize button prompt a request to the web server's /auth/login endpoint. The route in the app's main index.js file directs requests to the getLogin() function within /server/routes/auth.js. // Register our OAUTH2 routes\napp.get('/auth/authenticated', routes.auth.getAuthenticated);\napp.get('/auth/login', routes.auth.getLogin);\napp.get('/auth/callback', routes.auth.getCallback);\napp.get('/auth/logout', routes.auth.getLogout); The auth.js file relies on the simple-oauth2 client library. To creating an object you must provide your registered application's Application ID and Application secret values, which reside in the project's sky.env file as the AUTH_CLIENT_ID and AUTH_CLIENT_SECRET environment variables. You need the URL to the Blackbaud Authorization Service along with the token endpoint. oauth2 = require('simple-oauth2')({ clientID: process.env.AUTH_CLIENT_ID, clientSecret: process.env.AUTH_CLIENT_SECRET, site: 'https://oauth2.apim.blackbaud.com/', tokenPath: '/token'\n}); To obtain an authorization code, the getLogin() function uses simple-oauth2's authorizeURL() function to display the Blackbaud Authorization Service's authorization form. After users approve or deny the request, the responses are redirected using the value of the AUTH_REDIRECT_URI environment variable: https://localhost:5000/auth/callback. function getLogin(request, response) { request.session.redirect = request.query.redirect; request.session.state = crypto.randomBytes(48).toString('hex'); response.redirect(oauth2.authCode.authorizeURL({ redirect_uri: process.env.AUTH_REDIRECT_URI, state: request.session.state }));\n} The access token exchange should occur server side. Do not expose the Application secret to users in client-side code. Do not expose your Application secret in a source code repository such as GitHub. The path /auth/callback is routed to the getCallback() function that exchanges authorization codes for access tokens. function getCallback(request, response) { ... options = { code: request.query.code, redirect_uri: process.env.AUTH_REDIRECT_URI }; oauth2.authCode.getToken(options, function (errorToken, ticket) { if (errorToken) { error = errorToken.message; } else { redirect = request.session.redirect || '/'; request.session.redirect = ''; request.session.state = ''; saveTicket(request, ticket); response.redirect(redirect); } }); ...\n} The access token value is not passed back to the client. Instead, the saveTicket() function saves it to the session state. function saveTicket(request, ticket) { request.session.ticket = ticket; request.session.expires = (new Date().getTime() + (1000 * ticket.expires_in));\n} Retrieve constituent data\nThe response redirects users to the home page and AppController. The AppController verifies that users are logged in through calls to the web server's /auth/authenticated endpoint. After verification, calls are made to the web server's api/constituents/280.\nangular.module('AuthCodeFlowTutorial', [])\n.controller('AppController', function ($scope, $http, $window) { // Checks the user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); Open /server/libs/sky.js and /server/routes/api.js. The route in the app's main index.js file directs the request to the getConstituent() function in /server/libs/sky.js. The call is passed along to /server/routes/api.js, which interacts directly with SKY API endpoints. Eventually the call makes its way to the proxy() function. Here, we can see the use of the bb-api-subscription-key and Authorization request headers: function proxy(request, method, endpoint, body, callback) { var options = { json: true, method: method, body: body, url: 'https://api.sky.blackbaud.com/constituent/v1/'' + endpoint, headers: { 'bb-api-subscription-key': process.env.AUTH_SUBSCRIPTION_KEY, 'Authorization': 'Bearer ' + request.session.ticket.access_token } }; promise(options) .then(callback) .catch(function (err) { console.log('Proxy Error: ', err); });\n} The bb-api-subscription-key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The code is marries the constituent data to an AngularJS template in our ui/app/main-template.html view and renders it in a Bootstrap table. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Summary\nYou should now have a fully functioning application using implicit-flow. Users of your app should be able to log in with their Blackbaud credentials, authorize the app, and get constituent data after they are authenticated. Be sure to take a look at our other code samples. You can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
      }
     ],
     "text": " Authorization Code Flow C# .NET Core Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. NodeJS Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow. "
    },
    {
     "name": "Implicit Flow",
     "layout": "layout-showcase",
     "description": "Get up-and-running with our Implicit Flow code samples",
     "showBreadcrumbs": true,
     "icon": "fa fa-fw fa-user",
     "title": "Implicit Flow Code Samples",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Implicit-flow",
     "abspath": "docs/code/implicit-flow/index.md",
     "uri": "/docs/code/implicit-flow/",
     "nav_links": [
      {
       "layout": "layout-container",
       "name": "AngularJS",
       "title": "Implicit Flow - AngularJS",
       "description": "Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
       "order": 2,
       "icon": "fa fa-fw fa-desktop",
       "showInNav": true,
       "tutorial": true,
       "showBreadcrumbs": true,
       "back_to_top": true,
       "useComments": false,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Implicit-flow Angular",
       "abspath": "docs/code/implicit-flow/angular/index.md",
       "uri": "/docs/code/implicit-flow/angular/",
       "text": " Edit in GitHub Implicit Flow - AngularJS GitHub\nLearn how to create an AngularJS app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
      },
      {
       "layout": "layout-container",
       "name": "Angular 2",
       "title": "Implicit Flow - Angular 2",
       "description": "Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
       "order": 2,
       "icon": "fa fa-fw fa-desktop",
       "showInNav": true,
       "tutorial": true,
       "showBreadcrumbs": true,
       "back_to_top": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Implicit-flow Angular2",
       "abspath": "docs/code/implicit-flow/angular2/index.md",
       "uri": "/docs/code/implicit-flow/angular2/",
       "text": " Edit in GitHub Implicit Flow - Angular 2 GitHub\nLearn how to create an Angular 2 app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
      },
      {
       "name": "Chrome Extension",
       "layout": "layout-container",
       "title": "Implicit Flow - Chrome Extension",
       "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.",
       "icon": "fa fa-fw fa-chrome",
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInNav": true,
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Implicit-flow Chrome-extension",
       "abspath": "docs/code/implicit-flow/chrome-extension/index.md",
       "uri": "/docs/code/implicit-flow/chrome-extension/",
       "text": " Edit in GitHub Implicit Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
      }
     ],
     "text": " Implicit Flow Angular 2 Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. AngularJS Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow. "
    }
   ],
   "text": " Code Samples App Showcase A collection of fully-formed applications that can assist in quick-starting your own SKY API applications Authorization Code Flow Quick-start code samples for Authorization Code Flow Implicit Flow Get up-and-running with our Implicit Flow code samples "
  },
  {
   "name": "App Showcase",
   "layout": "layout-container",
   "description": "A collection of fully-formed applications that can assist in quick-starting your own SKY API applications",
   "order": 3,
   "icon": "fa fa-fw fa-cube",
   "showBreadcrumbs": true,
   "title": "App Showcase",
   "appShowcase": [
    {
     "title": "Barkbaud (NodeJS)",
     "icon": "fa-cube",
     "repo": "<%= stache.config.github_repo_barkbaud_nodejs %>",
     "description": "A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow",
     "demo": "<%= stache.config.tutorial_barkbaud_live_demo %>"
    }
   ],
   "sortKey": "order",
   "sortDirection": "asc",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code App-showcase",
   "abspath": "docs/code/app-showcase/index.md",
   "uri": "/docs/code/app-showcase/",
   "text": " App Showcase Barkbaud (NodeJS) A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow View on GitHub View live demo "
  },
  {
   "name": "Authorization Code Flow",
   "description": "Quick-start code samples for Authorization Code Flow",
   "layout": "layout-showcase",
   "showBreadcrumbs": true,
   "icon": "fa fa-fw fa-lock",
   "title": "Authorization Code Flow Code Samples",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Auth-code-flow",
   "abspath": "docs/code/auth-code-flow/index.md",
   "uri": "/docs/code/auth-code-flow/",
   "nav_links": [
    {
     "layout": "layout-container",
     "name": "C# .NET Core",
     "title": "Authorization Code Flow - C# .NET Core",
     "icon": "fa fa-fw fa-windows",
     "description": "Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
     "order": 1,
     "published": true,
     "showInNav": true,
     "showBreadcrumbs": true,
     "tutorial": true,
     "back_to_top": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Auth-code-flow C-sharp",
     "abspath": "docs/code/auth-code-flow/c-sharp/index.md",
     "uri": "/docs/code/auth-code-flow/c-sharp/",
     "text": " Comments Edit in GitHub Authorization Code Flow - C# .NET Core GitHub Live Demo\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use ASP.NET Core for the server-side platform and C#.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites Since we are using the Authorization Code Flow, we need to use a server-side software platform, such as .NET Core. You will need to Download and install .NET Core\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the bb-api-subscription-key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo register your application: Go to My Applications to manage your applications. Click Register app. Enter the following information: Field Description Application name (Required) Enter a name for your application. This is the name that users will see when asked to grant access to your application during the authorization process. It will also be seen by administrators within the Applications area of the product when they view the list of applications that have been granted access to their data. Application details (Required) Provide a description for your application. This will be seen by administrators when activating your application within the product. Organization name (Required) Specify the company name that users and administrators will see associated with your application. Application logo (Optional) Provide a 512 by 512 pixel PNG or JPEG image that users and administrators will see associated with your application. Application website URL (Required) Enter a URL where users can find out more information about your application. Redirect URIs (Required) Specify one or more URIs that should be used when redirecting the user's browser back to your application after providing consent during the authorization process. The URIs must be absolute and use https (note that we do support http://localhost:port or http://127.0.0.1:port for local development). To register multiple URIs, click Add another redirect URI. For this tutorial, use http://localhost:5000/auth/callback. Important! When your application requests authorization to access a Blackbaud customer's data, it will include a redirect_uri parameter as part of the query string. This value must match exactly against one of the values you listed when registering your application, including any trailing slashes. If the value supplied does not match any of the registered redirect URIs, then authorization will fail. For more information on commonly encountered authorization problems, see common authorization issues. Click Save to complete the registration of your application. After you register an application, take note of the credentials (ID and Secret) that are displayed in the Application Credentials column. These credentials are unique to your application, and are used to verify your application's identity during the authorization process. Application ID is the unique identifier for your application. This value is not sensitive and can be shared publicly. It cannot be modified after the application is registered, so if you need change it for any reason you must delete the application and re-add it.\nApplication secret is the key your application will provide when requesting an access token to call the SKY API as part of the authorization process. This value is sensitive and should NOT be shared with anyone else! To display the secret, click Show in the Application Credentials column. Very Important! The application secret should be kept private and safe! Regenerate your secret if it is compromised. Blackbaud reserves the right to remove or deactivate your application in order to protect our customer's data. Step 3 — Grab the Source Code\nThe sky-api-auth-tutorial-c-sharp repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial-c-sharp repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial-c-sharp.git Step 4 — Prepare Your Environment\nLet's explore some application settings files and prep your environment variables. Open the sky-api-auth-tutorial-c-sharp working directory.\nOpen the appsettings.json which details generic properties to be used by the application. Take note of the following SKY API URI property values: AuthBaseUri URI to the Authorization Service. SkyApiBaseUri URI to the SKY API Endpoints. For local development, duplicate the file appsettings.json-sample, renaming it to appsettings.Development.json. The appsettings.Development.json file contains your registered application's environment variables. Note that private properties, such as your Application ID and Application secret, are stored in this file. For security, the appsettings.Development.json is excluded from being syncronized with GitHub via the file .gitignore. At run time, the application will merge these properties into the available environment variables. In .NET Core, the Startup class, Startup.cs provides the entry point for an application, and is required for all applications. This class configures the application and sets up the required middleware. { \"AppSettings\": { \"AuthClientId\": \"\", \"AuthClientSecret\": \"\", \"AuthRedirectUri\": \"http://localhost:5000/auth/callback\", \"AuthSubscriptionKey\": \"\" }\n} Using the values from your registered application and the subscription key from your Blackbaud Developer Profile, update appsettings.Development.json with the following values. All values are required.: AuthClientId Your registered application's Application ID. AuthClientSecret Your registered application's Application secret. AuthRedirectUri One of your registered application's Redirect URIs. For this tutorial, we will use http://localhost:5000/auth/callback. AuthSubscriptionKey Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the file. Step 5 — Run the Application Using Command Prompt/Terminal/bash prompt, ensure you are in the working directory.\nOpen and review the project.json file. This file details the application’s dependencies. These NuGet modules (project dependencies) are installed when issuing the dotnet restore command within Command Prompt/Terminal/bash prompt.\nOn a Mac, issue the following commands to restore the packages specified in the project.json file and run the actual sample:\n$ dotnet restore\n$ export ASPNETCORE_ENVIRONMENT=Development && dotnet run On a PC, type:\n$ dotnet restore\n$ set ASPNETCORE_ENVIRONMENT=Development && dotnet run Visit http://localhost:5000/ to view your locally running application. Application Starting Point IIS is used as the webserver. An ASP.NET Core Module configured in project.json is used to list dependencies and configure IIS to launch and host your application.\nOpen the Program.cs file. The Main() method is the starting point of our application. It is responsible for initializing the application. We use WebHostBuilder to listen on a particular IP address and port: http://localhost:5000/. As of RC2 an ASP.NET Core application is a .NET Core Console application that calls into ASP.NET specific libraries. This code runs on the server-side and is not visible to the application user. Running the code server-side helps to protect your Application secret.\nusing System.IO;\nusing Microsoft.AspNetCore.Hosting; namespace Blackbaud.AuthCodeFlowTutorial\n{ public class Program { public static void Main(string[] args) { var host = new WebHostBuilder() .UseKestrel() .UseContentRoot(Directory.GetCurrentDirectory()) .UseIISIntegration() .UseStartup() .Build(); host.Run(); } }\n}\nOpen your browser to http://localhost:5000/ to request the Home page. When the front page loads, the AngularJS on the Home page (/Views/Shared/_Layout.cshtml) makes a request to the /auth/authenticated endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ...\nThe call to the endpoint routes to the corresponding controller (/Controllers/AuthenticationController.cs) and returns a Boolean representing the current user's authentication status. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false.\n[HttpGet(\"authenticated\")]\npublic ActionResult Authenticated()\n{ return Json(new { authenticated = _authService.IsAuthenticated() });\n}\n... Displaying the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, click Show advanced and then click Proceed to localhost (unsafe). Open the Views/Shared/_Layout.cshtml file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button:\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /Controllers/AuthenticationController.cs.\nWhen the user clicks the Log in button, a call is made to LogIn() which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n[HttpGet(\"login\")]\npublic ActionResult LogIn()\n{ Uri address = _authService.GetAuthorizationUri(); return Redirect(address.ToString());\n}\n...\nOnce authorized, SKY API redirects the user back to the /auth/callback URI with an authorization code. Once an authorization code has been obtained, it is exchanged the code for an access token. The app is then redirected back to the Home page. [HttpGet(\"callback\")]\npublic ActionResult Callback()\n{ string code = Request.Query[\"code\"]; _authService.ExchangeCodeForAccessToken(code); return Redirect(\"/\");\n}\n... Retrieve Constituent Data Open the Home page (Views/Shared/_Layout.cshtml).\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents/280 to retrieve a constituent record:\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); ... The data is returned as JSON to the Home page where the model's data is projected through the view of the HTML template:\n<div ng-if=\"isAuthenticated\"> <h3>Constituent: </h3> <p> See <a href=\"/api/entity-reference/constituent\">Constituent</a> within the SKY API entity reference for a full listing of properties. </p> <p ng-if=\"::constituent.error\" ng-bind=\"::constituent.error\" class=\"alert alert-danger\"></p> <div ng-if=\"::constituent.id\" class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div>\n... Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /Controllers/AuthenticationController.cs\nIf the user clicks Log Out, they are redirected to /auth/logout which destroys the access/refresh token stored in the browser’s session.\nIf the user clicks Refresh Access Token, AngularJS makes a request to /auth/refresh-token, which asks SKY API to return a refreshed access token, which is then stored in the browser’s session. That's it! Be sure to take a look at our other code samples.\nCheck out the README where you can view a live demo of the application hosted on Microsoft Azure.\nThe README also contains instructions for deploying to Azure App Services rather than your local development environment.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
    },
    {
     "layout": "layout-container",
     "name": "Chrome Extension",
     "title": "Authorization Code Flow - Chrome Extension",
     "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.",
     "order": 3,
     "icon": "fa fa-fw fa-chrome",
     "showInNav": true,
     "showBreadcrumbs": true,
     "back_to_top": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Auth-code-flow Chrome-extension",
     "abspath": "docs/code/auth-code-flow/chrome-extension/index.md",
     "uri": "/docs/code/auth-code-flow/chrome-extension/",
     "text": " Edit in GitHub Authorization Code Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.\nView the source on GitHub "
    },
    {
     "layout": "layout-container",
     "name": "NodeJS",
     "title": "Authorization Code Flow - NodeJS",
     "description": "Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
     "order": 2,
     "icon": "fa fa-fw fa-desktop",
     "published": true,
     "showInNav": true,
     "tutorial": true,
     "showBreadcrumbs": true,
     "back_to_top": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Auth-code-flow Nodejs",
     "abspath": "docs/code/auth-code-flow/nodejs/index.md",
     "uri": "/docs/code/auth-code-flow/nodejs/",
     "text": " Comments Edit in GitHub Authorization Code Flow - NodeJS GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use Node.js, a server-side platform.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running Node.js.\nFamiliarity with Node.js, using NPM to install project dependencies, and environment variables including setting them in either an OSX/Linux or Windows environment.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection to clone the repo and install the project's dependencies. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the bb-api-subscription-key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. Keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo register your application: Go to My Applications to manage your applications. Click Register app. Enter the following information: Field Description Application name (Required) Enter a name for your application. This is the name that users will see when asked to grant access to your application during the authorization process. It will also be seen by administrators within the Applications area of the product when they view the list of applications that have been granted access to their data. Application details (Required) Provide a description for your application. This will be seen by administrators when activating your application within the product. Organization name (Required) Specify the company name that users and administrators will see associated with your application. Application logo (Optional) Provide a 512 by 512 pixel PNG or JPEG image that users and administrators will see associated with your application. Application website URL (Required) Enter a URL where users can find out more information about your application. Redirect URIs (Required) Specify one or more URIs that should be used when redirecting the user's browser back to your application after providing consent during the authorization process. The URIs must be absolute and use https (note that we do support http://localhost:port or http://127.0.0.1:port for local development). To register multiple URIs, click Add another redirect URI. For this tutorial, use http://localhost:5000/auth/callback. Important! When your application requests authorization to access a Blackbaud customer's data, it will include a redirect_uri parameter as part of the query string. This value must match exactly against one of the values you listed when registering your application, including any trailing slashes. If the value supplied does not match any of the registered redirect URIs, then authorization will fail. For more information on commonly encountered authorization problems, see common authorization issues. Click Save to complete the registration of your application. After you register an application, take note of the credentials (ID and Secret) that are displayed in the Application Credentials column. These credentials are unique to your application, and are used to verify your application's identity during the authorization process. Application ID is the unique identifier for your application. This value is not sensitive and can be shared publicly. It cannot be modified after the application is registered, so if you need change it for any reason you must delete the application and re-add it.\nApplication secret is the key your application will provide when requesting an access token to call the SKY API as part of the authorization process. This value is sensitive and should NOT be shared with anyone else! To display the secret, click Show in the Application Credentials column. Very Important! The application secret should be kept private and safe! Regenerate your secret if it is compromised. Blackbaud reserves the right to remove or deactivate your application in order to protect our customer's data. Step 3 — Install Node.js\nAfter you have your subscription key, Application ID, and Application secret, it's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use Node.js. Download and install Node.js. Use the default settings for your development environment.\nCreate a file named testserver.js and add the following code: // Create a very simple HTTP web server on your local machine. // Set up a HTTP Web server and client, require('http'). var http = require('http'); // createServer returns a new instance of the http server. // A function is used as a request listener. // req is an instance of the incoming request. // res is an instance of the server response. // When you browse to http://localhost:1337/, a 'request' event occurs and // \"Hello World\" is written from the HTTP Web server back to your browser. http.createServer(function (req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello World'); }).listen(1337, \"localhost\"); console.log('Server running at http://localhost:1337/'); Save the file in a folder named testnodejs. From a command prompt, change the directory to testnodejs and run the testserver.js file: $ cd testnodejs\n$ node testserver.js The Web server listens for requests on your localhost, port 1337. In a Web browser, navigate to localhost:1337. The Web server displays a page with with \"Hello World.\" To stop the Web server, type CTRL-C in the command line. Step 4 — Grab the Source Code\nThe sky-api-auth-tutorial repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial. The following command creates a working directory named sky-api-auth-tutorial that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial.git Step 5 — Prepare Your Environment Open the sky-api-auth-tutorial working directory and copy the configuration file sky.env-sample as sky.env. The sky.env file contains the application's environment variables for NodeJS environments. Update sky.env with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:5000/auth/callback. (See My Applications.) AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. PORT The Web server port that will run the application. For this tutorial, enter 5000. Save the environment file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that any .env files are ignored. This prevents the environment files from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 6 — Install Dependencies From the working directory, run npm install to install the project dependencies.\nNPM is the package manager that comes bundled with Node.js (since you already installed Node.js, you also have NPM). The command npm install downloads any dependencies listed in the package.json file and adds them to the app's node_modules directory (this command also creates this directory if it doesn't already exist). Each dependency is represented as a child directory of node_modules. $ cd sky-api-auth-tutorial\n$ npm install After you run npm install, verify that the sky-api-auth-tutorial working directory contains the node_modules subfolder. npm install depends on a reliable Internet connection to install dependencies. If you have issues running the command, you can hard delete the node_modules folder and run npm install again. Step 7 — Run the Application Using Command Prompt/Terminal, ensure you are in the working directory.\nType npm start to start the application server at http://localhost:5000. $ npm start Application starting point Open the index.js file. This is the starting point of our application. This code runs on the server side and is not visible to the application user. The code performs the following:\nIt registers our application dependencies such as Express.\nIt handles authorization and user requests to the home page and data endpoints.\nIt creates a web server on your local machine at https://localhost:5000. To request the home page open your browser to http://localhost:5000/. It displays the authorization options. Your browser may display a warning that the connection is not private. For this tutorial, ignore this message. To proceed, click Show advanced, and then click Proceed to localhost (unsafe). Open the ui folder and the index.html file. This opens the home page for our application, where we can initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Node.js server routes.\nBelow the body tag, the ng-view tag is used as a hook for our Angular Router to load our desired template view.\n<!-- INITIALIZE THE APP -->\n<body ng-app=\"AuthCodeFlowTutorial\"> <!-- LOAD OUR VIEWS --> <ng-view></ng-view> ... Set up the router Open the app folder and the main.js file. Our application's logic lives here.\nFirst, we declare our angular module and inject the ngRoute dependency.\nangular.module('AuthCodeFlowTutorial', ['ngRoute'])\nNext, we initialize our Angular Router to manage our views and controllers. angular.module('AuthCodeFlowTutorial', ['ngRoute']) .config(function ($routeProvider) { $routeProvider .when('/home', { templateUrl: './app/main-template.html', controller: 'MainController' }) .when('/auth-success', { template: 'Login Successful', controller: 'AuthController' }) .otherwise({ redirectTo: '/home' }) In this example, we use two views and two controllers. As your app grows, you can add more views and controllers. Display the authorize buttons Open the app folder and the main-template.html file. This is our application's core view.\nThe main.js file holds the logic to initiate our AngularJS Controllers and our Angular Router.\nJust after the page title, the authorize buttons reference the server's authorization endpoint. When a user clicks one of these buttons, the authorization process begins. When a session is authenticated, the authorize buttons are hidden. The Authorize using redirect button initiates the authorization process by redirecting the browser to the authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 well login-options\"> <span class=\"login-options-label\">Login using redirect</span> <a href=\"/auth/login\" class=\"btn btn-primary btn-block btn-lg\">Log in</a>\n</div> The Authorize using popup button opens a popup window that is directed to the server's authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 col-sm-offset-2 well login-options\"> <span class=\"login-options-label\">Login using popup</span> <button ng-click=\"popupLogin()\" class=\"btn btn-primary btn-block btn-lg\" target=\"login-iframe\">Log in</button>\n</div> Using the popup option, our Angular code performs the following actions: It calls the popupLogin() method. This method opens a window at the specified URL, and we pass in a ?redirect= parameter and set it to the hash /%23/auth-success, which translates to:/#/auth-success.\n.controller('MainController', function ($scope, $http, $window) {\n...\n$scope.popupLogin = function () { var popup popup = window.open('auth/login?redirect=/%23/auth-success', 'login', 'height=450,width=600,'); if (window.focus) { popup.focus(); }\n} When the browser redirects to the /#/auth-success, the AuthController closes the current window and redirects the browser to the route '/' so our router will redirect the page to #/home.\n.controller('AuthController', function ($window) { ... $window.opener.location = '/'; $window.close();\n}) The JavaScript in main.js in the MainController uses Ajax calls to the /auth/authenticated endpoint to determine whether the users are logged in. If the users access token has expired or is invalid, the page displays the Authorize buttons. Users must log in to obtain a valid access token. angular.module('AuthCodeFlowTutorial', ['ngRoute']) ... .controller('MainController', function ($scope, $http) { ... /** * Check user access token. */ $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; /** * Access token is valid. Fetch constituent record. */ if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } }); }); Obtain an Access Token Click one of the Authorize buttons and enter your Blackbaud account credentials. After authentication, your browser redirects to the Blackbaud Authorization Service authorization form. Open index.js and /server/routes/auth.js. The Authroize button prompt a request to the web server's /auth/login endpoint. The route in the app's main index.js file directs requests to the getLogin() function within /server/routes/auth.js. // Register our OAUTH2 routes\napp.get('/auth/authenticated', routes.auth.getAuthenticated);\napp.get('/auth/login', routes.auth.getLogin);\napp.get('/auth/callback', routes.auth.getCallback);\napp.get('/auth/logout', routes.auth.getLogout); The auth.js file relies on the simple-oauth2 client library. To creating an object you must provide your registered application's Application ID and Application secret values, which reside in the project's sky.env file as the AUTH_CLIENT_ID and AUTH_CLIENT_SECRET environment variables. You need the URL to the Blackbaud Authorization Service along with the token endpoint. oauth2 = require('simple-oauth2')({ clientID: process.env.AUTH_CLIENT_ID, clientSecret: process.env.AUTH_CLIENT_SECRET, site: 'https://oauth2.apim.blackbaud.com/', tokenPath: '/token'\n}); To obtain an authorization code, the getLogin() function uses simple-oauth2's authorizeURL() function to display the Blackbaud Authorization Service's authorization form. After users approve or deny the request, the responses are redirected using the value of the AUTH_REDIRECT_URI environment variable: https://localhost:5000/auth/callback. function getLogin(request, response) { request.session.redirect = request.query.redirect; request.session.state = crypto.randomBytes(48).toString('hex'); response.redirect(oauth2.authCode.authorizeURL({ redirect_uri: process.env.AUTH_REDIRECT_URI, state: request.session.state }));\n} The access token exchange should occur server side. Do not expose the Application secret to users in client-side code. Do not expose your Application secret in a source code repository such as GitHub. The path /auth/callback is routed to the getCallback() function that exchanges authorization codes for access tokens. function getCallback(request, response) { ... options = { code: request.query.code, redirect_uri: process.env.AUTH_REDIRECT_URI }; oauth2.authCode.getToken(options, function (errorToken, ticket) { if (errorToken) { error = errorToken.message; } else { redirect = request.session.redirect || '/'; request.session.redirect = ''; request.session.state = ''; saveTicket(request, ticket); response.redirect(redirect); } }); ...\n} The access token value is not passed back to the client. Instead, the saveTicket() function saves it to the session state. function saveTicket(request, ticket) { request.session.ticket = ticket; request.session.expires = (new Date().getTime() + (1000 * ticket.expires_in));\n} Retrieve constituent data\nThe response redirects users to the home page and AppController. The AppController verifies that users are logged in through calls to the web server's /auth/authenticated endpoint. After verification, calls are made to the web server's api/constituents/280.\nangular.module('AuthCodeFlowTutorial', [])\n.controller('AppController', function ($scope, $http, $window) { // Checks the user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); Open /server/libs/sky.js and /server/routes/api.js. The route in the app's main index.js file directs the request to the getConstituent() function in /server/libs/sky.js. The call is passed along to /server/routes/api.js, which interacts directly with SKY API endpoints. Eventually the call makes its way to the proxy() function. Here, we can see the use of the bb-api-subscription-key and Authorization request headers: function proxy(request, method, endpoint, body, callback) { var options = { json: true, method: method, body: body, url: 'https://api.sky.blackbaud.com/constituent/v1/'' + endpoint, headers: { 'bb-api-subscription-key': process.env.AUTH_SUBSCRIPTION_KEY, 'Authorization': 'Bearer ' + request.session.ticket.access_token } }; promise(options) .then(callback) .catch(function (err) { console.log('Proxy Error: ', err); });\n} The bb-api-subscription-key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The code is marries the constituent data to an AngularJS template in our ui/app/main-template.html view and renders it in a Bootstrap table. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Summary\nYou should now have a fully functioning application using implicit-flow. Users of your app should be able to log in with their Blackbaud credentials, authorize the app, and get constituent data after they are authenticated. Be sure to take a look at our other code samples. You can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
    }
   ],
   "text": " Authorization Code Flow C# .NET Core Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. NodeJS Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow. "
  },
  {
   "layout": "layout-container",
   "name": "C# .NET Core",
   "title": "Authorization Code Flow - C# .NET Core",
   "icon": "fa fa-fw fa-windows",
   "description": "Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
   "order": 1,
   "published": true,
   "showInNav": true,
   "showBreadcrumbs": true,
   "tutorial": true,
   "back_to_top": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Auth-code-flow C-sharp",
   "abspath": "docs/code/auth-code-flow/c-sharp/index.md",
   "uri": "/docs/code/auth-code-flow/c-sharp/",
   "text": " Comments Edit in GitHub Authorization Code Flow - C# .NET Core GitHub Live Demo\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use ASP.NET Core for the server-side platform and C#.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites Since we are using the Authorization Code Flow, we need to use a server-side software platform, such as .NET Core. You will need to Download and install .NET Core\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the bb-api-subscription-key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo register your application: Go to My Applications to manage your applications. Click Register app. Enter the following information: Field Description Application name (Required) Enter a name for your application. This is the name that users will see when asked to grant access to your application during the authorization process. It will also be seen by administrators within the Applications area of the product when they view the list of applications that have been granted access to their data. Application details (Required) Provide a description for your application. This will be seen by administrators when activating your application within the product. Organization name (Required) Specify the company name that users and administrators will see associated with your application. Application logo (Optional) Provide a 512 by 512 pixel PNG or JPEG image that users and administrators will see associated with your application. Application website URL (Required) Enter a URL where users can find out more information about your application. Redirect URIs (Required) Specify one or more URIs that should be used when redirecting the user's browser back to your application after providing consent during the authorization process. The URIs must be absolute and use https (note that we do support http://localhost:port or http://127.0.0.1:port for local development). To register multiple URIs, click Add another redirect URI. For this tutorial, use http://localhost:5000/auth/callback. Important! When your application requests authorization to access a Blackbaud customer's data, it will include a redirect_uri parameter as part of the query string. This value must match exactly against one of the values you listed when registering your application, including any trailing slashes. If the value supplied does not match any of the registered redirect URIs, then authorization will fail. For more information on commonly encountered authorization problems, see common authorization issues. Click Save to complete the registration of your application. After you register an application, take note of the credentials (ID and Secret) that are displayed in the Application Credentials column. These credentials are unique to your application, and are used to verify your application's identity during the authorization process. Application ID is the unique identifier for your application. This value is not sensitive and can be shared publicly. It cannot be modified after the application is registered, so if you need change it for any reason you must delete the application and re-add it.\nApplication secret is the key your application will provide when requesting an access token to call the SKY API as part of the authorization process. This value is sensitive and should NOT be shared with anyone else! To display the secret, click Show in the Application Credentials column. Very Important! The application secret should be kept private and safe! Regenerate your secret if it is compromised. Blackbaud reserves the right to remove or deactivate your application in order to protect our customer's data. Step 3 — Grab the Source Code\nThe sky-api-auth-tutorial-c-sharp repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial-c-sharp repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial-c-sharp.git Step 4 — Prepare Your Environment\nLet's explore some application settings files and prep your environment variables. Open the sky-api-auth-tutorial-c-sharp working directory.\nOpen the appsettings.json which details generic properties to be used by the application. Take note of the following SKY API URI property values: AuthBaseUri URI to the Authorization Service. SkyApiBaseUri URI to the SKY API Endpoints. For local development, duplicate the file appsettings.json-sample, renaming it to appsettings.Development.json. The appsettings.Development.json file contains your registered application's environment variables. Note that private properties, such as your Application ID and Application secret, are stored in this file. For security, the appsettings.Development.json is excluded from being syncronized with GitHub via the file .gitignore. At run time, the application will merge these properties into the available environment variables. In .NET Core, the Startup class, Startup.cs provides the entry point for an application, and is required for all applications. This class configures the application and sets up the required middleware. { \"AppSettings\": { \"AuthClientId\": \"\", \"AuthClientSecret\": \"\", \"AuthRedirectUri\": \"http://localhost:5000/auth/callback\", \"AuthSubscriptionKey\": \"\" }\n} Using the values from your registered application and the subscription key from your Blackbaud Developer Profile, update appsettings.Development.json with the following values. All values are required.: AuthClientId Your registered application's Application ID. AuthClientSecret Your registered application's Application secret. AuthRedirectUri One of your registered application's Redirect URIs. For this tutorial, we will use http://localhost:5000/auth/callback. AuthSubscriptionKey Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the file. Step 5 — Run the Application Using Command Prompt/Terminal/bash prompt, ensure you are in the working directory.\nOpen and review the project.json file. This file details the application’s dependencies. These NuGet modules (project dependencies) are installed when issuing the dotnet restore command within Command Prompt/Terminal/bash prompt.\nOn a Mac, issue the following commands to restore the packages specified in the project.json file and run the actual sample:\n$ dotnet restore\n$ export ASPNETCORE_ENVIRONMENT=Development && dotnet run On a PC, type:\n$ dotnet restore\n$ set ASPNETCORE_ENVIRONMENT=Development && dotnet run Visit http://localhost:5000/ to view your locally running application. Application Starting Point IIS is used as the webserver. An ASP.NET Core Module configured in project.json is used to list dependencies and configure IIS to launch and host your application.\nOpen the Program.cs file. The Main() method is the starting point of our application. It is responsible for initializing the application. We use WebHostBuilder to listen on a particular IP address and port: http://localhost:5000/. As of RC2 an ASP.NET Core application is a .NET Core Console application that calls into ASP.NET specific libraries. This code runs on the server-side and is not visible to the application user. Running the code server-side helps to protect your Application secret.\nusing System.IO;\nusing Microsoft.AspNetCore.Hosting; namespace Blackbaud.AuthCodeFlowTutorial\n{ public class Program { public static void Main(string[] args) { var host = new WebHostBuilder() .UseKestrel() .UseContentRoot(Directory.GetCurrentDirectory()) .UseIISIntegration() .UseStartup() .Build(); host.Run(); } }\n}\nOpen your browser to http://localhost:5000/ to request the Home page. When the front page loads, the AngularJS on the Home page (/Views/Shared/_Layout.cshtml) makes a request to the /auth/authenticated endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ...\nThe call to the endpoint routes to the corresponding controller (/Controllers/AuthenticationController.cs) and returns a Boolean representing the current user's authentication status. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false.\n[HttpGet(\"authenticated\")]\npublic ActionResult Authenticated()\n{ return Json(new { authenticated = _authService.IsAuthenticated() });\n}\n... Displaying the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, click Show advanced and then click Proceed to localhost (unsafe). Open the Views/Shared/_Layout.cshtml file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button:\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /Controllers/AuthenticationController.cs.\nWhen the user clicks the Log in button, a call is made to LogIn() which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n[HttpGet(\"login\")]\npublic ActionResult LogIn()\n{ Uri address = _authService.GetAuthorizationUri(); return Redirect(address.ToString());\n}\n...\nOnce authorized, SKY API redirects the user back to the /auth/callback URI with an authorization code. Once an authorization code has been obtained, it is exchanged the code for an access token. The app is then redirected back to the Home page. [HttpGet(\"callback\")]\npublic ActionResult Callback()\n{ string code = Request.Query[\"code\"]; _authService.ExchangeCodeForAccessToken(code); return Redirect(\"/\");\n}\n... Retrieve Constituent Data Open the Home page (Views/Shared/_Layout.cshtml).\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents/280 to retrieve a constituent record:\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); ... The data is returned as JSON to the Home page where the model's data is projected through the view of the HTML template:\n<div ng-if=\"isAuthenticated\"> <h3>Constituent: </h3> <p> See <a href=\"/api/entity-reference/constituent\">Constituent</a> within the SKY API entity reference for a full listing of properties. </p> <p ng-if=\"::constituent.error\" ng-bind=\"::constituent.error\" class=\"alert alert-danger\"></p> <div ng-if=\"::constituent.id\" class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div>\n... Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /Controllers/AuthenticationController.cs\nIf the user clicks Log Out, they are redirected to /auth/logout which destroys the access/refresh token stored in the browser’s session.\nIf the user clicks Refresh Access Token, AngularJS makes a request to /auth/refresh-token, which asks SKY API to return a refreshed access token, which is then stored in the browser’s session. That's it! Be sure to take a look at our other code samples.\nCheck out the README where you can view a live demo of the application hosted on Microsoft Azure.\nThe README also contains instructions for deploying to Azure App Services rather than your local development environment.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
  },
  {
   "layout": "layout-container",
   "name": "Chrome Extension",
   "title": "Authorization Code Flow - Chrome Extension",
   "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.",
   "order": 3,
   "icon": "fa fa-fw fa-chrome",
   "showInNav": true,
   "showBreadcrumbs": true,
   "back_to_top": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Auth-code-flow Chrome-extension",
   "abspath": "docs/code/auth-code-flow/chrome-extension/index.md",
   "uri": "/docs/code/auth-code-flow/chrome-extension/",
   "text": " Edit in GitHub Authorization Code Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.\nView the source on GitHub "
  },
  {
   "layout": "layout-container",
   "name": "NodeJS",
   "title": "Authorization Code Flow - NodeJS",
   "description": "Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
   "order": 2,
   "icon": "fa fa-fw fa-desktop",
   "published": true,
   "showInNav": true,
   "tutorial": true,
   "showBreadcrumbs": true,
   "back_to_top": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Auth-code-flow Nodejs",
   "abspath": "docs/code/auth-code-flow/nodejs/index.md",
   "uri": "/docs/code/auth-code-flow/nodejs/",
   "text": " Comments Edit in GitHub Authorization Code Flow - NodeJS GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use Node.js, a server-side platform.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running Node.js.\nFamiliarity with Node.js, using NPM to install project dependencies, and environment variables including setting them in either an OSX/Linux or Windows environment.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection to clone the repo and install the project's dependencies. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the bb-api-subscription-key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. Keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo register your application: Go to My Applications to manage your applications. Click Register app. Enter the following information: Field Description Application name (Required) Enter a name for your application. This is the name that users will see when asked to grant access to your application during the authorization process. It will also be seen by administrators within the Applications area of the product when they view the list of applications that have been granted access to their data. Application details (Required) Provide a description for your application. This will be seen by administrators when activating your application within the product. Organization name (Required) Specify the company name that users and administrators will see associated with your application. Application logo (Optional) Provide a 512 by 512 pixel PNG or JPEG image that users and administrators will see associated with your application. Application website URL (Required) Enter a URL where users can find out more information about your application. Redirect URIs (Required) Specify one or more URIs that should be used when redirecting the user's browser back to your application after providing consent during the authorization process. The URIs must be absolute and use https (note that we do support http://localhost:port or http://127.0.0.1:port for local development). To register multiple URIs, click Add another redirect URI. For this tutorial, use http://localhost:5000/auth/callback. Important! When your application requests authorization to access a Blackbaud customer's data, it will include a redirect_uri parameter as part of the query string. This value must match exactly against one of the values you listed when registering your application, including any trailing slashes. If the value supplied does not match any of the registered redirect URIs, then authorization will fail. For more information on commonly encountered authorization problems, see common authorization issues. Click Save to complete the registration of your application. After you register an application, take note of the credentials (ID and Secret) that are displayed in the Application Credentials column. These credentials are unique to your application, and are used to verify your application's identity during the authorization process. Application ID is the unique identifier for your application. This value is not sensitive and can be shared publicly. It cannot be modified after the application is registered, so if you need change it for any reason you must delete the application and re-add it.\nApplication secret is the key your application will provide when requesting an access token to call the SKY API as part of the authorization process. This value is sensitive and should NOT be shared with anyone else! To display the secret, click Show in the Application Credentials column. Very Important! The application secret should be kept private and safe! Regenerate your secret if it is compromised. Blackbaud reserves the right to remove or deactivate your application in order to protect our customer's data. Step 3 — Install Node.js\nAfter you have your subscription key, Application ID, and Application secret, it's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use Node.js. Download and install Node.js. Use the default settings for your development environment.\nCreate a file named testserver.js and add the following code: // Create a very simple HTTP web server on your local machine. // Set up a HTTP Web server and client, require('http'). var http = require('http'); // createServer returns a new instance of the http server. // A function is used as a request listener. // req is an instance of the incoming request. // res is an instance of the server response. // When you browse to http://localhost:1337/, a 'request' event occurs and // \"Hello World\" is written from the HTTP Web server back to your browser. http.createServer(function (req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello World'); }).listen(1337, \"localhost\"); console.log('Server running at http://localhost:1337/'); Save the file in a folder named testnodejs. From a command prompt, change the directory to testnodejs and run the testserver.js file: $ cd testnodejs\n$ node testserver.js The Web server listens for requests on your localhost, port 1337. In a Web browser, navigate to localhost:1337. The Web server displays a page with with \"Hello World.\" To stop the Web server, type CTRL-C in the command line. Step 4 — Grab the Source Code\nThe sky-api-auth-tutorial repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial. The following command creates a working directory named sky-api-auth-tutorial that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial.git Step 5 — Prepare Your Environment Open the sky-api-auth-tutorial working directory and copy the configuration file sky.env-sample as sky.env. The sky.env file contains the application's environment variables for NodeJS environments. Update sky.env with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:5000/auth/callback. (See My Applications.) AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. PORT The Web server port that will run the application. For this tutorial, enter 5000. Save the environment file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that any .env files are ignored. This prevents the environment files from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 6 — Install Dependencies From the working directory, run npm install to install the project dependencies.\nNPM is the package manager that comes bundled with Node.js (since you already installed Node.js, you also have NPM). The command npm install downloads any dependencies listed in the package.json file and adds them to the app's node_modules directory (this command also creates this directory if it doesn't already exist). Each dependency is represented as a child directory of node_modules. $ cd sky-api-auth-tutorial\n$ npm install After you run npm install, verify that the sky-api-auth-tutorial working directory contains the node_modules subfolder. npm install depends on a reliable Internet connection to install dependencies. If you have issues running the command, you can hard delete the node_modules folder and run npm install again. Step 7 — Run the Application Using Command Prompt/Terminal, ensure you are in the working directory.\nType npm start to start the application server at http://localhost:5000. $ npm start Application starting point Open the index.js file. This is the starting point of our application. This code runs on the server side and is not visible to the application user. The code performs the following:\nIt registers our application dependencies such as Express.\nIt handles authorization and user requests to the home page and data endpoints.\nIt creates a web server on your local machine at https://localhost:5000. To request the home page open your browser to http://localhost:5000/. It displays the authorization options. Your browser may display a warning that the connection is not private. For this tutorial, ignore this message. To proceed, click Show advanced, and then click Proceed to localhost (unsafe). Open the ui folder and the index.html file. This opens the home page for our application, where we can initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Node.js server routes.\nBelow the body tag, the ng-view tag is used as a hook for our Angular Router to load our desired template view.\n<!-- INITIALIZE THE APP -->\n<body ng-app=\"AuthCodeFlowTutorial\"> <!-- LOAD OUR VIEWS --> <ng-view></ng-view> ... Set up the router Open the app folder and the main.js file. Our application's logic lives here.\nFirst, we declare our angular module and inject the ngRoute dependency.\nangular.module('AuthCodeFlowTutorial', ['ngRoute'])\nNext, we initialize our Angular Router to manage our views and controllers. angular.module('AuthCodeFlowTutorial', ['ngRoute']) .config(function ($routeProvider) { $routeProvider .when('/home', { templateUrl: './app/main-template.html', controller: 'MainController' }) .when('/auth-success', { template: 'Login Successful', controller: 'AuthController' }) .otherwise({ redirectTo: '/home' }) In this example, we use two views and two controllers. As your app grows, you can add more views and controllers. Display the authorize buttons Open the app folder and the main-template.html file. This is our application's core view.\nThe main.js file holds the logic to initiate our AngularJS Controllers and our Angular Router.\nJust after the page title, the authorize buttons reference the server's authorization endpoint. When a user clicks one of these buttons, the authorization process begins. When a session is authenticated, the authorize buttons are hidden. The Authorize using redirect button initiates the authorization process by redirecting the browser to the authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 well login-options\"> <span class=\"login-options-label\">Login using redirect</span> <a href=\"/auth/login\" class=\"btn btn-primary btn-block btn-lg\">Log in</a>\n</div> The Authorize using popup button opens a popup window that is directed to the server's authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 col-sm-offset-2 well login-options\"> <span class=\"login-options-label\">Login using popup</span> <button ng-click=\"popupLogin()\" class=\"btn btn-primary btn-block btn-lg\" target=\"login-iframe\">Log in</button>\n</div> Using the popup option, our Angular code performs the following actions: It calls the popupLogin() method. This method opens a window at the specified URL, and we pass in a ?redirect= parameter and set it to the hash /%23/auth-success, which translates to:/#/auth-success.\n.controller('MainController', function ($scope, $http, $window) {\n...\n$scope.popupLogin = function () { var popup popup = window.open('auth/login?redirect=/%23/auth-success', 'login', 'height=450,width=600,'); if (window.focus) { popup.focus(); }\n} When the browser redirects to the /#/auth-success, the AuthController closes the current window and redirects the browser to the route '/' so our router will redirect the page to #/home.\n.controller('AuthController', function ($window) { ... $window.opener.location = '/'; $window.close();\n}) The JavaScript in main.js in the MainController uses Ajax calls to the /auth/authenticated endpoint to determine whether the users are logged in. If the users access token has expired or is invalid, the page displays the Authorize buttons. Users must log in to obtain a valid access token. angular.module('AuthCodeFlowTutorial', ['ngRoute']) ... .controller('MainController', function ($scope, $http) { ... /** * Check user access token. */ $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; /** * Access token is valid. Fetch constituent record. */ if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } }); }); Obtain an Access Token Click one of the Authorize buttons and enter your Blackbaud account credentials. After authentication, your browser redirects to the Blackbaud Authorization Service authorization form. Open index.js and /server/routes/auth.js. The Authroize button prompt a request to the web server's /auth/login endpoint. The route in the app's main index.js file directs requests to the getLogin() function within /server/routes/auth.js. // Register our OAUTH2 routes\napp.get('/auth/authenticated', routes.auth.getAuthenticated);\napp.get('/auth/login', routes.auth.getLogin);\napp.get('/auth/callback', routes.auth.getCallback);\napp.get('/auth/logout', routes.auth.getLogout); The auth.js file relies on the simple-oauth2 client library. To creating an object you must provide your registered application's Application ID and Application secret values, which reside in the project's sky.env file as the AUTH_CLIENT_ID and AUTH_CLIENT_SECRET environment variables. You need the URL to the Blackbaud Authorization Service along with the token endpoint. oauth2 = require('simple-oauth2')({ clientID: process.env.AUTH_CLIENT_ID, clientSecret: process.env.AUTH_CLIENT_SECRET, site: 'https://oauth2.apim.blackbaud.com/', tokenPath: '/token'\n}); To obtain an authorization code, the getLogin() function uses simple-oauth2's authorizeURL() function to display the Blackbaud Authorization Service's authorization form. After users approve or deny the request, the responses are redirected using the value of the AUTH_REDIRECT_URI environment variable: https://localhost:5000/auth/callback. function getLogin(request, response) { request.session.redirect = request.query.redirect; request.session.state = crypto.randomBytes(48).toString('hex'); response.redirect(oauth2.authCode.authorizeURL({ redirect_uri: process.env.AUTH_REDIRECT_URI, state: request.session.state }));\n} The access token exchange should occur server side. Do not expose the Application secret to users in client-side code. Do not expose your Application secret in a source code repository such as GitHub. The path /auth/callback is routed to the getCallback() function that exchanges authorization codes for access tokens. function getCallback(request, response) { ... options = { code: request.query.code, redirect_uri: process.env.AUTH_REDIRECT_URI }; oauth2.authCode.getToken(options, function (errorToken, ticket) { if (errorToken) { error = errorToken.message; } else { redirect = request.session.redirect || '/'; request.session.redirect = ''; request.session.state = ''; saveTicket(request, ticket); response.redirect(redirect); } }); ...\n} The access token value is not passed back to the client. Instead, the saveTicket() function saves it to the session state. function saveTicket(request, ticket) { request.session.ticket = ticket; request.session.expires = (new Date().getTime() + (1000 * ticket.expires_in));\n} Retrieve constituent data\nThe response redirects users to the home page and AppController. The AppController verifies that users are logged in through calls to the web server's /auth/authenticated endpoint. After verification, calls are made to the web server's api/constituents/280.\nangular.module('AuthCodeFlowTutorial', [])\n.controller('AppController', function ($scope, $http, $window) { // Checks the user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); Open /server/libs/sky.js and /server/routes/api.js. The route in the app's main index.js file directs the request to the getConstituent() function in /server/libs/sky.js. The call is passed along to /server/routes/api.js, which interacts directly with SKY API endpoints. Eventually the call makes its way to the proxy() function. Here, we can see the use of the bb-api-subscription-key and Authorization request headers: function proxy(request, method, endpoint, body, callback) { var options = { json: true, method: method, body: body, url: 'https://api.sky.blackbaud.com/constituent/v1/'' + endpoint, headers: { 'bb-api-subscription-key': process.env.AUTH_SUBSCRIPTION_KEY, 'Authorization': 'Bearer ' + request.session.ticket.access_token } }; promise(options) .then(callback) .catch(function (err) { console.log('Proxy Error: ', err); });\n} The bb-api-subscription-key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The code is marries the constituent data to an AngularJS template in our ui/app/main-template.html view and renders it in a Bootstrap table. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Summary\nYou should now have a fully functioning application using implicit-flow. Users of your app should be able to log in with their Blackbaud credentials, authorize the app, and get constituent data after they are authenticated. Be sure to take a look at our other code samples. You can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
  },
  {
   "name": "Implicit Flow",
   "layout": "layout-showcase",
   "description": "Get up-and-running with our Implicit Flow code samples",
   "showBreadcrumbs": true,
   "icon": "fa fa-fw fa-user",
   "title": "Implicit Flow Code Samples",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Implicit-flow",
   "abspath": "docs/code/implicit-flow/index.md",
   "uri": "/docs/code/implicit-flow/",
   "nav_links": [
    {
     "layout": "layout-container",
     "name": "AngularJS",
     "title": "Implicit Flow - AngularJS",
     "description": "Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
     "order": 2,
     "icon": "fa fa-fw fa-desktop",
     "showInNav": true,
     "tutorial": true,
     "showBreadcrumbs": true,
     "back_to_top": true,
     "useComments": false,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Implicit-flow Angular",
     "abspath": "docs/code/implicit-flow/angular/index.md",
     "uri": "/docs/code/implicit-flow/angular/",
     "text": " Edit in GitHub Implicit Flow - AngularJS GitHub\nLearn how to create an AngularJS app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
    },
    {
     "layout": "layout-container",
     "name": "Angular 2",
     "title": "Implicit Flow - Angular 2",
     "description": "Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
     "order": 2,
     "icon": "fa fa-fw fa-desktop",
     "showInNav": true,
     "tutorial": true,
     "showBreadcrumbs": true,
     "back_to_top": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Implicit-flow Angular2",
     "abspath": "docs/code/implicit-flow/angular2/index.md",
     "uri": "/docs/code/implicit-flow/angular2/",
     "text": " Edit in GitHub Implicit Flow - Angular 2 GitHub\nLearn how to create an Angular 2 app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
    },
    {
     "name": "Chrome Extension",
     "layout": "layout-container",
     "title": "Implicit Flow - Chrome Extension",
     "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.",
     "icon": "fa fa-fw fa-chrome",
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Implicit-flow Chrome-extension",
     "abspath": "docs/code/implicit-flow/chrome-extension/index.md",
     "uri": "/docs/code/implicit-flow/chrome-extension/",
     "text": " Edit in GitHub Implicit Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
    }
   ],
   "text": " Implicit Flow Angular 2 Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. AngularJS Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow. "
  },
  {
   "layout": "layout-container",
   "name": "AngularJS",
   "title": "Implicit Flow - AngularJS",
   "description": "Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
   "order": 2,
   "icon": "fa fa-fw fa-desktop",
   "showInNav": true,
   "tutorial": true,
   "showBreadcrumbs": true,
   "back_to_top": true,
   "useComments": false,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Implicit-flow Angular",
   "abspath": "docs/code/implicit-flow/angular/index.md",
   "uri": "/docs/code/implicit-flow/angular/",
   "text": " Edit in GitHub Implicit Flow - AngularJS GitHub\nLearn how to create an AngularJS app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
  },
  {
   "layout": "layout-container",
   "name": "Angular 2",
   "title": "Implicit Flow - Angular 2",
   "description": "Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
   "order": 2,
   "icon": "fa fa-fw fa-desktop",
   "showInNav": true,
   "tutorial": true,
   "showBreadcrumbs": true,
   "back_to_top": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Implicit-flow Angular2",
   "abspath": "docs/code/implicit-flow/angular2/index.md",
   "uri": "/docs/code/implicit-flow/angular2/",
   "text": " Edit in GitHub Implicit Flow - Angular 2 GitHub\nLearn how to create an Angular 2 app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
  },
  {
   "name": "Chrome Extension",
   "layout": "layout-container",
   "title": "Implicit Flow - Chrome Extension",
   "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.",
   "icon": "fa fa-fw fa-chrome",
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Implicit-flow Chrome-extension",
   "abspath": "docs/code/implicit-flow/chrome-extension/index.md",
   "uri": "/docs/code/implicit-flow/chrome-extension/",
   "text": " Edit in GitHub Implicit Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
  },
  {
   "layout": "layout-base",
   "name": "Create an Application",
   "description": "Learn how to successfully create an application with SKY API.",
   "order": 600,
   "published": true,
   "showInNav": false,
   "back_to_top": true,
   "title": "Create an Application Tutorial",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": false,
   "showInFooter": false,
   "showInSearch": true,
   "breadcrumbs": "Docs Createapp A",
   "abspath": "docs/createapp/a/index.md",
   "uri": "/docs/createapp/a/",
   "text": " Create an Application with SKY API To successfully create an application with SKY API, follow this step-by-step guide. Before you begin, be sure to complete the Getting Started guide, where you'll get your Blackbaud developer account, a subscription key, and learn how to explore the Endpoint Reference. Register your application To call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app.\nEnter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product.\nIn the Application website URL field, enter where users can learn more about your application online.\nSpecify the URIs to use to redirect users back to your application during the authorization process. Note:The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. Review your application credentials After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Activate your application in a tenant For your application to access a user's Blackbaud data, the tenant's administrator must approve its use for their organization and activate it within their product. For Blackbaud customers, the tenant administrator is a user within their organization. To activate your application in a customer's tenant, provide the tenant administrator with your application ID and have the tenant administrator complete the following steps: Copy the Application ID that your Blackbaud developer provided to you.\nVisit the Control Panel, Applications area of your Blackbaud product.\nSelect Add application and then paste in the Application ID. Select Save.\nThe application will then appear in the list of activated applications for the tenant. Request authorization Once your application has been activated, you can then obtain consent from an authenticated user. Upon consent, an OAuth 2.0 access token will be issued to your application in the form of a JSON web token, or JWT. The token should be included on every API request as part of the standard Authorization header. It is tied to the authenticated user's account and organization, which means that your application can only access data to which the authenticated user can access within the system. Learn how to authorize API requests! ... and you're done! You are now ready to go make API calls! Now that you've built and tested your application, here are a few things you should know. SKY UX SKY UX is Blackbaud’s next-generation user-experience framework. You can use it to bring the same consistent experience as Blackbaud products to your customizations and applications. Blackbaud Developer Community Participate and learn from other developers on how they are using the SKY API. Blackbaud Partner Network Learn how to be a part of our Blackbaud Partner Network. © 2016 Blackbaud, Inc. All rights reserved. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Create an Application",
   "description": "Learn how to successfully create an application with SKY API.",
   "order": 600,
   "published": true,
   "showInNav": false,
   "back_to_top": true,
   "title": "Create an Application Tutorial",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": false,
   "showInFooter": false,
   "showInSearch": true,
   "breadcrumbs": "Docs Createapp B",
   "abspath": "docs/createapp/b/index.md",
   "uri": "/docs/createapp/b/",
   "text": " Create an Application with SKY API To successfully create an application with SKY API, follow this step-by-step guide.\nBefore you begin, be sure to complete the Getting Started guide, where you'll get your Blackbaud developer account, a subscription key, and learn how to explore the Endpoint Reference. Register your application\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product.\nIn the Application website URL field, enter where users can learn more about your application online.\nSpecify the URIs to use to redirect users back to your application during the authorization process. Note:The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. Review your application credentials After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Activate your application in a tenant For your application to access a user's Blackbaud data, the tenant's administrator must approve its use for their organization and activate it within their product. For Blackbaud customers, the tenant administrator is a user within their organization. To activate your application in a customer's tenant, provide the tenant administrator with your application ID and have the tenant administrator complete the following steps: Copy the Application ID that your Blackbaud developer provided to you.\nVisit the Control Panel, Applications area of your Blackbaud product.\nSelect Add application and then paste in the Application ID. Select Save.\nThe application will then appear in the list of activated applications for the tenant. Request authorization Once your application has been activated, you can then obtain consent from an authenticated user. Upon consent, an OAuth 2.0 access token will be issued to your application in the form of a JSON web token, or JWT. The token should be included on every API request as part of the standard Authorization header. It is tied to the authenticated user's account and organization, which means that your application can only access data to which the authenticated user can access within the system. Learn how to authorize API requests! ... and you're done!\nYou are now ready to go make API calls! Next steps\nNow that you've built and tested your application, here are a few things you should know. SKY UX is Blackbaud’s next-generation user-experience framework. You can use it to bring the same consistent experience as Blackbaud products to your customizations and applications. Participate and learn from other developers on how they are using the SKY API in the Blackbaud Developer Community. Learn how to be a part of our Blackbaud Partner Network. "
  },
  {
   "name": "Getting Started",
   "description": "Obtain the necessary knowledge to make API calls using our interactive <%= stache.config.dev_console_name %>",
   "order": 100,
   "layout": "layout-sidebar",
   "published": true,
   "back_to_top": true,
   "title": "Getting Started",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Getting-started",
   "abspath": "docs/getting-started/index.md",
   "uri": "/docs/getting-started/",
   "text": " Comments Edit in GitHub Getting Started\nThis tutorial shows you how to try out the SKY API through our console.\nStep 1 - Set up your developer account\nSign up for a Blackbaud developer account. This account represents you as a developer within the Blackbaud Developer Portal.\nAlready have an account? Sign in to continue with the Getting Started. Step 2 - Get your subscription key\nWe require you to have an approved subscription key to a specific API product before you can use the SKY API.\nThis subscription key is associated with your Blackbaud developer account. How to get a subscription key? To request a subscription to an API product, from the Products page select SKY API Standard Edition.\nClick Subscribe. A confirmation screen appears.\nTo submit your request, click Confirm. Blackbaud approves the subscription requests. We will send you an email notification when your request is approved. After it is approved, you can view the subscription details within your developer profile.\nImportant! In order to be approved for a subscription key, you must be an authorized user in at least one instance of Raiser's Edge NXT or Financial Edge NXT. This requirement ensures that you have a tenant to make API calls against. Your profile provides details about your subscriptions. Each subscription contains a Primary key and a Secondary key. You can use either key as the subscription key value for the bb-api-subscription-key request header in calls to the API: Step 3 - Activate the SKY API Console\nThe SKY API Console is a Blackbaud application built into the Endpoint Reference that can be used to test the SKY API. Before jumping in to build your own applications, we recommend you add the SKY API Console to your or your customer's tenant to aid with testing and development. To access a tenant's data, the SKY API Console, must be approved by a tenant administrator. For Blackbaud customers, a tenant administrator is a user within the organization that is part of the Supervisor security group. This may include Partners or API subscribers that have their own dedicated tenant, or are Supervisor users in their customer's tenant. Administrators provide approval for applications, including the SKY API Console, by activating the application within the Applications area of the product.\nTo activate the SKY API Console, the tenant administrator needs to do the following: Copy the SKY API Console Application ID:A056CA6B-A3A8-4AC7-B325-997666306E52 Visit the Control Panel, Applications area of the product. Select Add application, paste the SKY API Console Application ID, and select Save. Once added, The SKY API Console will appear in the list of activated applications for the tenant. Important! The same process can be followed to activate additional applications for your tenant. Simply substitute the application ID for the one provided in the My Applications area of your Developer Account to add your own application, or use the application ID provided to you by a Partner or third party developer that you know and trust. Step 4 - Explore the Endpoint Reference\nNow, you are ready to explore the endpoints available to you! Open the Endpoint Reference and select an API. A list of endpoints and operations appears.\nSelect an endpoint from the list.\nReview the information in the reference, including the Request URL, Request parameters, Request headers, response codes, sample JSON data, and Code samples. Step 5 - Try it!\nWhen you are signed in, you can test the SKY API with the SKY API Console. From an Endpoint Reference, click Try it.\nFor example, in the Constituent Endpoint Reference, select the Constituent (Get) endpoint and click Try it. This enables the SKY API Console. Under Query parameters, enter a sample parameter. For example, enter 280 for the constituentId parameter.\nUnder Headers, select the show/hide icon in the bb-api-subscription-key field. The value reflects the selected subscription key from the Authorization section.\nNote: The Request URL and HTTP request change based on the values for the parameter and request header field values.\nHow does the SKY API Console security work? SKY API Console Security When your subscription was approved, Blackbaud added your developer account as a user within the Developer Sandbox tenant. This sandbox tenant represents a sample database that you can access through the SKY API Console.\nWe use OAuth 2.0 to secure the API. This ensures that only valid users have access and that they can only access resources to which they are entitled. Before the SKY API Console sends the request to the endpoint, it must obtain authorization from a valid user (you) to access the data within the Developer Sandbox tenant. Under Authorization, select Authorization code in the Blackbaud OAuth 2.0 Service field. The Blackbaud Authorization Service displays a SKY API Console pop-up window. Select a tenant. Approved API subscribers with access to their own dedicated tenant need to activate the SKY API Console as an approved application. Click Authorize. This gives the SKY API Console access to your SKY API data for the selected tenant.\nAfter you approve the SKY API Console to access the API data for your Blackbaud developer account, the HTTP request is populated with the Authorization:Bearer header. This represents the access token for the request. After you have a bearer token and configure the values for the URI parameters, click Send to submit the request. The response includes a response status, latency, and content including JSON data for the requested endpoint. Step 6 - Next steps Learn how Authorization works, including the Authorization Code Flow and associated tutorials.\nRegister your application to access the SKY API.\nReview our support resources including our Changelog, Issues, Ideas, and FAQ.\nClone our code samples that demonstrate the Authorization Code Flow and SKY UX, Blackbaud’s next-generation user-experience framework.\nJoin our Developer Community, and subscribe to stay up-to-date with the latest hot topics and announcements. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Support",
   "description": "Tools and knowledge to help you along your way.",
   "order": 300,
   "published": true,
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": false,
   "title": "Support",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Support",
   "abspath": "support/index.md",
   "uri": "/support/",
   "nav_links": [
    {
     "layout": "layout-container",
     "name": "Changelog",
     "description": "Information on additions, removals, and bug fixes of the API.",
     "order": 100,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-file-text-o",
     "back_to_top": true,
     "title": "Changelogs",
     "APIs": [
      {
       "description": "Monitor this page to keep up with common changes shared across all our APIs.",
       "icon": "fa-cloud",
       "location": "shared",
       "title": "Shared"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the Accounts Payable API.",
       "icon": "fa-university",
       "location": "ap",
       "title": "Accounts Payable"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the Constituent API.",
       "icon": "fa-user",
       "location": "constituent",
       "title": "Constituent"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the Fundraising API.",
       "icon": "fa-line-chart",
       "location": "fundraising",
       "title": "Fundraising (Beta)"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the General Ledger API.",
       "icon": "fa-book",
       "location": "gl",
       "title": "General Ledger"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the Gift API.",
       "icon": "fa-gift",
       "location": "gift",
       "title": "Gift (Beta)"
      }
     ],
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog",
     "abspath": "support/changelog/index.md",
     "uri": "/support/changelog/",
     "nav_links": [
      {
       "layout": "layout-sidebar",
       "name": "Accounts Payable",
       "description": "Information on additions and changes for the Accounts Payable API.",
       "order": 300,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-university",
       "back_to_top": true,
       "title": "Accounts Payable Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Ap",
       "abspath": "support/changelog/ap/index.md",
       "uri": "/support/changelog/ap/",
       "text": " Accounts Payable\nMonitor this page to keep up with the Accounts Payable API latest changes and SKY API service releases.\n2016-12-06\nNew Added the following endpoints: Operation Method Route Invoice custom field (List) GET /invoices/customfields Vendor custom field (List) GET /vendors/customfields Added new custom field entities to the following endpoints: Operation Method Route Invoice POST /invoices Invoice GET /invoices/{invoice_id} Vendor POST /vendors Vendor GET /vendors/{vendor_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes November 2016\n2016-11-14\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following change:\nAll responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes October 2016\n2016-10-12\nChanged\nFor consistency across APIs, we implemented the following changes: All responses to POST requests changed from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields changed from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice 2016-10-04\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following changes: All responses to POST requests will change from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields will change from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice August 2016\n2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Vendor (List) GET /vendors Invoice (List) GET /invoices 2016-08-04\nNew\nThe Accounts Payable API is now available. Use this API to manage accounts payable, including vendors and invoices. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Constituent",
       "description": "Information on additions and changes for the Constituent API.",
       "order": 100,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-user",
       "back_to_top": true,
       "title": "Constituent Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Constituent",
       "abspath": "support/changelog/constituent/index.md",
       "uri": "/support/changelog/constituent/",
       "text": " Constituent\nMonitor this page to keep up with the Constituent API latest changes and SKY API service releases.\n2017-02-23\nChanged The Constituent list endpoint now includes an optional custom_field_category parameter to retrieve constituents only if their active custom fields match specified custom field categories.\nThe Fundraiser list (Single constituent) endpoint now returns the appropriate value for the constituent_id field. 2017-02-09\nChanged The major and minor properties on the education entity have been updated to return an array of strings. They have been renamed majors and minors.\nThe subject_of_study property on the education entity is no longer returned in the major property. Instead, it uses a dedicated property for UK-formatted databases.\nThe Address (Create) endpoint no longer requires the country property. When country is not provided, the endpoint uses the organization's default country configuration.\nThe country property on the address entity now accepts a country ID, name, or abbreviation. The property uses preferential selection to match against ID first, then name, and then abbreviation.\nThe Ratings list (Single constituent) endpoint now includes an optional most_recent_only parameter to retrieve only the most recent rating for each category. New Operation Method Route Countries (Get) GET /countries Education (Create) POST /educations Education (Edit) PATCH /educations/{education_id} Education (Delete) DELETE /educations/{education_id} Education schools (Get) GET /educations/schools Education types (Get) GET /educations/types Education statuses (Get) GET /educations/statuses Education subjects (Get) GET /educations/subjects Education degrees (Get) GET /educations/degrees Education departments (Get) GET /educations/departments Education degree classes (Get) GET /educations/degreeclasses Education faculties (Get) GET /educations/faculties 2017-01-31\nAnnouncement: Breaking Changes Planned for Constituent API\nWe are updating some properties on the education entity to improve overall feature parity and to support upcoming POST and PATCH education endpoints in the Constituent API. The major and minor properties will both be updated to return an array of strings. They will also be renamed majors and minors.\nThe subject_of_study property will no longer be returned in the major property. Instead, it will use a dedicated property for UK-formatted databases. 2017-01-11\nChanged\nOn the Address (Create) endpoint, we updated the do_not_mail and preferred properties to set the default value to false when the properties are not supplied in the request body.\n2017-01-10\nChanged\nWe added the campus, known_name, and social_organization properties to the education entity.\n2017-01-06\nChanged We updated the Constituent custom field list (Single constituent) endpoint to populate the date_added and date_modified properties. We updated the Constituent code list (Single constituent) endpoint to populate the inactive, date_added, and date_modified properties. December 2016\n2016-12-12\nNew\nAdded the following endpoint: Operation Method Route Rating category values (Get) GET /ratings/categories/values Changed We changed the format of the name property on the Constituent (Get) endpoint to \"FirstName LastName\" for consistency with the Constituent list endpoint. We updated the Email address (Edit) and Online presence (Edit) endpoints to respect the type property. We changed the Rating (Create) endpoint to require the \"source\" property for categories that have a source. November 2016\n2016-11-23\nChanged We updated the Constituent (Create), Constituent (Edit), Constituent (Get), and Constituent list endpoints to ensure that the lookup_id, inactive, and gives_anonymously properties are respected and populated. We updated the Constituent (Edit) endpoint to appropriately respect Constituent Biographical Edit permissions. 2016-11-16\nChanged\nThe Constituent list endpoint now includes an option to filter constituents based on their associated constituent codes. The optional constituent_code query parameter returns constituents if any of the specified constituent codes match any of their active constituent codes. For example, constituent_code=Board Member&amp;constituent_code=Volunteer returns constituents with either \"Board Member\" or \"Volunteer\" constituent codes.\n2016-11-14\nNew\nAdded the following endpoints: Operation Method Route Constituent code list (All Constituents) GET /constituents/constituentcodes Constituent custom field list (All constituents) GET /constituents/customfields Changed We renamed all existing list endpoints to implement a new naming convention that better indicates whether the endpoints return data for a single constituent or for all constituents. Endpoints that return data for a single constituent are now postfixed with (Single constituent). Endpoints that return data for all constituents are now postfixed with (All constituents). The Address list (All constituents) endpoint no longer includes inactive addresses by default. To include inactive addresses, use the optional include_inactive parameter in the request. The Address list (All constituents) endpoint now populates the formatted_address property. We updated the following endpoints to appropriately respect constituent record-level security: Operation Method Route Address (List) GET /addresses Email address (List) GET /emailaddresses Online presence (List) GET /onlinepresences Phone (List) GET /phones October 2016\n2016-10-20\nNew\nAdded the following endpoints: Operation Method Route Address (List)* GET /addresses Email address (List)* GET /emailaddresses Online presence (List)* GET /onlinepresences Phone (List)* GET /phones * The new endpoints assume the names of existing endpoints, which were renamed in the endpoint reference. The previous Address (List) is now Constituent address (List); the previous Email address (List) is now Constituent email address (List); the previous Online presence (List) is now Constituent online presence (List); and the previous Phone (List) is now Constituent phone (List). Changed\nWe added the date_added and date_modified properties to the address, email address, online presence, and phone entities.\n2016-10-17\nChanged\nThe fundraisers property on the action entity now contains an array of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\nNew\nAdded the following endpoints: Operation Method Route Action custom field (List) GET /actions/{action_id}/customfields Action custom field (Create) POST /actions/customfields Action custom field (Edit) PATCH /actions/customfields/{custom_field_id} Action custom field (Delete) DELETE /actions/customfields/{custom_field_id} Action custom field categories (Get) GET /actions/customfields/categories Action custom field category values (Get) GET /actions/customfields/categories/values 2016-10-03\nNew\nAdded the following endpoints: Operation Method Route Prospect status (Get) GET /constituents/{constituent_id}/prospectstatus Fundraiser (List) GET /constituents/{constituent_id}/fundraisers September 2016\n2016-09-28\nChanged The Constituent (List) endpoint now includes the option to select specific properties on its return object by using the optional fieldsquery parameter. This can reduce the response payload size and improve the response time.\nThe Constituent (List) endpoint no longer returns deceased constituents by default. Instead, they are included by setting the new include_deceased option to true.\nThe Communication preference (List) endpoint can now be paginated using the new limit and offset query parameters. If not specified, the default limit is 10000.\nWe changed the following query string parameters to snake case:\nincludeInactive is now include_inactive on Constituent (List), Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName is now category_name on Constituent custom field category values (Get).\nsearchText is now search_text on Constituent (Search). 2016-09-27\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the fundraisers property on the action entity so that it contains a list of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\n2016-09-23\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the query string parameter includeInactive to include_inactive on the Constituent (List) endpoint.\n2016-09-14\nAnnouncement: Breaking Changes Planned for Constituent API The Constituent (List) endpoint will no longer return deceased constituents by default. Instead, they will be included by setting a new include_deceased option to true.\nWe will change the following query string parameters to snake case:\nincludeInactive will be include_inactive on Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName will be category_name on Constituent custom field category values (Get).\nsearchText will be search_text on Constituent (Search). New\nAdded the following endpoints: Operation Method Route Rating sources (Get) GET /ratings/sources Rating categories (Get) GET /ratings/categories Action attachment (Edit) PATCH /actions/attachments/{attachmentId} Action attachment (Delete) DELETE /actions/attachments/{attachmentId} Constituent attachment (Edit) PATCH /constituents/attachments/{attachmentId} Constituent attachment (Delete) DELETE /constituents/attachments/{attachmentId} Changed\nNew tags included in the request will be automatically added to the Document Tags table when adding or updating attachments.\n2016-09-07\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Edit) PATCH /communicationpreferences/{communicationPreferenceId} Rating (Create) POST /ratings Rating (Edit) PATCH /ratings/{ratingId} Rating (Delete) DELETE /ratings/{ratingId} Changed\nWe added the lookup_id property to the search results entity.\n2016-09-02\nChanged\nAll POST endpoints now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the previous string response.\nAugust 2016\n2016-08-31\nNew\nAdded the following endpoints: Operation Method Route Action attachment (List) GET /actions/{actionId}/attachments Action attachment (Create) POST /actions/attachments Changed We changed the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments. The constituentId is now expected in the request body as parent_id.\nThe Constituent (Create) endpoint now supports adding a constituent with the following child entity properties: address, phone number, email address, and online presence.\nWe updated the Constituent (Edit) endpoint to include marital_status, deceased_date, former_name, title_2, and suffix_2 as available PATCH request body properties. 2016-08-29\nAnnouncement: Breaking Changes Planned for Constituent API\nAll POST endpoints will now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the current string response.\n2016-08-26\nChanged We renamed the proposal_id property to opportunity_id on actions to be consistent with product verbiage. The Constituent (List) endpoint no longer includes inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request. Announcement: Breaking Changes Planned for Constituent API\nWe will change the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments.\n2016-08-22\nNew\nAdded the following endpoints: Operation Method Route Currency configuration (Get) GET /currencyconfiguration Changed The data type assigned to the value property on the rating entity was changed from a string to an object. Previously, all values were returned as strings that needed to be parsed (by the requestor) into the intended types. Currently, the rating value will be returned with its data type intact based on the type with the following mapping: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. datetime Defines the rating value as a string JSON data type in ISO-8601 format: 2015-09-18T00:00:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. We corrected an issue with the postal_code filter within the Constituent (List) endpoint where incorrect values were returned if the postal codes filter listed multiple postal codes that were separated by commas or if postal codes contained leading space characters. Announcement: Breaking Changes Planned for Constituent API We will rename the constituent_id property to parent_id to support additional attachment areas such as action attachments.\nWe will rename the proposal_id property to opportunity_id on actions to be consistent with product verbiage. 2016-08-18\nAnnouncement: Breaking Changes Planned for Constituent API\nThe Constituent (List) endpoint will no longer include inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request.\n2016-08-16\nAnnouncement: Breaking Changes Planned for Constituent API\nThe data type assigned to the value property on the rating entity will be changed from a string to an object. As it stands today, all values are returned as a string, which must then be parsed (by the requestor) into the intended type. After release, the Rating value will be returned with its data type intact.\n2016-08-11\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Create) POST /communicationpreferences Communication preference (Delete) DELETE /communicationpreferences/{communicationPreferenceId} Communication preferences (Get) GET /communicationpreferences Changed We added start and end to the communication preference entity to represent optional start and end dates.\nWe added the ability to retrieve inactive rating records by including a new, optional includeInactive parameter in the request. 2016-08-03\nNew\nAdded the following endpoints: Operation Method Route Communication preference (List) GET /constituents/{constituentId}/communicationpreferences Changed We removed boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replaced them with a single value property for use with any type on the custom field entity.\nWe added the gpa, class_of_degree, faculty, department, and registration_number properties to the education entity.\nWe added the ability to paginate search results by including a new, optional limit and offset parameters in the request.\nWe added the ability to retrieve inactive address records by including a new, optional includeInactive parameter in the request. July 2016\n2016-07-29\nAnnouncement: Breaking Changes Planned for Constituent API We will remove boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replace them with a single value property for use with any type on the custom field entity.\nThis change is planned to take effect on Monday, August 1st. 2016-07-27\nAdded the following endpoints: Operation Method Route Constituent (Edit) PATCH /constituents/{constituentId} 2016-07-22\nNew\nAdded the following endpoints: Operation Method Route Rating (List) GET /constituents/{constituentId}/ratings/ Constituent custom field (Create) POST /constituents/customfields/ Constituent custom field (Edit) PATCH /constituents/customfields/{customFieldId} Constituent custom field (Delete) DELETE /constituents/customfields/{customFieldId} Constituent custom field category values (Get) GET /constituents/customfields/categories/values Changed\nWe added the date_added, date_modified, title_2, suffix_2, marital_status, deceased_date properties to the constituent entity.\n2016-07-18\nNew\nAdded the following endpoint: Operation Method Route Constituent (Create) POST /constituents Changed\nWe removed the business property from the constituent entity.\n2016-07-07\nChanged We renamed kind to type and types to tags on the attachment entity.\nWe renamed nickname to preferred_name on the constituent entity. 2016-07-01\nNew\nAdded the following endpoints: Operation Method Route First gift (Get) GET /constituents/{constituentId}/givingsummary/first Latest gift (Get) GET /constituents/{constituentId}/givingsummary/latest Greatest gift (Get) GET /constituents/{constituentId}/givingsummary/greatest Constituent custom field categories (Get) GET /constituents/customfields/categories Titles (Get) GET /titles Suffixes (Get) GET /suffixes Marital statuses (Get) GET /maritalstatuses June 2016\n2016-06-30\nAnnouncement: Breaking Changes Planned for Constituent API We will rename kind to type and types to tags on the attachment entity.\nWe will rename nickname to preferred_name on the constituent entity.\nThis change is planned to take effect on Wednesday, July 6. 2016-06-27\nNew Added the following endpoint: Operation Method Route Address (Edit) PATCH /addresses/{addressId} Added the ability to retrieve inactive email address, online presence, and phone records by including a new, optional includeInactive parameter in the request. 2016-06-20\nChanged\nWe updated the Constituent (List) endpoint to include a new, optional postal_code parameter which provides the ability to filter constituents by postal code based on their preferred address. The parameter value supports multiple postal codes separated by commas. Postal codes will match on a constituent if the preferred address postal code begins with one of the specified filter postal codes. For example, given the query postal_code=99577,10001, the response could contain constituents whose preferred address has a postal code of 99577-0727 or 10001.\n2016-06-15\nNew\nAdded the following endpoint: Operation Method Route Address (Delete) DELETE /addresses/{addressId} Changed\nWe added a versioning indicator to the Constituent API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/constituent/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for Constituent API We will be adding a versioning indicator to the Constituent API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/constituent/v1.\nThis change is planned to take effect on Wednesday, June 15. 2016-06-09\nNew\nAdded the following endpoint: Operation Method Route Address (Create) POST /addresses 2016-06-06\nNew\nAdded the following endpoints: Operation Method Route Lifetime giving (Get) GET /constituents/{constituentId}/givingsummary/lifetimegiving Membership (List) GET /constituents/{constituentId}/memberships 2016-06-01\nNew\nAdded the following endpoints: Operation Method Route Action types (Get) GET /actiontypes Action status types (Get) GET /actionstatustypes May 2016\n2016-05-27\nNew Added the following endpoints: Operation Method Route Note types (Get) GET /notetypes Added a General Ledger changelog to help you keep up with General Ledger API changes. 2016-05-24\nNew\nAdded the following endpoints: Operation Method Route Address types (Get) GET /addresstypes Changed\nWe renamed send_mail to do_not_mail on the address entity. Additionally, the boolean logic has been switched.\n2016-05-20\nAnnouncement: Breaking Changes Planned for Constituent API We will rename send_mail to do_not_mail on the address entity. Additionally, the boolean logic will be switched.\nWe will remove the business property from the constituent entity. New\nAdded the following endpoints: Operation Method Route Phone (Create) POST /phones Phone (Edit) PATCH /phones/{phoneId} Phone (Delete) DELETE /phones/{phoneId} Phone types (Get) GET /phonetypes Email address types (Get) GET /emailaddresstypes Online presence types (Get) GET /onlinepresencetypes Constituent code types (Get) GET /constituentcodetypes Changed\nWe implemented the following breaking changes: We removed the following address properties:\nprimary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We renamed the address to formatted_address. 2016-05-16\nAnnouncement: Breaking Changes Planned for Constituent API We will remove the following address properties: primary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We will remove the business property from the constituent entity. 2016-05-13\nNew We updated the Constituent (List) endpoint to include a new, optional date_added parameter which provides the ability to poll for recently added constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by date added in ascending order. We updated the Constituent (List) endpoint to include a new, optional last_modified parameter which provides the ability to poll for recently changed constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by last modified in ascending order.\nThe response includes a sort_token within the next_link property. sort_token represents a token filter for providing the next set of constituents, ordered by the last modified date.\nNote: The data returned by the Constituent (List) endpoint may have a latency of up to 15 minutes. 2016-05-06\nNew Added the following granular address properties: address_lines\ncity\nsuburb\nstate\npostal_code\ncounty\ncountry Addresses are returned by the following endpoints: Operation Method Route Constituent (Get) GET /constituents/{constituentId} Constituent (List) GET /constituents Address (List) GET /constituents/{constituentId}/addresses Added international address field support for the following countries. Field United States Canada United Kingdom Australia New Zealand address_lines city * suburb state ! postal_code county country * Australia - City or suburb data is returned with the city field for GET operations. Future endpoints will allow you to POST and PATCH address data. In these cases, you can use either the suburb or city properties, but not both at the same time. Providing both property values in future POST and PATCH operations will result in an error. ! Canada - Use the state property to track a Canadian Province Changed For consistency, constituent_id is included in the following entities: Address\nAttachment\nConstituent code\nEmail address\nOnline presence\nPhone\nCustom field\nName format\nProfile picture\nAction\nNote When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. Impacted constituent related endpoints include: Operation New Method Route Action (Edit) PATCH /actions/{actionId} Constituent code (Edit) PATCH /constituentcodes/{constituentCodeId} Email address (Edit) PATCH /emailaddresses/{emailAddressId} Note (Edit) PATCH /notes/{noteId} Online presence (Edit) PATCH /onlinepresences/{onlinePresenceId} We made changes to the custom field entity: To better denote the fields that can represent the \"value\" of the custom field, we appended a _value suffix to the field name for the following fields: constituent_id_value\ndate_value\ntext_value\nnumber_value\ncurrency_value\nboolean_value\ncode_table_value\nfuzzy_date_value Renamed the constituent_id property to parent_id to avoid confusion with the constituent_id_value field and to facilitate the re-use of this type across other entities. The parent_id represents the parent object's identifier. For example, in the case of constituent custom fields, the parent_id represents the constituent identifier. Added date and comment properties. April 2016\n2016-04-26\nAnnouncement: Breaking Changes Planned for Constituent API\nIn the coming days two breaking changes will be placed into effect: We will replace existing PUT endpoints to use PATCH, instead. Unlike PUT, PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. In this way the payload size is optimized. 2016-04-25\nNew Added the ability to create, edit, and delete email addresses: Operation Method Route Email address (Create) POST /emailaddresses Email address (Edit) PUT /emailaddresses/{emailAddressId} Email address (Delete) DELETE /emailaddresses/{emailAddressId} Added the ability to create and edit constituent codes: Operation Method Route Constituent code (Create) POST /constituentcodes Constituent code (Edit) PUT /constituentcodes/{constituentCodeId} Constituent code (Delete) DELETE /constituentcodes/{constituentCodeId} 2016-04-15\nNew\nAdded the ability to create, edit, and delete online presence entities: Operation Method Route Online presence (Create) POST /onlinepresences Online presence (Edit) PUT /onlinepresences/{onlinePresenceId} Online presence (Delete) DELETE /onlinepresences/{onlinePresenceId} 2016-04-08\nNew Added the ability to return a paginated list of constituents. For this release, the list will be ordered by name (last name for individuals, organization name for organizations). Operation Method Route Constituent (List) GET /constituents The endpoint supports the following the optional request parameters. Pagination is facilitated through the results via the top and skip parameters: Property Description top Optional. Integer. Represents the number of records to return. If not specified, the default is 100. The maximum allowed value is 500. skip Optional. Integer. Represents the number of records to skip. Changed Breaking change implemented for the Constituent API endpoints that return a collection of objects. This change allows us to be consistent in the representation of data collections and supports pagination for certain endpoints. See the 2016-03-31 changelog entry for a listing of affected endpoints. Constituent (Search) now supports the ability to search on an email address (same functionality as found in the RE NXT search feature). This expanded search will match against constituent email addresses when the searchText parameter is a valid email address. Note that we currently support exact match only. March 2016\n2016-03-31\nAnnouncement: Breaking Changes Planned for Constituent API endpoints\nIn the coming weeks, we will be standardizing the shape of our responses that return a collection of objects. This standardization will allow us to be consistent across each endpoint as well as to facilitate some future enhancements around pagination within those endpoints. The new representation of a collection will be a JSON object with two properties, a count which represents the total number of records meeting the criteria and a value property which represents the array of items for the current paged response.\nThis change is scheduled for release by April 8, 2016. How a collection response is formed today (Phones used as an example):\n{ \"phones\": [ { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} How the response will be formed after release:\n{ \"count\": 10, // total number of elements in the collection \"value\": [ // collection of items included in this response { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} * Please note that the response format may change before official release.\nEndpoints affected: Operation Method Route Action (List) GET /constituent/constituents/{constituentId}/actions Address (List) GET /constituent/constituents/{constituentId}/addresses Constituent attachment (List) GET /constituent/constituents/{constituentId}/attachments Constituent code (List) GET /constituent/constituents/{constituentId}/constituentcodes Constituent (Search) GET /constituent/constituents/search/?searchText={searchText} Constituent custom field (List) GET /constituent/constituents/{constituentId}/customfields Education (List) GET /constituent/constituents/{constituentId}/educations Email address (List) GET /constituent/constituents/{constituentId}/emailaddresses Name format (List) GET /constituent/constituents/{constituentId}/nameformats Note (List) GET /constituent/constituents/{constituentId}/notes Online presence (List) GET /constituent/constituents/{constituentId}/onlinepresences Phone (List) GET /constituent/constituents/{constituentId}/phones Relationship (List) GET /constituent/constituents/{constituentId}/relationships 2016-03-30\nNew Added the ability to return a list of relationships for a specified constituent. Operation Method Route Relationship (List) GET /constituents/{constituentId}/relationships Added the ability to return a constituent's profile picture. Operation Method Route Profile picture (Get) GET /constituents/{constituentId}/profilepicture Changed\nGET operations that return an attachment endpoint, such as Constituent attachment (List), return the following new properties: Property Description thumbnail_url Read only. String. Represents an image thumbnail URI for a picture to display. Endpoints that add or edit attachments ignore this property. file_size Read only. Long integer. The file size of the attachment in bytes. Only applies to physical attachments. Helps to determine how to display large images. Endpoints that add or edit attachments ignore this property. 2016-03-10\nNew Added the ability to return a list of education items for a specified constituent. Operation Method Route Education (List) GET /constituents/{constituentId}/educations Added the ability to edit and delete actions and notes for a constituent: Operation Method Route Action (Edit) PUT /actions/{actionId} Action (Delete) DELETE /actions/{actionId} Note (Edit) PUT /notes/{noteId} Note (Delete) DELETE /notes/{noteId} Changed OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization The base URL for the Constituent API has changed: Old New https://api.nxt.blackbaud-dev.com/constituents/ https://api.sky.blackbaud.com/constituent After creating an attachment for a constituent, the returned representation of an attachment now includes the attachment identifier (id). Values for the Constituent gender property now return the values using the correct casing (lowercase). GET and POST routes for actions and notes endpoints have changed: Operation Method Old Route New Route Action (Get) GET /{constituentId}/actions/{actionId} /actions/{actionId} Action (Create) POST /{constituentId}/actions /actions Note (Get) GET /{constituentId}/notes/{noteId} /notes/{noteId} Note (Create) POST /{constituentId}/notes /notes Deleted\nWe removed the following endpoints: GET Attachment\nGET Constituent code\nGET Custom field\nGET Email address\nGET Online presence\nGET Phone\nGET Primary business\nGET Spouse Older\n2015-10-20\nNew Added 3 new endpoints covering constituent attachments Get a list of constituent attachments\nGet a specific attachment for a constituent\nAdd an attachment for a constituent Note that currently, all attachment records are viewable through the SKY API, but only link attachments can be added. Changed Removed Author from the constituent note entity. The author is now inferred from the context of the user calling the SKY API. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Fundraising (Beta)",
       "description": "Information on additions and changes for the Fundraising API (Beta).",
       "order": 100,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-line-chart",
       "back_to_top": true,
       "title": "Fundraising (Beta) Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Fundraising",
       "abspath": "support/changelog/fundraising/index.html",
       "uri": "/support/changelog/fundraising/",
       "text": " Fundraising (Beta)\nMonitor this page to keep up with the Fundraising API (Beta) latest changes and SKY API service releases.\n2017-03-08\nNew\nThe Fundraising API has been released for a public beta. This API handles information related to the fundraising hierarchy, including the campaign, fund, and appeal entities: Campaigns set the overall objectives and initiatives for raising money, and they are typically the top tier of the fundraising hierarchy. For example, organizations can create campaigns to encompass fundraising efforts related to annual operating expenses, new buildings, or endowments.\nFunds represent the donor's intent for how to use or earmark a gift. For example, the gift can be intended for a specific cause or financial purpose. Funds are often linked to financial suites and indicate where to allocate a gift.\nAppeals are the sources and solicitations that bring in gifts, and they are typically the most granular piece of the fundraising hierarchy. Examples of appeals include direct mailings, online donation pages, phonathons, auctions, and events. The initial release contains endpoints to retrieve these entities by ID and to manage custom fields. For more information, check out the entity and endpoint references. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Gift (Beta)",
       "description": "Information on additions and changes for the Gift API (Beta).",
       "order": 100,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-gift",
       "back_to_top": true,
       "title": "Gift (Beta) Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Gift",
       "abspath": "support/changelog/gift/index.md",
       "uri": "/support/changelog/gift/",
       "text": " Gift (Beta)\nMonitor this page to keep up with the Gift API (Beta) latest changes and SKY API service releases.\n2017-03-08\nNew\nThe Gift API has been released for a public beta. This API handles information related to gifts, including related entities such as gift splits, gift fundraisers, and soft credits.\nThe initial release contains endpoints to retrieve a list of all gifts, to retrieve gifts by their IDs, and to manage attachments. For more information, check out the entity and endpoint references. "
      },
      {
       "layout": "layout-sidebar",
       "name": "General Ledger",
       "description": "Information on additions and changes for the General Ledger API.",
       "order": 200,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-book",
       "back_to_top": true,
       "title": "General Ledger Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Gl",
       "abspath": "support/changelog/gl/index.md",
       "uri": "/support/changelog/gl/",
       "text": " General Ledger\nMonitor this page to keep up with the General Ledger API latest changes and SKY API service releases.\n2017-01-18\nNew\nAdded the following endpoints: Operation Method Route Account GET /accounts/{account_id} Project GET /projects/{project_id} Account cashflows (List) GET /accounts/cashflows Account working capitals (List) GET /accounts/workingcapitals Account custom fields (List) GET /accounts/customfields December 2016\n2016-12-06\nNew Added the following endpoints: Operation Method Route Journal entry custom field (List) GET /journalentries/customfields Project custom field (List) GET /projects/customfields Budget GET /budgets Budget (List) GET /budgets/{scenario_id} Budget account (List) GET /budgets/{scenario_id}/accounts Ledger summary (List) GET /summary/{fiscal_year_id} Added new custom field entities to the following endpoints: Operation Method Route Project POST /projects Journal entry POST /journalentrybatches/{batch_id}/journalentries Journal entry batch GET /journalentrybatches/{batch_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values November 2016\n2016-11-14\nAnnouncement: Breaking Change Planned for General Ledger API\nFor consistency across APIs, we will implement the following changes: All responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties.\nThe following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values 2016-11-01\nNew\nAdded the following endpoints: Operation Method Route Create project (Post) POST /projects Create project contact (Post) POST /projects/{project_id}/contacts October 2016\n2016-10-06\nNew\nAdded the following endpoints: Operation Method Route Fiscal year (List) GET /fiscalyears Class (List) GET /classes Account structure GET /accounts/structure Account segment value (List) GET /accounts/segments Account code (List) GET /accounts/codes Account fund (List) GET /accounts/funds Project type (List) GET /projects/types Project status (List) GET /projects/statuses Project division (List) GET /projects/divisions Project department (List) GET /projects/departments Project location (List) GET /projects/locations Changed\nYou can now specify Class on journal entries (this affects all endpoints associated with journal entry batches).\nAugust 2016\n2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Transaction distribution (Search) GET /transactiondistributions Account (Search) GET /accounts Project (Search) GET /projects Journal entry batch (List) GET /journalentrybatches July 2016\n2016-07-05\nChanged\nWe implemented a previously announced, breaking change. We removed the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\nJune 2016\n2016-06-30\nAnnouncement: Breaking Change Planned for General Ledger API\nIn the coming days, a breaking change will be placed into effect. We will remove the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\n2016-06-22\nNew\nAdded the following endpoint: Operation Method Route Transaction distribution (Search) GET /transactiondistributions 2016-06-15\nChanged\nWe've added a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/generalledger/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for General Ledger API We will be adding a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/generalledger/v1.\nThis change is planned to take effect on Wednesday, June 15. May 2016\n2016-05-27\nNew Added a General Ledger getting started guide to help you make your first General Ledger API call with our interactive SKY API Console. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Shared",
       "description": "Common changes shared across all our APIs.",
       "order": 50,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-cloud",
       "back_to_top": true,
       "title": "Shared Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Shared",
       "abspath": "support/changelog/shared/index.md",
       "uri": "/support/changelog/shared/",
       "text": " Shared\nMonitor this page to keep up with common changes shared across all our APIs.\n2017-3-03\nNew\nThe SKY API developer site now offers commenting capability through Disqus. We encourage community involvement to improve our documentation. We will monitor comments just like we monitor feedback in our GitHub repository, and we will incorporate feedback to make our docs better. See something that is unclear? Want more detail? Leave a comment and let us know!\nOn the SKY API developer site, comments now appear at the bottom of most documentation pages, and buttons are available at the top of pages to take users to the comments.\nDecember 2016\n2016-12-02\nWe added a new Status link to the Support menu. This link takes you to our SKY API status page. The status page provides the current state of API availability, as well as specific details on downtime incidents. We also provide the option for you to subscribe to automatic incident notifications by email, SMS, or feed.\nOctober 2016\n2016-10-17\nLogos can now be associated with your applications. The logo is the icon that users will see on the consent form when they give an application authorization to use their product's account to access the API. Logos can be added to new and existing applications through the My Applications page. Application logo images must be: 512 by 512 pixels\nSmaller than 2MB\nPNG or JPEG format September 2016\n2016-09-22\nSKY API's support for CORS now includes accept and content-type in the list of accepted request headers. You can now specify these headers in API requests from within a browser.\nJuly 2016\n2016-07-08\nTo support approved API subscribers with access to their own dedicated tenants, we've added instructions for activating the SKY API Console\nto our Basics guide.\nJune 2016\n2016-06-27 When requesting an access token, you may now supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. This is an alternative to using the Authorization header. See Authorization Code Flow. Created a C# Auth Code Flow code sample and tutorial. 2016-06-09\nNew We've added the OAuth2 Implicit Flow for use in web browser and mobile apps where application secret confidentiality is not guaranteed. A new feature allows you to export API definitions in Swagger and WADL formats from within the SKY API Console. Use these files to generate client-side code by using tools such as Swagger Codegen. You can import these files into API client tools such as Postman and start calling the API in very little time. May 2016\n2016-05-27\nChanged\nWhen registering your application, we've relaxed the https requirement for whitelisted redirect URIs. To facilitate and shorten the development process, we now accept http://localhost:* (or, http://127.0.0.1:*) whitelisted web addresses to redirect to after users grant or deny permission for your app. You will no longer need to install a self-signed SSL certificate on your local machine when building your applications.\n2016-05-13\nNew\nA next_link property has been added to our paginated collection responses and represents the URI for the next page of results. This property takes into account any relevant pagination parameters, such as limit, offset, or last_modified, and date_added provided on the request.\n2016-05-06\nChanged limit and offset have replaced top and skip parameters for Pagination. Pagination behavior will remain unchanged. When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. April 2016\n2016-04-26\nPagination will be facilitated through the results via the use of limit and offset instead of top and skip parameters. Pagination behavior will remain unchanged.\nMarch 2016\n2016-03-15\nUpdates to code samples including Authorization Code Flow Tutorial and Barkbaud: Authorization Code Flow Tutorial Environment variables automatically load when the application starts. Tutorial instructions have been simplified accordingly.\nUsing AngularJS for display of Log in button, Log out button and constituent data.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. Barkbaud Environment variables automatically load when the application starts. README instructions have been simplified accordingly.\nBiographies, owner and medical history for each animal are now stored in a MongoDB database at mLab instead of Parse. The Parse database service will be retired on January 28, 2017.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. 2016-03-11\nUsage limits are now in effect. Exceeding the rate limit results in a 429 - Too Many Requests response status code. Exceeding the quota results in a 403 - Quota Exceeded response status code.\n2016-03-10\nChanged OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization Older\n2015-12-8\nNew The My Applications page now includes the ability to edit applications. Once registered, your application will automatically have access to the Developer Sandbox tenant. The Auth Code Flow Tutorial demonstrates how to create a small server-side application that negotiates authorization and access constituent data. Code Samples include Barkbaud which was introduced at bbcon 2015. Also included is the source code for the Auth Code Flow Tutorial. General Enhancements Enhanced FAQ, including new questions and references to new Auth Code Flow Tutorial and application management. 2015-11-20\nNew\nThe My Applications page and associated documentation provide self-service application registration for the purpose of accessing data via SKY API.\n2015-10-20\nChanged Improved handling of enumerations within the API. Enumeration values are now emitted using string representations instead of numeric representations. For example, Constituent.Type now returns individual or organization. Improved handling of default values within the SKY API. Previously, default values were not included in the JSON response. Values are now included in the payload. Enhanced sample response representations in the developer portal to account for enumeration and default value handling. Added a Support menu to the developer portal, with links to the Changelog, Issues, Ideas, and FAQ. "
      }
     ],
     "text": " Changelog Shared Monitor this page to keep up with common changes shared across all our APIs. Accounts Payable Monitor this page to keep up with the latest changes to the Accounts Payable API. Constituent Monitor this page to keep up with the latest changes to the Constituent API. Fundraising (Beta) Monitor this page to keep up with the latest changes to the Fundraising API. General Ledger Monitor this page to keep up with the latest changes to the General Ledger API. Gift (Beta) Monitor this page to keep up with the latest changes to the Gift API. "
    },
    {
     "layout": "layout-container",
     "name": "Community",
     "description": "Learn and get help from your peers in the Blackbaud Developer Community.",
     "order": 50,
     "showInNav": true,
     "published": true,
     "showInHeader": true,
     "title": "Developer Community",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Community",
     "abspath": "support/community/index.md",
     "uri": "/support/community/",
     "text": " "
    },
    {
     "layout": "layout-sidebar",
     "order": 300,
     "name": "FAQ",
     "description": "A listing of frequently asked questions and answers.",
     "icon": "fa fa-comment-o fa-4x",
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "FAQs",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Faq",
     "abspath": "support/faq/index.md",
     "uri": "/support/faq/",
     "text": " Comments Edit in GitHub Frequently Asked Questions\nLearn the answers to commonly asked questions, recommended patterns, and best practices for the SKY API.\nBasics\nHow do I get started?\nThe Getting Started guide and Authorization Code Flow tutorial demonstrate basic implementations of SKY API using easy-to-follow setup instructions.\nDo you have any code samples?\nSee Code Samples. Our Endpoint Reference contains code samples in multiple languages.\nI am seeing an issue, where can I get support?\nSee our Issues page for any existing issues. If you find a new issue, please contact us.\nAuthorization\nHow do I pass security credentials from my application to the SKY API?\nTo call the SKY API, your application will need to provide two things: Your developer subscription key - this key represents Blackbaud's permission for you to call the API, and it should be sent as part of the bb-api-subscription-key request header. An access token - this represents a Blackbaud customer's permission for you to access their data, and it should be sent as part of the authorization request header. This token is associated with the authenticated user's account and organization, and can only be used to access data to which the user has permission. For more information, see request headers.\nWhat is the recommended authorization flow for a browser-based app?\nIn applications where you cannot maintain the confidentiality of their Application secret, the most appropriate OAuth flow to use in this case is the Implicit Flow.\nBrowser-based (javascript) apps run entirely in the browser after loading the source code from a web page. Since the entire source code is available to the browser, they cannot maintain the confidentiality of their Application secret, so the secret is not used in this case.\nSee Authorization to learn about the OAuth flows that are supported.\nWhat is the recommended authorization flow for a native applications?\nLike browser-based apps, the most appropriate flow to use for a native applications (desktop and mobile devices) is the Implicit Flow.\nSee Authorization to learn about the OAuth flows that are supported.\nI want to create a script that adds new constituents to my database every day. Is there a way I can do this without having to open the browser and log in? (My username and password would preferably be set in the script.)\nThe SKY API doesn’t support basic authorization through username/password. Instead, obtain an access token through the Authorization Code Flow.\nWhen should my application initiate authorization?\nAuthorization begins when your application redirects the user's browser to our https://oauth2.apim.blackbaud.com/authorization Authorization endpoint. Exactly when you decide to make this request is up to you. You can request authorization when your application gathers initial information from the user, or when the user first attempts to access some data from the SKY API.\nSee Authorization.\nWhen I register my app, can I use localhost in my redirect URIs?\nYes. We allow you to register multiple redirect URIs with your application. For production, we require https, but to facilitate local development we allow http and the use of localhost or the localhost IP (127.0.0.1).\nSee Register your application and the Auth Code Flow tutorial.\nAfter redirection occurs, how can I track where authorization initiated?\nAfter the user grants (or denies) access to your application, we'll redirect the browser to the URI that you passed to us when you initiated the authorization process (this URI must exactly match one of the values you registered with your application).\nWe also support the OAuth 2.0 state parameter (described in Section 4.1.1 of the OAuth 2.0 spec), which allows you to provide some context to us that we will echo back to your redirect URI after the user grants (or denies) access to your application. We recommend that you use an opaque value and verify that it matches the value you provided when your app initiated authorization. In this way, you can prevent cross-site request forgeries as well as track where your application initiated the authorization flow. You can then further redirect the user's browser to the appropriate area within your application upon consent.\nSee Authorization.\nWhen must my application re-authenticate the user?\nIf both your access token and refresh token have expired, then you'll need to send the user back through the interactive authorization process. If your access token has expired but you have a valid refresh token, then you can simply exchange the refresh token for a new access token (and a new refresh token) non-interactively.\nSee Authorization.\nCORS\nDo you support cross-origin resource sharing to allow you to interact securely with our API from within the browser?\nYes, we've enabled CORS support in the SKY API. We allow GET, PUT, POST, PATCH, and DELETE methods, and we allow bb-api-subscription-key, authorization, accept, and content-type request headers.\nTokens\nWhen do my tokens expire?\nDuring the initial user-interactive authorization process, the authorization code sent to your application will expire in 5 minutes, which means you have a very short window of time in which to exchange the authorization code for an access token.\nAccess tokens will expire in 60 minutes, after which you can use the refresh token to obtain a new access token (and a new refresh token). For the Authorization Code Flow, refreshing an access token does not involve any user interaction, so your application can have indefinite connectivity to the SKY API once the user provides consent. Refresh tokens are longer-lived values that will eventually expire in 60 days, using a sliding window model. As long as your application connects at least once to the SKY API within the window, it will be able to retain connectivity to the customer's data.\nSee Token Expiration.\nMay I store access tokens in my application's database?\nYes, you may store access tokens and refresh tokens within your app, associated with your app's concept of a user (if applicable). When the user logs in with your application's credentials, you can check to see if you have an access token for that user and adjust your app's experience accordingly. For example, you may immediately route the user through the authorization process in order to obtain an access token, or disable functionality until the user provides consent.\nIf your application doesn't have the notion of user credentials, you can simply direct the user to log in with their Blackbaud credentials when they log into your application. We'll provide you with the user's access token and expiration details as part of the Token response during the authorization code flow.\nIn any case, be sure to store access tokens and refresh tokens securely in your system so that they aren't exposed to the public.\nSubscription keys\nWhat is the purpose of the subscription key?\nThe subscription key is associated with your developer account and must be provided as part of the bb-api-subscription-key header when calling the SKY API. It represents our permission for you to call the API, and we also use it to enforce usage limits (see Rate limits and Quotas) to ensure that the API performs well for everyone. We also aggregate API call analytics associated with your subscription to show you how your apps are performing within the Analytics area of the portal.\nSee Subscription.\nWhy do I have two subscription keys?\nWhen you obtain a subscription to the SKY API, we'll provide two keys (primary and secondary) that you can use when calling the API. Both keys are equally functional; we provide two keys to support rotation on your end.\nWe don't require you to rotate your subscription keys, and you can adopt whatever key rotation schedule and strategy that best fits your needs. If you do need to regenerate your subscription keys, you can do so from your profile.\nImportant! Subscription keys are associated with your developer account, and should NOT be shared with the public since it would allow someone else to impersonate you when calling the SKY API! My app\nHow do I register my application and get an OAuth 2.0 ID and secret?\nYou can register your app in the My Applications area to obtain the unique ID and secret, which will be used during the authorization process to obtain an access token to call the API.\nSee Managing your apps.\nMy application secret may have been compromised, what should I do?\nIf you believe your application's secret has been exposed, you should regenerate the secret and update your application to use the new value when calling the SKY API.\nWhat control does a Blackbaud customer have over my application?\nCustomers always have control over whether or not your application can access their data. An administrator within the customer's organization must first activate your app before any user will be able to use it, and at any time the administrator can deactivate or completely remove your application (deactivating is intended to reflect a short-term state where eventual re-activation is expected). If that happens, your application will not be able to obtain or refresh any access tokens to use when calling the API.\nIf your application is deactivated or removed, users will see the following message in the authorization process: “This application has not been approved by your administrator…” See Authorization.\nScopes\nWhat scopes do you support and how do I pass them in my authorization request?\nOAuth 2.0 Scopes are not yet supported within the SKY API. In the future, applications may be able to express intent via scopes but for now API access is always within the context of an authenticated user, which means that API access is limited to the user's security permissions. "
    },
    {
     "layout": "layout-container",
     "name": "Ideas",
     "description": "Provide feedback on how to improve the Blackbaud APIs and developer experience.",
     "order": 200,
     "published": true,
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "icon": "fa fa-lightbulb-o",
     "title": "Ideas",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInSearch": true,
     "breadcrumbs": "Support Ideas",
     "abspath": "support/ideas/index.md",
     "uri": "/support/ideas/",
     "text": " Ideas Have feedback on how to improve the SKY API developer experience? Add your idea below, or vote and comment on existing ideas. Your browser does not support iframes. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Issues",
     "description": "Information on additions, removals, and bug fixes of the API.",
     "order": 150,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-file-text-o",
     "back_to_top": true,
     "title": "Issues",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Issues",
     "abspath": "support/issues/index.md",
     "uri": "/support/issues/",
     "text": " Issues\nIf you find an issue, please contact us.\n2017-02-17\nResolved\nFor the issue reported earlier today about the Applications page, the functionality has been restored. 2017-02-17\nWe are aware of an issue on the Control Panel, Applications page in SKY API enabled Blackbaud products. The Applications page does not load. Previous applications you authorized do not appear. While they have not been deleted, during this time you may get an error message that your application doesn’t have access to any SKY API enabled Blackbaud products. API calls, however, are not impacted. We are working to resolve this issue as soon as possible, and will provide an update when functionality has been restored. 2016-11-14\nResolved\nFor the issue reported on 2016-10-20, the behavior of the attributes has been addressed so that they no longer fail to populate on returned address entities.\n2016-10-21\nService Resolved\nFor the issue reported earlier on 2016-10-21, the availability of the API has been restored.\nWe are aware of an issue that is currently disrupting the availability of the API. The disruption is related to a massive East Coast outage caused by a denial of service attack that is severely degrading Internet services. We are working with one of our DNS providers to restore service and will post another update when we have more information. 2016-10-20\nWe are aware of an issue with the new Address (List) where the formatted_address and inactive attributes are not populated on the returned address entities. We are addressing this issue and will post an update when we fix it.\n2016-10-17\nService Resolved\nFor the intermittent issue reported on 2016-10-15, service has been restored as of Monday, October 17th, 2016 at 9:30 AM EDT (1:30 PM UTC).\n2016-10-15\nWe are aware of an intermittent issue affecting a subset of Raiser's Edge NXT tenants, whereby Constituent API requests result in exceedingly long response times or timeouts. We are researching the issue and will post another update soon when we have more information.\n2016-08-01\nResolved: Firefox Hangs on Authorization\nThe issue has been resolved as of Monday, August 1st, 2016 at 3:20 PM EDT (7:20 PM UTC).\n2016-07-29\nFirefox Hangs on Authorization\nFirefox hangs when loading the SKY API OAuth 2.0 Authorization endpoint https://oauth2.apim.blackbaud.com/authorization.\nWe are currently researching the issue. Stay tuned for details.\n2016-04-22\nSKY API Console autofill bug\nOn specific SKY API Console pages that display an operation which contains either a query parameter or header data entry field before the bb-api-subscription-key control, Chrome mistakenly treats the bb-api-subscription-key control as a password. As a result Chrome treats the page as a login page. If the developer elects to save their a user name and password when prompted, Chrome incorrectly auto-fills the page the next time the page loads : Workaround steps Open Settings in Chrome\nClick the Show advanced settings link at the bottom of the Settings page.\nWithin the Passwords and forms section, click Manage passwords.\nDelete any mistakenly saved passwords for developer.sky.blackbaud.com. 2016-04-04\nResolved: My Applications page not displaying within Microsoft Edge browsers\nThe issue has been resolved as of Monday, April 4, 2016 at 8:00 AM EDT (Monday, April 4, 2016 at 12:00 PM UTC).\n2016-03-15\nMy Applications page not displaying within Microsoft Edge browsers\nWe have noticed an issue with the My Applications page not displaying within Microsoft Edge browsers. We are currently researching the issue. Stay tuned for details. In the meantime, we recommend using other browsers for managing your applications. "
    },
    {
     "layout": "layout-container",
     "name": "Status",
     "description": "Check the SKY API status and sign up for notifications.",
     "order": 400,
     "showInNav": true,
     "published": true,
     "showInHeader": true,
     "title": "Status",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Status",
     "abspath": "support/status/index.md",
     "uri": "/support/status/",
     "text": " "
    }
   ],
   "text": " "
  },
  {
   "layout": "layout-container",
   "name": "Changelog",
   "description": "Information on additions, removals, and bug fixes of the API.",
   "order": 100,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-file-text-o",
   "back_to_top": true,
   "title": "Changelogs",
   "APIs": [
    {
     "description": "Monitor this page to keep up with common changes shared across all our APIs.",
     "icon": "fa-cloud",
     "location": "shared",
     "title": "Shared"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the Accounts Payable API.",
     "icon": "fa-university",
     "location": "ap",
     "title": "Accounts Payable"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the Constituent API.",
     "icon": "fa-user",
     "location": "constituent",
     "title": "Constituent"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the Fundraising API.",
     "icon": "fa-line-chart",
     "location": "fundraising",
     "title": "Fundraising (Beta)"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the General Ledger API.",
     "icon": "fa-book",
     "location": "gl",
     "title": "General Ledger"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the Gift API.",
     "icon": "fa-gift",
     "location": "gift",
     "title": "Gift (Beta)"
    }
   ],
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog",
   "abspath": "support/changelog/index.md",
   "uri": "/support/changelog/",
   "nav_links": [
    {
     "layout": "layout-sidebar",
     "name": "Accounts Payable",
     "description": "Information on additions and changes for the Accounts Payable API.",
     "order": 300,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-university",
     "back_to_top": true,
     "title": "Accounts Payable Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Ap",
     "abspath": "support/changelog/ap/index.md",
     "uri": "/support/changelog/ap/",
     "text": " Accounts Payable\nMonitor this page to keep up with the Accounts Payable API latest changes and SKY API service releases.\n2016-12-06\nNew Added the following endpoints: Operation Method Route Invoice custom field (List) GET /invoices/customfields Vendor custom field (List) GET /vendors/customfields Added new custom field entities to the following endpoints: Operation Method Route Invoice POST /invoices Invoice GET /invoices/{invoice_id} Vendor POST /vendors Vendor GET /vendors/{vendor_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes November 2016\n2016-11-14\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following change:\nAll responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes October 2016\n2016-10-12\nChanged\nFor consistency across APIs, we implemented the following changes: All responses to POST requests changed from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields changed from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice 2016-10-04\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following changes: All responses to POST requests will change from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields will change from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice August 2016\n2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Vendor (List) GET /vendors Invoice (List) GET /invoices 2016-08-04\nNew\nThe Accounts Payable API is now available. Use this API to manage accounts payable, including vendors and invoices. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Constituent",
     "description": "Information on additions and changes for the Constituent API.",
     "order": 100,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-user",
     "back_to_top": true,
     "title": "Constituent Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Constituent",
     "abspath": "support/changelog/constituent/index.md",
     "uri": "/support/changelog/constituent/",
     "text": " Constituent\nMonitor this page to keep up with the Constituent API latest changes and SKY API service releases.\n2017-02-23\nChanged The Constituent list endpoint now includes an optional custom_field_category parameter to retrieve constituents only if their active custom fields match specified custom field categories.\nThe Fundraiser list (Single constituent) endpoint now returns the appropriate value for the constituent_id field. 2017-02-09\nChanged The major and minor properties on the education entity have been updated to return an array of strings. They have been renamed majors and minors.\nThe subject_of_study property on the education entity is no longer returned in the major property. Instead, it uses a dedicated property for UK-formatted databases.\nThe Address (Create) endpoint no longer requires the country property. When country is not provided, the endpoint uses the organization's default country configuration.\nThe country property on the address entity now accepts a country ID, name, or abbreviation. The property uses preferential selection to match against ID first, then name, and then abbreviation.\nThe Ratings list (Single constituent) endpoint now includes an optional most_recent_only parameter to retrieve only the most recent rating for each category. New Operation Method Route Countries (Get) GET /countries Education (Create) POST /educations Education (Edit) PATCH /educations/{education_id} Education (Delete) DELETE /educations/{education_id} Education schools (Get) GET /educations/schools Education types (Get) GET /educations/types Education statuses (Get) GET /educations/statuses Education subjects (Get) GET /educations/subjects Education degrees (Get) GET /educations/degrees Education departments (Get) GET /educations/departments Education degree classes (Get) GET /educations/degreeclasses Education faculties (Get) GET /educations/faculties 2017-01-31\nAnnouncement: Breaking Changes Planned for Constituent API\nWe are updating some properties on the education entity to improve overall feature parity and to support upcoming POST and PATCH education endpoints in the Constituent API. The major and minor properties will both be updated to return an array of strings. They will also be renamed majors and minors.\nThe subject_of_study property will no longer be returned in the major property. Instead, it will use a dedicated property for UK-formatted databases. 2017-01-11\nChanged\nOn the Address (Create) endpoint, we updated the do_not_mail and preferred properties to set the default value to false when the properties are not supplied in the request body.\n2017-01-10\nChanged\nWe added the campus, known_name, and social_organization properties to the education entity.\n2017-01-06\nChanged We updated the Constituent custom field list (Single constituent) endpoint to populate the date_added and date_modified properties. We updated the Constituent code list (Single constituent) endpoint to populate the inactive, date_added, and date_modified properties. December 2016\n2016-12-12\nNew\nAdded the following endpoint: Operation Method Route Rating category values (Get) GET /ratings/categories/values Changed We changed the format of the name property on the Constituent (Get) endpoint to \"FirstName LastName\" for consistency with the Constituent list endpoint. We updated the Email address (Edit) and Online presence (Edit) endpoints to respect the type property. We changed the Rating (Create) endpoint to require the \"source\" property for categories that have a source. November 2016\n2016-11-23\nChanged We updated the Constituent (Create), Constituent (Edit), Constituent (Get), and Constituent list endpoints to ensure that the lookup_id, inactive, and gives_anonymously properties are respected and populated. We updated the Constituent (Edit) endpoint to appropriately respect Constituent Biographical Edit permissions. 2016-11-16\nChanged\nThe Constituent list endpoint now includes an option to filter constituents based on their associated constituent codes. The optional constituent_code query parameter returns constituents if any of the specified constituent codes match any of their active constituent codes. For example, constituent_code=Board Member&amp;constituent_code=Volunteer returns constituents with either \"Board Member\" or \"Volunteer\" constituent codes.\n2016-11-14\nNew\nAdded the following endpoints: Operation Method Route Constituent code list (All Constituents) GET /constituents/constituentcodes Constituent custom field list (All constituents) GET /constituents/customfields Changed We renamed all existing list endpoints to implement a new naming convention that better indicates whether the endpoints return data for a single constituent or for all constituents. Endpoints that return data for a single constituent are now postfixed with (Single constituent). Endpoints that return data for all constituents are now postfixed with (All constituents). The Address list (All constituents) endpoint no longer includes inactive addresses by default. To include inactive addresses, use the optional include_inactive parameter in the request. The Address list (All constituents) endpoint now populates the formatted_address property. We updated the following endpoints to appropriately respect constituent record-level security: Operation Method Route Address (List) GET /addresses Email address (List) GET /emailaddresses Online presence (List) GET /onlinepresences Phone (List) GET /phones October 2016\n2016-10-20\nNew\nAdded the following endpoints: Operation Method Route Address (List)* GET /addresses Email address (List)* GET /emailaddresses Online presence (List)* GET /onlinepresences Phone (List)* GET /phones * The new endpoints assume the names of existing endpoints, which were renamed in the endpoint reference. The previous Address (List) is now Constituent address (List); the previous Email address (List) is now Constituent email address (List); the previous Online presence (List) is now Constituent online presence (List); and the previous Phone (List) is now Constituent phone (List). Changed\nWe added the date_added and date_modified properties to the address, email address, online presence, and phone entities.\n2016-10-17\nChanged\nThe fundraisers property on the action entity now contains an array of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\nNew\nAdded the following endpoints: Operation Method Route Action custom field (List) GET /actions/{action_id}/customfields Action custom field (Create) POST /actions/customfields Action custom field (Edit) PATCH /actions/customfields/{custom_field_id} Action custom field (Delete) DELETE /actions/customfields/{custom_field_id} Action custom field categories (Get) GET /actions/customfields/categories Action custom field category values (Get) GET /actions/customfields/categories/values 2016-10-03\nNew\nAdded the following endpoints: Operation Method Route Prospect status (Get) GET /constituents/{constituent_id}/prospectstatus Fundraiser (List) GET /constituents/{constituent_id}/fundraisers September 2016\n2016-09-28\nChanged The Constituent (List) endpoint now includes the option to select specific properties on its return object by using the optional fieldsquery parameter. This can reduce the response payload size and improve the response time.\nThe Constituent (List) endpoint no longer returns deceased constituents by default. Instead, they are included by setting the new include_deceased option to true.\nThe Communication preference (List) endpoint can now be paginated using the new limit and offset query parameters. If not specified, the default limit is 10000.\nWe changed the following query string parameters to snake case:\nincludeInactive is now include_inactive on Constituent (List), Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName is now category_name on Constituent custom field category values (Get).\nsearchText is now search_text on Constituent (Search). 2016-09-27\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the fundraisers property on the action entity so that it contains a list of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\n2016-09-23\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the query string parameter includeInactive to include_inactive on the Constituent (List) endpoint.\n2016-09-14\nAnnouncement: Breaking Changes Planned for Constituent API The Constituent (List) endpoint will no longer return deceased constituents by default. Instead, they will be included by setting a new include_deceased option to true.\nWe will change the following query string parameters to snake case:\nincludeInactive will be include_inactive on Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName will be category_name on Constituent custom field category values (Get).\nsearchText will be search_text on Constituent (Search). New\nAdded the following endpoints: Operation Method Route Rating sources (Get) GET /ratings/sources Rating categories (Get) GET /ratings/categories Action attachment (Edit) PATCH /actions/attachments/{attachmentId} Action attachment (Delete) DELETE /actions/attachments/{attachmentId} Constituent attachment (Edit) PATCH /constituents/attachments/{attachmentId} Constituent attachment (Delete) DELETE /constituents/attachments/{attachmentId} Changed\nNew tags included in the request will be automatically added to the Document Tags table when adding or updating attachments.\n2016-09-07\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Edit) PATCH /communicationpreferences/{communicationPreferenceId} Rating (Create) POST /ratings Rating (Edit) PATCH /ratings/{ratingId} Rating (Delete) DELETE /ratings/{ratingId} Changed\nWe added the lookup_id property to the search results entity.\n2016-09-02\nChanged\nAll POST endpoints now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the previous string response.\nAugust 2016\n2016-08-31\nNew\nAdded the following endpoints: Operation Method Route Action attachment (List) GET /actions/{actionId}/attachments Action attachment (Create) POST /actions/attachments Changed We changed the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments. The constituentId is now expected in the request body as parent_id.\nThe Constituent (Create) endpoint now supports adding a constituent with the following child entity properties: address, phone number, email address, and online presence.\nWe updated the Constituent (Edit) endpoint to include marital_status, deceased_date, former_name, title_2, and suffix_2 as available PATCH request body properties. 2016-08-29\nAnnouncement: Breaking Changes Planned for Constituent API\nAll POST endpoints will now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the current string response.\n2016-08-26\nChanged We renamed the proposal_id property to opportunity_id on actions to be consistent with product verbiage. The Constituent (List) endpoint no longer includes inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request. Announcement: Breaking Changes Planned for Constituent API\nWe will change the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments.\n2016-08-22\nNew\nAdded the following endpoints: Operation Method Route Currency configuration (Get) GET /currencyconfiguration Changed The data type assigned to the value property on the rating entity was changed from a string to an object. Previously, all values were returned as strings that needed to be parsed (by the requestor) into the intended types. Currently, the rating value will be returned with its data type intact based on the type with the following mapping: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. datetime Defines the rating value as a string JSON data type in ISO-8601 format: 2015-09-18T00:00:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. We corrected an issue with the postal_code filter within the Constituent (List) endpoint where incorrect values were returned if the postal codes filter listed multiple postal codes that were separated by commas or if postal codes contained leading space characters. Announcement: Breaking Changes Planned for Constituent API We will rename the constituent_id property to parent_id to support additional attachment areas such as action attachments.\nWe will rename the proposal_id property to opportunity_id on actions to be consistent with product verbiage. 2016-08-18\nAnnouncement: Breaking Changes Planned for Constituent API\nThe Constituent (List) endpoint will no longer include inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request.\n2016-08-16\nAnnouncement: Breaking Changes Planned for Constituent API\nThe data type assigned to the value property on the rating entity will be changed from a string to an object. As it stands today, all values are returned as a string, which must then be parsed (by the requestor) into the intended type. After release, the Rating value will be returned with its data type intact.\n2016-08-11\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Create) POST /communicationpreferences Communication preference (Delete) DELETE /communicationpreferences/{communicationPreferenceId} Communication preferences (Get) GET /communicationpreferences Changed We added start and end to the communication preference entity to represent optional start and end dates.\nWe added the ability to retrieve inactive rating records by including a new, optional includeInactive parameter in the request. 2016-08-03\nNew\nAdded the following endpoints: Operation Method Route Communication preference (List) GET /constituents/{constituentId}/communicationpreferences Changed We removed boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replaced them with a single value property for use with any type on the custom field entity.\nWe added the gpa, class_of_degree, faculty, department, and registration_number properties to the education entity.\nWe added the ability to paginate search results by including a new, optional limit and offset parameters in the request.\nWe added the ability to retrieve inactive address records by including a new, optional includeInactive parameter in the request. July 2016\n2016-07-29\nAnnouncement: Breaking Changes Planned for Constituent API We will remove boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replace them with a single value property for use with any type on the custom field entity.\nThis change is planned to take effect on Monday, August 1st. 2016-07-27\nAdded the following endpoints: Operation Method Route Constituent (Edit) PATCH /constituents/{constituentId} 2016-07-22\nNew\nAdded the following endpoints: Operation Method Route Rating (List) GET /constituents/{constituentId}/ratings/ Constituent custom field (Create) POST /constituents/customfields/ Constituent custom field (Edit) PATCH /constituents/customfields/{customFieldId} Constituent custom field (Delete) DELETE /constituents/customfields/{customFieldId} Constituent custom field category values (Get) GET /constituents/customfields/categories/values Changed\nWe added the date_added, date_modified, title_2, suffix_2, marital_status, deceased_date properties to the constituent entity.\n2016-07-18\nNew\nAdded the following endpoint: Operation Method Route Constituent (Create) POST /constituents Changed\nWe removed the business property from the constituent entity.\n2016-07-07\nChanged We renamed kind to type and types to tags on the attachment entity.\nWe renamed nickname to preferred_name on the constituent entity. 2016-07-01\nNew\nAdded the following endpoints: Operation Method Route First gift (Get) GET /constituents/{constituentId}/givingsummary/first Latest gift (Get) GET /constituents/{constituentId}/givingsummary/latest Greatest gift (Get) GET /constituents/{constituentId}/givingsummary/greatest Constituent custom field categories (Get) GET /constituents/customfields/categories Titles (Get) GET /titles Suffixes (Get) GET /suffixes Marital statuses (Get) GET /maritalstatuses June 2016\n2016-06-30\nAnnouncement: Breaking Changes Planned for Constituent API We will rename kind to type and types to tags on the attachment entity.\nWe will rename nickname to preferred_name on the constituent entity.\nThis change is planned to take effect on Wednesday, July 6. 2016-06-27\nNew Added the following endpoint: Operation Method Route Address (Edit) PATCH /addresses/{addressId} Added the ability to retrieve inactive email address, online presence, and phone records by including a new, optional includeInactive parameter in the request. 2016-06-20\nChanged\nWe updated the Constituent (List) endpoint to include a new, optional postal_code parameter which provides the ability to filter constituents by postal code based on their preferred address. The parameter value supports multiple postal codes separated by commas. Postal codes will match on a constituent if the preferred address postal code begins with one of the specified filter postal codes. For example, given the query postal_code=99577,10001, the response could contain constituents whose preferred address has a postal code of 99577-0727 or 10001.\n2016-06-15\nNew\nAdded the following endpoint: Operation Method Route Address (Delete) DELETE /addresses/{addressId} Changed\nWe added a versioning indicator to the Constituent API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/constituent/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for Constituent API We will be adding a versioning indicator to the Constituent API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/constituent/v1.\nThis change is planned to take effect on Wednesday, June 15. 2016-06-09\nNew\nAdded the following endpoint: Operation Method Route Address (Create) POST /addresses 2016-06-06\nNew\nAdded the following endpoints: Operation Method Route Lifetime giving (Get) GET /constituents/{constituentId}/givingsummary/lifetimegiving Membership (List) GET /constituents/{constituentId}/memberships 2016-06-01\nNew\nAdded the following endpoints: Operation Method Route Action types (Get) GET /actiontypes Action status types (Get) GET /actionstatustypes May 2016\n2016-05-27\nNew Added the following endpoints: Operation Method Route Note types (Get) GET /notetypes Added a General Ledger changelog to help you keep up with General Ledger API changes. 2016-05-24\nNew\nAdded the following endpoints: Operation Method Route Address types (Get) GET /addresstypes Changed\nWe renamed send_mail to do_not_mail on the address entity. Additionally, the boolean logic has been switched.\n2016-05-20\nAnnouncement: Breaking Changes Planned for Constituent API We will rename send_mail to do_not_mail on the address entity. Additionally, the boolean logic will be switched.\nWe will remove the business property from the constituent entity. New\nAdded the following endpoints: Operation Method Route Phone (Create) POST /phones Phone (Edit) PATCH /phones/{phoneId} Phone (Delete) DELETE /phones/{phoneId} Phone types (Get) GET /phonetypes Email address types (Get) GET /emailaddresstypes Online presence types (Get) GET /onlinepresencetypes Constituent code types (Get) GET /constituentcodetypes Changed\nWe implemented the following breaking changes: We removed the following address properties:\nprimary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We renamed the address to formatted_address. 2016-05-16\nAnnouncement: Breaking Changes Planned for Constituent API We will remove the following address properties: primary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We will remove the business property from the constituent entity. 2016-05-13\nNew We updated the Constituent (List) endpoint to include a new, optional date_added parameter which provides the ability to poll for recently added constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by date added in ascending order. We updated the Constituent (List) endpoint to include a new, optional last_modified parameter which provides the ability to poll for recently changed constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by last modified in ascending order.\nThe response includes a sort_token within the next_link property. sort_token represents a token filter for providing the next set of constituents, ordered by the last modified date.\nNote: The data returned by the Constituent (List) endpoint may have a latency of up to 15 minutes. 2016-05-06\nNew Added the following granular address properties: address_lines\ncity\nsuburb\nstate\npostal_code\ncounty\ncountry Addresses are returned by the following endpoints: Operation Method Route Constituent (Get) GET /constituents/{constituentId} Constituent (List) GET /constituents Address (List) GET /constituents/{constituentId}/addresses Added international address field support for the following countries. Field United States Canada United Kingdom Australia New Zealand address_lines city * suburb state ! postal_code county country * Australia - City or suburb data is returned with the city field for GET operations. Future endpoints will allow you to POST and PATCH address data. In these cases, you can use either the suburb or city properties, but not both at the same time. Providing both property values in future POST and PATCH operations will result in an error. ! Canada - Use the state property to track a Canadian Province Changed For consistency, constituent_id is included in the following entities: Address\nAttachment\nConstituent code\nEmail address\nOnline presence\nPhone\nCustom field\nName format\nProfile picture\nAction\nNote When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. Impacted constituent related endpoints include: Operation New Method Route Action (Edit) PATCH /actions/{actionId} Constituent code (Edit) PATCH /constituentcodes/{constituentCodeId} Email address (Edit) PATCH /emailaddresses/{emailAddressId} Note (Edit) PATCH /notes/{noteId} Online presence (Edit) PATCH /onlinepresences/{onlinePresenceId} We made changes to the custom field entity: To better denote the fields that can represent the \"value\" of the custom field, we appended a _value suffix to the field name for the following fields: constituent_id_value\ndate_value\ntext_value\nnumber_value\ncurrency_value\nboolean_value\ncode_table_value\nfuzzy_date_value Renamed the constituent_id property to parent_id to avoid confusion with the constituent_id_value field and to facilitate the re-use of this type across other entities. The parent_id represents the parent object's identifier. For example, in the case of constituent custom fields, the parent_id represents the constituent identifier. Added date and comment properties. April 2016\n2016-04-26\nAnnouncement: Breaking Changes Planned for Constituent API\nIn the coming days two breaking changes will be placed into effect: We will replace existing PUT endpoints to use PATCH, instead. Unlike PUT, PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. In this way the payload size is optimized. 2016-04-25\nNew Added the ability to create, edit, and delete email addresses: Operation Method Route Email address (Create) POST /emailaddresses Email address (Edit) PUT /emailaddresses/{emailAddressId} Email address (Delete) DELETE /emailaddresses/{emailAddressId} Added the ability to create and edit constituent codes: Operation Method Route Constituent code (Create) POST /constituentcodes Constituent code (Edit) PUT /constituentcodes/{constituentCodeId} Constituent code (Delete) DELETE /constituentcodes/{constituentCodeId} 2016-04-15\nNew\nAdded the ability to create, edit, and delete online presence entities: Operation Method Route Online presence (Create) POST /onlinepresences Online presence (Edit) PUT /onlinepresences/{onlinePresenceId} Online presence (Delete) DELETE /onlinepresences/{onlinePresenceId} 2016-04-08\nNew Added the ability to return a paginated list of constituents. For this release, the list will be ordered by name (last name for individuals, organization name for organizations). Operation Method Route Constituent (List) GET /constituents The endpoint supports the following the optional request parameters. Pagination is facilitated through the results via the top and skip parameters: Property Description top Optional. Integer. Represents the number of records to return. If not specified, the default is 100. The maximum allowed value is 500. skip Optional. Integer. Represents the number of records to skip. Changed Breaking change implemented for the Constituent API endpoints that return a collection of objects. This change allows us to be consistent in the representation of data collections and supports pagination for certain endpoints. See the 2016-03-31 changelog entry for a listing of affected endpoints. Constituent (Search) now supports the ability to search on an email address (same functionality as found in the RE NXT search feature). This expanded search will match against constituent email addresses when the searchText parameter is a valid email address. Note that we currently support exact match only. March 2016\n2016-03-31\nAnnouncement: Breaking Changes Planned for Constituent API endpoints\nIn the coming weeks, we will be standardizing the shape of our responses that return a collection of objects. This standardization will allow us to be consistent across each endpoint as well as to facilitate some future enhancements around pagination within those endpoints. The new representation of a collection will be a JSON object with two properties, a count which represents the total number of records meeting the criteria and a value property which represents the array of items for the current paged response.\nThis change is scheduled for release by April 8, 2016. How a collection response is formed today (Phones used as an example):\n{ \"phones\": [ { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} How the response will be formed after release:\n{ \"count\": 10, // total number of elements in the collection \"value\": [ // collection of items included in this response { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} * Please note that the response format may change before official release.\nEndpoints affected: Operation Method Route Action (List) GET /constituent/constituents/{constituentId}/actions Address (List) GET /constituent/constituents/{constituentId}/addresses Constituent attachment (List) GET /constituent/constituents/{constituentId}/attachments Constituent code (List) GET /constituent/constituents/{constituentId}/constituentcodes Constituent (Search) GET /constituent/constituents/search/?searchText={searchText} Constituent custom field (List) GET /constituent/constituents/{constituentId}/customfields Education (List) GET /constituent/constituents/{constituentId}/educations Email address (List) GET /constituent/constituents/{constituentId}/emailaddresses Name format (List) GET /constituent/constituents/{constituentId}/nameformats Note (List) GET /constituent/constituents/{constituentId}/notes Online presence (List) GET /constituent/constituents/{constituentId}/onlinepresences Phone (List) GET /constituent/constituents/{constituentId}/phones Relationship (List) GET /constituent/constituents/{constituentId}/relationships 2016-03-30\nNew Added the ability to return a list of relationships for a specified constituent. Operation Method Route Relationship (List) GET /constituents/{constituentId}/relationships Added the ability to return a constituent's profile picture. Operation Method Route Profile picture (Get) GET /constituents/{constituentId}/profilepicture Changed\nGET operations that return an attachment endpoint, such as Constituent attachment (List), return the following new properties: Property Description thumbnail_url Read only. String. Represents an image thumbnail URI for a picture to display. Endpoints that add or edit attachments ignore this property. file_size Read only. Long integer. The file size of the attachment in bytes. Only applies to physical attachments. Helps to determine how to display large images. Endpoints that add or edit attachments ignore this property. 2016-03-10\nNew Added the ability to return a list of education items for a specified constituent. Operation Method Route Education (List) GET /constituents/{constituentId}/educations Added the ability to edit and delete actions and notes for a constituent: Operation Method Route Action (Edit) PUT /actions/{actionId} Action (Delete) DELETE /actions/{actionId} Note (Edit) PUT /notes/{noteId} Note (Delete) DELETE /notes/{noteId} Changed OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization The base URL for the Constituent API has changed: Old New https://api.nxt.blackbaud-dev.com/constituents/ https://api.sky.blackbaud.com/constituent After creating an attachment for a constituent, the returned representation of an attachment now includes the attachment identifier (id). Values for the Constituent gender property now return the values using the correct casing (lowercase). GET and POST routes for actions and notes endpoints have changed: Operation Method Old Route New Route Action (Get) GET /{constituentId}/actions/{actionId} /actions/{actionId} Action (Create) POST /{constituentId}/actions /actions Note (Get) GET /{constituentId}/notes/{noteId} /notes/{noteId} Note (Create) POST /{constituentId}/notes /notes Deleted\nWe removed the following endpoints: GET Attachment\nGET Constituent code\nGET Custom field\nGET Email address\nGET Online presence\nGET Phone\nGET Primary business\nGET Spouse Older\n2015-10-20\nNew Added 3 new endpoints covering constituent attachments Get a list of constituent attachments\nGet a specific attachment for a constituent\nAdd an attachment for a constituent Note that currently, all attachment records are viewable through the SKY API, but only link attachments can be added. Changed Removed Author from the constituent note entity. The author is now inferred from the context of the user calling the SKY API. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Fundraising (Beta)",
     "description": "Information on additions and changes for the Fundraising API (Beta).",
     "order": 100,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-line-chart",
     "back_to_top": true,
     "title": "Fundraising (Beta) Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Fundraising",
     "abspath": "support/changelog/fundraising/index.html",
     "uri": "/support/changelog/fundraising/",
     "text": " Fundraising (Beta)\nMonitor this page to keep up with the Fundraising API (Beta) latest changes and SKY API service releases.\n2017-03-08\nNew\nThe Fundraising API has been released for a public beta. This API handles information related to the fundraising hierarchy, including the campaign, fund, and appeal entities: Campaigns set the overall objectives and initiatives for raising money, and they are typically the top tier of the fundraising hierarchy. For example, organizations can create campaigns to encompass fundraising efforts related to annual operating expenses, new buildings, or endowments.\nFunds represent the donor's intent for how to use or earmark a gift. For example, the gift can be intended for a specific cause or financial purpose. Funds are often linked to financial suites and indicate where to allocate a gift.\nAppeals are the sources and solicitations that bring in gifts, and they are typically the most granular piece of the fundraising hierarchy. Examples of appeals include direct mailings, online donation pages, phonathons, auctions, and events. The initial release contains endpoints to retrieve these entities by ID and to manage custom fields. For more information, check out the entity and endpoint references. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Gift (Beta)",
     "description": "Information on additions and changes for the Gift API (Beta).",
     "order": 100,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-gift",
     "back_to_top": true,
     "title": "Gift (Beta) Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Gift",
     "abspath": "support/changelog/gift/index.md",
     "uri": "/support/changelog/gift/",
     "text": " Gift (Beta)\nMonitor this page to keep up with the Gift API (Beta) latest changes and SKY API service releases.\n2017-03-08\nNew\nThe Gift API has been released for a public beta. This API handles information related to gifts, including related entities such as gift splits, gift fundraisers, and soft credits.\nThe initial release contains endpoints to retrieve a list of all gifts, to retrieve gifts by their IDs, and to manage attachments. For more information, check out the entity and endpoint references. "
    },
    {
     "layout": "layout-sidebar",
     "name": "General Ledger",
     "description": "Information on additions and changes for the General Ledger API.",
     "order": 200,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-book",
     "back_to_top": true,
     "title": "General Ledger Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Gl",
     "abspath": "support/changelog/gl/index.md",
     "uri": "/support/changelog/gl/",
     "text": " General Ledger\nMonitor this page to keep up with the General Ledger API latest changes and SKY API service releases.\n2017-01-18\nNew\nAdded the following endpoints: Operation Method Route Account GET /accounts/{account_id} Project GET /projects/{project_id} Account cashflows (List) GET /accounts/cashflows Account working capitals (List) GET /accounts/workingcapitals Account custom fields (List) GET /accounts/customfields December 2016\n2016-12-06\nNew Added the following endpoints: Operation Method Route Journal entry custom field (List) GET /journalentries/customfields Project custom field (List) GET /projects/customfields Budget GET /budgets Budget (List) GET /budgets/{scenario_id} Budget account (List) GET /budgets/{scenario_id}/accounts Ledger summary (List) GET /summary/{fiscal_year_id} Added new custom field entities to the following endpoints: Operation Method Route Project POST /projects Journal entry POST /journalentrybatches/{batch_id}/journalentries Journal entry batch GET /journalentrybatches/{batch_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values November 2016\n2016-11-14\nAnnouncement: Breaking Change Planned for General Ledger API\nFor consistency across APIs, we will implement the following changes: All responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties.\nThe following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values 2016-11-01\nNew\nAdded the following endpoints: Operation Method Route Create project (Post) POST /projects Create project contact (Post) POST /projects/{project_id}/contacts October 2016\n2016-10-06\nNew\nAdded the following endpoints: Operation Method Route Fiscal year (List) GET /fiscalyears Class (List) GET /classes Account structure GET /accounts/structure Account segment value (List) GET /accounts/segments Account code (List) GET /accounts/codes Account fund (List) GET /accounts/funds Project type (List) GET /projects/types Project status (List) GET /projects/statuses Project division (List) GET /projects/divisions Project department (List) GET /projects/departments Project location (List) GET /projects/locations Changed\nYou can now specify Class on journal entries (this affects all endpoints associated with journal entry batches).\nAugust 2016\n2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Transaction distribution (Search) GET /transactiondistributions Account (Search) GET /accounts Project (Search) GET /projects Journal entry batch (List) GET /journalentrybatches July 2016\n2016-07-05\nChanged\nWe implemented a previously announced, breaking change. We removed the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\nJune 2016\n2016-06-30\nAnnouncement: Breaking Change Planned for General Ledger API\nIn the coming days, a breaking change will be placed into effect. We will remove the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\n2016-06-22\nNew\nAdded the following endpoint: Operation Method Route Transaction distribution (Search) GET /transactiondistributions 2016-06-15\nChanged\nWe've added a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/generalledger/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for General Ledger API We will be adding a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/generalledger/v1.\nThis change is planned to take effect on Wednesday, June 15. May 2016\n2016-05-27\nNew Added a General Ledger getting started guide to help you make your first General Ledger API call with our interactive SKY API Console. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Shared",
     "description": "Common changes shared across all our APIs.",
     "order": 50,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-cloud",
     "back_to_top": true,
     "title": "Shared Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Shared",
     "abspath": "support/changelog/shared/index.md",
     "uri": "/support/changelog/shared/",
     "text": " Shared\nMonitor this page to keep up with common changes shared across all our APIs.\n2017-3-03\nNew\nThe SKY API developer site now offers commenting capability through Disqus. We encourage community involvement to improve our documentation. We will monitor comments just like we monitor feedback in our GitHub repository, and we will incorporate feedback to make our docs better. See something that is unclear? Want more detail? Leave a comment and let us know!\nOn the SKY API developer site, comments now appear at the bottom of most documentation pages, and buttons are available at the top of pages to take users to the comments.\nDecember 2016\n2016-12-02\nWe added a new Status link to the Support menu. This link takes you to our SKY API status page. The status page provides the current state of API availability, as well as specific details on downtime incidents. We also provide the option for you to subscribe to automatic incident notifications by email, SMS, or feed.\nOctober 2016\n2016-10-17\nLogos can now be associated with your applications. The logo is the icon that users will see on the consent form when they give an application authorization to use their product's account to access the API. Logos can be added to new and existing applications through the My Applications page. Application logo images must be: 512 by 512 pixels\nSmaller than 2MB\nPNG or JPEG format September 2016\n2016-09-22\nSKY API's support for CORS now includes accept and content-type in the list of accepted request headers. You can now specify these headers in API requests from within a browser.\nJuly 2016\n2016-07-08\nTo support approved API subscribers with access to their own dedicated tenants, we've added instructions for activating the SKY API Console\nto our Basics guide.\nJune 2016\n2016-06-27 When requesting an access token, you may now supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. This is an alternative to using the Authorization header. See Authorization Code Flow. Created a C# Auth Code Flow code sample and tutorial. 2016-06-09\nNew We've added the OAuth2 Implicit Flow for use in web browser and mobile apps where application secret confidentiality is not guaranteed. A new feature allows you to export API definitions in Swagger and WADL formats from within the SKY API Console. Use these files to generate client-side code by using tools such as Swagger Codegen. You can import these files into API client tools such as Postman and start calling the API in very little time. May 2016\n2016-05-27\nChanged\nWhen registering your application, we've relaxed the https requirement for whitelisted redirect URIs. To facilitate and shorten the development process, we now accept http://localhost:* (or, http://127.0.0.1:*) whitelisted web addresses to redirect to after users grant or deny permission for your app. You will no longer need to install a self-signed SSL certificate on your local machine when building your applications.\n2016-05-13\nNew\nA next_link property has been added to our paginated collection responses and represents the URI for the next page of results. This property takes into account any relevant pagination parameters, such as limit, offset, or last_modified, and date_added provided on the request.\n2016-05-06\nChanged limit and offset have replaced top and skip parameters for Pagination. Pagination behavior will remain unchanged. When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. April 2016\n2016-04-26\nPagination will be facilitated through the results via the use of limit and offset instead of top and skip parameters. Pagination behavior will remain unchanged.\nMarch 2016\n2016-03-15\nUpdates to code samples including Authorization Code Flow Tutorial and Barkbaud: Authorization Code Flow Tutorial Environment variables automatically load when the application starts. Tutorial instructions have been simplified accordingly.\nUsing AngularJS for display of Log in button, Log out button and constituent data.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. Barkbaud Environment variables automatically load when the application starts. README instructions have been simplified accordingly.\nBiographies, owner and medical history for each animal are now stored in a MongoDB database at mLab instead of Parse. The Parse database service will be retired on January 28, 2017.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. 2016-03-11\nUsage limits are now in effect. Exceeding the rate limit results in a 429 - Too Many Requests response status code. Exceeding the quota results in a 403 - Quota Exceeded response status code.\n2016-03-10\nChanged OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization Older\n2015-12-8\nNew The My Applications page now includes the ability to edit applications. Once registered, your application will automatically have access to the Developer Sandbox tenant. The Auth Code Flow Tutorial demonstrates how to create a small server-side application that negotiates authorization and access constituent data. Code Samples include Barkbaud which was introduced at bbcon 2015. Also included is the source code for the Auth Code Flow Tutorial. General Enhancements Enhanced FAQ, including new questions and references to new Auth Code Flow Tutorial and application management. 2015-11-20\nNew\nThe My Applications page and associated documentation provide self-service application registration for the purpose of accessing data via SKY API.\n2015-10-20\nChanged Improved handling of enumerations within the API. Enumeration values are now emitted using string representations instead of numeric representations. For example, Constituent.Type now returns individual or organization. Improved handling of default values within the SKY API. Previously, default values were not included in the JSON response. Values are now included in the payload. Enhanced sample response representations in the developer portal to account for enumeration and default value handling. Added a Support menu to the developer portal, with links to the Changelog, Issues, Ideas, and FAQ. "
    }
   ],
   "text": " Changelog Shared Monitor this page to keep up with common changes shared across all our APIs. Accounts Payable Monitor this page to keep up with the latest changes to the Accounts Payable API. Constituent Monitor this page to keep up with the latest changes to the Constituent API. Fundraising (Beta) Monitor this page to keep up with the latest changes to the Fundraising API. General Ledger Monitor this page to keep up with the latest changes to the General Ledger API. Gift (Beta) Monitor this page to keep up with the latest changes to the Gift API. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Accounts Payable",
   "description": "Information on additions and changes for the Accounts Payable API.",
   "order": 300,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-university",
   "back_to_top": true,
   "title": "Accounts Payable Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Ap",
   "abspath": "support/changelog/ap/index.md",
   "uri": "/support/changelog/ap/",
   "text": " Accounts Payable\nMonitor this page to keep up with the Accounts Payable API latest changes and SKY API service releases.\n2016-12-06\nNew Added the following endpoints: Operation Method Route Invoice custom field (List) GET /invoices/customfields Vendor custom field (List) GET /vendors/customfields Added new custom field entities to the following endpoints: Operation Method Route Invoice POST /invoices Invoice GET /invoices/{invoice_id} Vendor POST /vendors Vendor GET /vendors/{vendor_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes November 2016\n2016-11-14\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following change:\nAll responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes October 2016\n2016-10-12\nChanged\nFor consistency across APIs, we implemented the following changes: All responses to POST requests changed from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields changed from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice 2016-10-04\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following changes: All responses to POST requests will change from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields will change from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice August 2016\n2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Vendor (List) GET /vendors Invoice (List) GET /invoices 2016-08-04\nNew\nThe Accounts Payable API is now available. Use this API to manage accounts payable, including vendors and invoices. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Constituent",
   "description": "Information on additions and changes for the Constituent API.",
   "order": 100,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-user",
   "back_to_top": true,
   "title": "Constituent Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Constituent",
   "abspath": "support/changelog/constituent/index.md",
   "uri": "/support/changelog/constituent/",
   "text": " Constituent\nMonitor this page to keep up with the Constituent API latest changes and SKY API service releases.\n2017-02-23\nChanged The Constituent list endpoint now includes an optional custom_field_category parameter to retrieve constituents only if their active custom fields match specified custom field categories.\nThe Fundraiser list (Single constituent) endpoint now returns the appropriate value for the constituent_id field. 2017-02-09\nChanged The major and minor properties on the education entity have been updated to return an array of strings. They have been renamed majors and minors.\nThe subject_of_study property on the education entity is no longer returned in the major property. Instead, it uses a dedicated property for UK-formatted databases.\nThe Address (Create) endpoint no longer requires the country property. When country is not provided, the endpoint uses the organization's default country configuration.\nThe country property on the address entity now accepts a country ID, name, or abbreviation. The property uses preferential selection to match against ID first, then name, and then abbreviation.\nThe Ratings list (Single constituent) endpoint now includes an optional most_recent_only parameter to retrieve only the most recent rating for each category. New Operation Method Route Countries (Get) GET /countries Education (Create) POST /educations Education (Edit) PATCH /educations/{education_id} Education (Delete) DELETE /educations/{education_id} Education schools (Get) GET /educations/schools Education types (Get) GET /educations/types Education statuses (Get) GET /educations/statuses Education subjects (Get) GET /educations/subjects Education degrees (Get) GET /educations/degrees Education departments (Get) GET /educations/departments Education degree classes (Get) GET /educations/degreeclasses Education faculties (Get) GET /educations/faculties 2017-01-31\nAnnouncement: Breaking Changes Planned for Constituent API\nWe are updating some properties on the education entity to improve overall feature parity and to support upcoming POST and PATCH education endpoints in the Constituent API. The major and minor properties will both be updated to return an array of strings. They will also be renamed majors and minors.\nThe subject_of_study property will no longer be returned in the major property. Instead, it will use a dedicated property for UK-formatted databases. 2017-01-11\nChanged\nOn the Address (Create) endpoint, we updated the do_not_mail and preferred properties to set the default value to false when the properties are not supplied in the request body.\n2017-01-10\nChanged\nWe added the campus, known_name, and social_organization properties to the education entity.\n2017-01-06\nChanged We updated the Constituent custom field list (Single constituent) endpoint to populate the date_added and date_modified properties. We updated the Constituent code list (Single constituent) endpoint to populate the inactive, date_added, and date_modified properties. December 2016\n2016-12-12\nNew\nAdded the following endpoint: Operation Method Route Rating category values (Get) GET /ratings/categories/values Changed We changed the format of the name property on the Constituent (Get) endpoint to \"FirstName LastName\" for consistency with the Constituent list endpoint. We updated the Email address (Edit) and Online presence (Edit) endpoints to respect the type property. We changed the Rating (Create) endpoint to require the \"source\" property for categories that have a source. November 2016\n2016-11-23\nChanged We updated the Constituent (Create), Constituent (Edit), Constituent (Get), and Constituent list endpoints to ensure that the lookup_id, inactive, and gives_anonymously properties are respected and populated. We updated the Constituent (Edit) endpoint to appropriately respect Constituent Biographical Edit permissions. 2016-11-16\nChanged\nThe Constituent list endpoint now includes an option to filter constituents based on their associated constituent codes. The optional constituent_code query parameter returns constituents if any of the specified constituent codes match any of their active constituent codes. For example, constituent_code=Board Member&amp;constituent_code=Volunteer returns constituents with either \"Board Member\" or \"Volunteer\" constituent codes.\n2016-11-14\nNew\nAdded the following endpoints: Operation Method Route Constituent code list (All Constituents) GET /constituents/constituentcodes Constituent custom field list (All constituents) GET /constituents/customfields Changed We renamed all existing list endpoints to implement a new naming convention that better indicates whether the endpoints return data for a single constituent or for all constituents. Endpoints that return data for a single constituent are now postfixed with (Single constituent). Endpoints that return data for all constituents are now postfixed with (All constituents). The Address list (All constituents) endpoint no longer includes inactive addresses by default. To include inactive addresses, use the optional include_inactive parameter in the request. The Address list (All constituents) endpoint now populates the formatted_address property. We updated the following endpoints to appropriately respect constituent record-level security: Operation Method Route Address (List) GET /addresses Email address (List) GET /emailaddresses Online presence (List) GET /onlinepresences Phone (List) GET /phones October 2016\n2016-10-20\nNew\nAdded the following endpoints: Operation Method Route Address (List)* GET /addresses Email address (List)* GET /emailaddresses Online presence (List)* GET /onlinepresences Phone (List)* GET /phones * The new endpoints assume the names of existing endpoints, which were renamed in the endpoint reference. The previous Address (List) is now Constituent address (List); the previous Email address (List) is now Constituent email address (List); the previous Online presence (List) is now Constituent online presence (List); and the previous Phone (List) is now Constituent phone (List). Changed\nWe added the date_added and date_modified properties to the address, email address, online presence, and phone entities.\n2016-10-17\nChanged\nThe fundraisers property on the action entity now contains an array of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\nNew\nAdded the following endpoints: Operation Method Route Action custom field (List) GET /actions/{action_id}/customfields Action custom field (Create) POST /actions/customfields Action custom field (Edit) PATCH /actions/customfields/{custom_field_id} Action custom field (Delete) DELETE /actions/customfields/{custom_field_id} Action custom field categories (Get) GET /actions/customfields/categories Action custom field category values (Get) GET /actions/customfields/categories/values 2016-10-03\nNew\nAdded the following endpoints: Operation Method Route Prospect status (Get) GET /constituents/{constituent_id}/prospectstatus Fundraiser (List) GET /constituents/{constituent_id}/fundraisers September 2016\n2016-09-28\nChanged The Constituent (List) endpoint now includes the option to select specific properties on its return object by using the optional fieldsquery parameter. This can reduce the response payload size and improve the response time.\nThe Constituent (List) endpoint no longer returns deceased constituents by default. Instead, they are included by setting the new include_deceased option to true.\nThe Communication preference (List) endpoint can now be paginated using the new limit and offset query parameters. If not specified, the default limit is 10000.\nWe changed the following query string parameters to snake case:\nincludeInactive is now include_inactive on Constituent (List), Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName is now category_name on Constituent custom field category values (Get).\nsearchText is now search_text on Constituent (Search). 2016-09-27\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the fundraisers property on the action entity so that it contains a list of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\n2016-09-23\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the query string parameter includeInactive to include_inactive on the Constituent (List) endpoint.\n2016-09-14\nAnnouncement: Breaking Changes Planned for Constituent API The Constituent (List) endpoint will no longer return deceased constituents by default. Instead, they will be included by setting a new include_deceased option to true.\nWe will change the following query string parameters to snake case:\nincludeInactive will be include_inactive on Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName will be category_name on Constituent custom field category values (Get).\nsearchText will be search_text on Constituent (Search). New\nAdded the following endpoints: Operation Method Route Rating sources (Get) GET /ratings/sources Rating categories (Get) GET /ratings/categories Action attachment (Edit) PATCH /actions/attachments/{attachmentId} Action attachment (Delete) DELETE /actions/attachments/{attachmentId} Constituent attachment (Edit) PATCH /constituents/attachments/{attachmentId} Constituent attachment (Delete) DELETE /constituents/attachments/{attachmentId} Changed\nNew tags included in the request will be automatically added to the Document Tags table when adding or updating attachments.\n2016-09-07\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Edit) PATCH /communicationpreferences/{communicationPreferenceId} Rating (Create) POST /ratings Rating (Edit) PATCH /ratings/{ratingId} Rating (Delete) DELETE /ratings/{ratingId} Changed\nWe added the lookup_id property to the search results entity.\n2016-09-02\nChanged\nAll POST endpoints now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the previous string response.\nAugust 2016\n2016-08-31\nNew\nAdded the following endpoints: Operation Method Route Action attachment (List) GET /actions/{actionId}/attachments Action attachment (Create) POST /actions/attachments Changed We changed the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments. The constituentId is now expected in the request body as parent_id.\nThe Constituent (Create) endpoint now supports adding a constituent with the following child entity properties: address, phone number, email address, and online presence.\nWe updated the Constituent (Edit) endpoint to include marital_status, deceased_date, former_name, title_2, and suffix_2 as available PATCH request body properties. 2016-08-29\nAnnouncement: Breaking Changes Planned for Constituent API\nAll POST endpoints will now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the current string response.\n2016-08-26\nChanged We renamed the proposal_id property to opportunity_id on actions to be consistent with product verbiage. The Constituent (List) endpoint no longer includes inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request. Announcement: Breaking Changes Planned for Constituent API\nWe will change the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments.\n2016-08-22\nNew\nAdded the following endpoints: Operation Method Route Currency configuration (Get) GET /currencyconfiguration Changed The data type assigned to the value property on the rating entity was changed from a string to an object. Previously, all values were returned as strings that needed to be parsed (by the requestor) into the intended types. Currently, the rating value will be returned with its data type intact based on the type with the following mapping: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. datetime Defines the rating value as a string JSON data type in ISO-8601 format: 2015-09-18T00:00:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. We corrected an issue with the postal_code filter within the Constituent (List) endpoint where incorrect values were returned if the postal codes filter listed multiple postal codes that were separated by commas or if postal codes contained leading space characters. Announcement: Breaking Changes Planned for Constituent API We will rename the constituent_id property to parent_id to support additional attachment areas such as action attachments.\nWe will rename the proposal_id property to opportunity_id on actions to be consistent with product verbiage. 2016-08-18\nAnnouncement: Breaking Changes Planned for Constituent API\nThe Constituent (List) endpoint will no longer include inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request.\n2016-08-16\nAnnouncement: Breaking Changes Planned for Constituent API\nThe data type assigned to the value property on the rating entity will be changed from a string to an object. As it stands today, all values are returned as a string, which must then be parsed (by the requestor) into the intended type. After release, the Rating value will be returned with its data type intact.\n2016-08-11\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Create) POST /communicationpreferences Communication preference (Delete) DELETE /communicationpreferences/{communicationPreferenceId} Communication preferences (Get) GET /communicationpreferences Changed We added start and end to the communication preference entity to represent optional start and end dates.\nWe added the ability to retrieve inactive rating records by including a new, optional includeInactive parameter in the request. 2016-08-03\nNew\nAdded the following endpoints: Operation Method Route Communication preference (List) GET /constituents/{constituentId}/communicationpreferences Changed We removed boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replaced them with a single value property for use with any type on the custom field entity.\nWe added the gpa, class_of_degree, faculty, department, and registration_number properties to the education entity.\nWe added the ability to paginate search results by including a new, optional limit and offset parameters in the request.\nWe added the ability to retrieve inactive address records by including a new, optional includeInactive parameter in the request. July 2016\n2016-07-29\nAnnouncement: Breaking Changes Planned for Constituent API We will remove boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replace them with a single value property for use with any type on the custom field entity.\nThis change is planned to take effect on Monday, August 1st. 2016-07-27\nAdded the following endpoints: Operation Method Route Constituent (Edit) PATCH /constituents/{constituentId} 2016-07-22\nNew\nAdded the following endpoints: Operation Method Route Rating (List) GET /constituents/{constituentId}/ratings/ Constituent custom field (Create) POST /constituents/customfields/ Constituent custom field (Edit) PATCH /constituents/customfields/{customFieldId} Constituent custom field (Delete) DELETE /constituents/customfields/{customFieldId} Constituent custom field category values (Get) GET /constituents/customfields/categories/values Changed\nWe added the date_added, date_modified, title_2, suffix_2, marital_status, deceased_date properties to the constituent entity.\n2016-07-18\nNew\nAdded the following endpoint: Operation Method Route Constituent (Create) POST /constituents Changed\nWe removed the business property from the constituent entity.\n2016-07-07\nChanged We renamed kind to type and types to tags on the attachment entity.\nWe renamed nickname to preferred_name on the constituent entity. 2016-07-01\nNew\nAdded the following endpoints: Operation Method Route First gift (Get) GET /constituents/{constituentId}/givingsummary/first Latest gift (Get) GET /constituents/{constituentId}/givingsummary/latest Greatest gift (Get) GET /constituents/{constituentId}/givingsummary/greatest Constituent custom field categories (Get) GET /constituents/customfields/categories Titles (Get) GET /titles Suffixes (Get) GET /suffixes Marital statuses (Get) GET /maritalstatuses June 2016\n2016-06-30\nAnnouncement: Breaking Changes Planned for Constituent API We will rename kind to type and types to tags on the attachment entity.\nWe will rename nickname to preferred_name on the constituent entity.\nThis change is planned to take effect on Wednesday, July 6. 2016-06-27\nNew Added the following endpoint: Operation Method Route Address (Edit) PATCH /addresses/{addressId} Added the ability to retrieve inactive email address, online presence, and phone records by including a new, optional includeInactive parameter in the request. 2016-06-20\nChanged\nWe updated the Constituent (List) endpoint to include a new, optional postal_code parameter which provides the ability to filter constituents by postal code based on their preferred address. The parameter value supports multiple postal codes separated by commas. Postal codes will match on a constituent if the preferred address postal code begins with one of the specified filter postal codes. For example, given the query postal_code=99577,10001, the response could contain constituents whose preferred address has a postal code of 99577-0727 or 10001.\n2016-06-15\nNew\nAdded the following endpoint: Operation Method Route Address (Delete) DELETE /addresses/{addressId} Changed\nWe added a versioning indicator to the Constituent API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/constituent/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for Constituent API We will be adding a versioning indicator to the Constituent API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/constituent/v1.\nThis change is planned to take effect on Wednesday, June 15. 2016-06-09\nNew\nAdded the following endpoint: Operation Method Route Address (Create) POST /addresses 2016-06-06\nNew\nAdded the following endpoints: Operation Method Route Lifetime giving (Get) GET /constituents/{constituentId}/givingsummary/lifetimegiving Membership (List) GET /constituents/{constituentId}/memberships 2016-06-01\nNew\nAdded the following endpoints: Operation Method Route Action types (Get) GET /actiontypes Action status types (Get) GET /actionstatustypes May 2016\n2016-05-27\nNew Added the following endpoints: Operation Method Route Note types (Get) GET /notetypes Added a General Ledger changelog to help you keep up with General Ledger API changes. 2016-05-24\nNew\nAdded the following endpoints: Operation Method Route Address types (Get) GET /addresstypes Changed\nWe renamed send_mail to do_not_mail on the address entity. Additionally, the boolean logic has been switched.\n2016-05-20\nAnnouncement: Breaking Changes Planned for Constituent API We will rename send_mail to do_not_mail on the address entity. Additionally, the boolean logic will be switched.\nWe will remove the business property from the constituent entity. New\nAdded the following endpoints: Operation Method Route Phone (Create) POST /phones Phone (Edit) PATCH /phones/{phoneId} Phone (Delete) DELETE /phones/{phoneId} Phone types (Get) GET /phonetypes Email address types (Get) GET /emailaddresstypes Online presence types (Get) GET /onlinepresencetypes Constituent code types (Get) GET /constituentcodetypes Changed\nWe implemented the following breaking changes: We removed the following address properties:\nprimary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We renamed the address to formatted_address. 2016-05-16\nAnnouncement: Breaking Changes Planned for Constituent API We will remove the following address properties: primary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We will remove the business property from the constituent entity. 2016-05-13\nNew We updated the Constituent (List) endpoint to include a new, optional date_added parameter which provides the ability to poll for recently added constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by date added in ascending order. We updated the Constituent (List) endpoint to include a new, optional last_modified parameter which provides the ability to poll for recently changed constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by last modified in ascending order.\nThe response includes a sort_token within the next_link property. sort_token represents a token filter for providing the next set of constituents, ordered by the last modified date.\nNote: The data returned by the Constituent (List) endpoint may have a latency of up to 15 minutes. 2016-05-06\nNew Added the following granular address properties: address_lines\ncity\nsuburb\nstate\npostal_code\ncounty\ncountry Addresses are returned by the following endpoints: Operation Method Route Constituent (Get) GET /constituents/{constituentId} Constituent (List) GET /constituents Address (List) GET /constituents/{constituentId}/addresses Added international address field support for the following countries. Field United States Canada United Kingdom Australia New Zealand address_lines city * suburb state ! postal_code county country * Australia - City or suburb data is returned with the city field for GET operations. Future endpoints will allow you to POST and PATCH address data. In these cases, you can use either the suburb or city properties, but not both at the same time. Providing both property values in future POST and PATCH operations will result in an error. ! Canada - Use the state property to track a Canadian Province Changed For consistency, constituent_id is included in the following entities: Address\nAttachment\nConstituent code\nEmail address\nOnline presence\nPhone\nCustom field\nName format\nProfile picture\nAction\nNote When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. Impacted constituent related endpoints include: Operation New Method Route Action (Edit) PATCH /actions/{actionId} Constituent code (Edit) PATCH /constituentcodes/{constituentCodeId} Email address (Edit) PATCH /emailaddresses/{emailAddressId} Note (Edit) PATCH /notes/{noteId} Online presence (Edit) PATCH /onlinepresences/{onlinePresenceId} We made changes to the custom field entity: To better denote the fields that can represent the \"value\" of the custom field, we appended a _value suffix to the field name for the following fields: constituent_id_value\ndate_value\ntext_value\nnumber_value\ncurrency_value\nboolean_value\ncode_table_value\nfuzzy_date_value Renamed the constituent_id property to parent_id to avoid confusion with the constituent_id_value field and to facilitate the re-use of this type across other entities. The parent_id represents the parent object's identifier. For example, in the case of constituent custom fields, the parent_id represents the constituent identifier. Added date and comment properties. April 2016\n2016-04-26\nAnnouncement: Breaking Changes Planned for Constituent API\nIn the coming days two breaking changes will be placed into effect: We will replace existing PUT endpoints to use PATCH, instead. Unlike PUT, PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. In this way the payload size is optimized. 2016-04-25\nNew Added the ability to create, edit, and delete email addresses: Operation Method Route Email address (Create) POST /emailaddresses Email address (Edit) PUT /emailaddresses/{emailAddressId} Email address (Delete) DELETE /emailaddresses/{emailAddressId} Added the ability to create and edit constituent codes: Operation Method Route Constituent code (Create) POST /constituentcodes Constituent code (Edit) PUT /constituentcodes/{constituentCodeId} Constituent code (Delete) DELETE /constituentcodes/{constituentCodeId} 2016-04-15\nNew\nAdded the ability to create, edit, and delete online presence entities: Operation Method Route Online presence (Create) POST /onlinepresences Online presence (Edit) PUT /onlinepresences/{onlinePresenceId} Online presence (Delete) DELETE /onlinepresences/{onlinePresenceId} 2016-04-08\nNew Added the ability to return a paginated list of constituents. For this release, the list will be ordered by name (last name for individuals, organization name for organizations). Operation Method Route Constituent (List) GET /constituents The endpoint supports the following the optional request parameters. Pagination is facilitated through the results via the top and skip parameters: Property Description top Optional. Integer. Represents the number of records to return. If not specified, the default is 100. The maximum allowed value is 500. skip Optional. Integer. Represents the number of records to skip. Changed Breaking change implemented for the Constituent API endpoints that return a collection of objects. This change allows us to be consistent in the representation of data collections and supports pagination for certain endpoints. See the 2016-03-31 changelog entry for a listing of affected endpoints. Constituent (Search) now supports the ability to search on an email address (same functionality as found in the RE NXT search feature). This expanded search will match against constituent email addresses when the searchText parameter is a valid email address. Note that we currently support exact match only. March 2016\n2016-03-31\nAnnouncement: Breaking Changes Planned for Constituent API endpoints\nIn the coming weeks, we will be standardizing the shape of our responses that return a collection of objects. This standardization will allow us to be consistent across each endpoint as well as to facilitate some future enhancements around pagination within those endpoints. The new representation of a collection will be a JSON object with two properties, a count which represents the total number of records meeting the criteria and a value property which represents the array of items for the current paged response.\nThis change is scheduled for release by April 8, 2016. How a collection response is formed today (Phones used as an example):\n{ \"phones\": [ { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} How the response will be formed after release:\n{ \"count\": 10, // total number of elements in the collection \"value\": [ // collection of items included in this response { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} * Please note that the response format may change before official release.\nEndpoints affected: Operation Method Route Action (List) GET /constituent/constituents/{constituentId}/actions Address (List) GET /constituent/constituents/{constituentId}/addresses Constituent attachment (List) GET /constituent/constituents/{constituentId}/attachments Constituent code (List) GET /constituent/constituents/{constituentId}/constituentcodes Constituent (Search) GET /constituent/constituents/search/?searchText={searchText} Constituent custom field (List) GET /constituent/constituents/{constituentId}/customfields Education (List) GET /constituent/constituents/{constituentId}/educations Email address (List) GET /constituent/constituents/{constituentId}/emailaddresses Name format (List) GET /constituent/constituents/{constituentId}/nameformats Note (List) GET /constituent/constituents/{constituentId}/notes Online presence (List) GET /constituent/constituents/{constituentId}/onlinepresences Phone (List) GET /constituent/constituents/{constituentId}/phones Relationship (List) GET /constituent/constituents/{constituentId}/relationships 2016-03-30\nNew Added the ability to return a list of relationships for a specified constituent. Operation Method Route Relationship (List) GET /constituents/{constituentId}/relationships Added the ability to return a constituent's profile picture. Operation Method Route Profile picture (Get) GET /constituents/{constituentId}/profilepicture Changed\nGET operations that return an attachment endpoint, such as Constituent attachment (List), return the following new properties: Property Description thumbnail_url Read only. String. Represents an image thumbnail URI for a picture to display. Endpoints that add or edit attachments ignore this property. file_size Read only. Long integer. The file size of the attachment in bytes. Only applies to physical attachments. Helps to determine how to display large images. Endpoints that add or edit attachments ignore this property. 2016-03-10\nNew Added the ability to return a list of education items for a specified constituent. Operation Method Route Education (List) GET /constituents/{constituentId}/educations Added the ability to edit and delete actions and notes for a constituent: Operation Method Route Action (Edit) PUT /actions/{actionId} Action (Delete) DELETE /actions/{actionId} Note (Edit) PUT /notes/{noteId} Note (Delete) DELETE /notes/{noteId} Changed OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization The base URL for the Constituent API has changed: Old New https://api.nxt.blackbaud-dev.com/constituents/ https://api.sky.blackbaud.com/constituent After creating an attachment for a constituent, the returned representation of an attachment now includes the attachment identifier (id). Values for the Constituent gender property now return the values using the correct casing (lowercase). GET and POST routes for actions and notes endpoints have changed: Operation Method Old Route New Route Action (Get) GET /{constituentId}/actions/{actionId} /actions/{actionId} Action (Create) POST /{constituentId}/actions /actions Note (Get) GET /{constituentId}/notes/{noteId} /notes/{noteId} Note (Create) POST /{constituentId}/notes /notes Deleted\nWe removed the following endpoints: GET Attachment\nGET Constituent code\nGET Custom field\nGET Email address\nGET Online presence\nGET Phone\nGET Primary business\nGET Spouse Older\n2015-10-20\nNew Added 3 new endpoints covering constituent attachments Get a list of constituent attachments\nGet a specific attachment for a constituent\nAdd an attachment for a constituent Note that currently, all attachment records are viewable through the SKY API, but only link attachments can be added. Changed Removed Author from the constituent note entity. The author is now inferred from the context of the user calling the SKY API. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Fundraising (Beta)",
   "description": "Information on additions and changes for the Fundraising API (Beta).",
   "order": 100,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-line-chart",
   "back_to_top": true,
   "title": "Fundraising (Beta) Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Fundraising",
   "abspath": "support/changelog/fundraising/index.html",
   "uri": "/support/changelog/fundraising/",
   "text": " Fundraising (Beta)\nMonitor this page to keep up with the Fundraising API (Beta) latest changes and SKY API service releases.\n2017-03-08\nNew\nThe Fundraising API has been released for a public beta. This API handles information related to the fundraising hierarchy, including the campaign, fund, and appeal entities: Campaigns set the overall objectives and initiatives for raising money, and they are typically the top tier of the fundraising hierarchy. For example, organizations can create campaigns to encompass fundraising efforts related to annual operating expenses, new buildings, or endowments.\nFunds represent the donor's intent for how to use or earmark a gift. For example, the gift can be intended for a specific cause or financial purpose. Funds are often linked to financial suites and indicate where to allocate a gift.\nAppeals are the sources and solicitations that bring in gifts, and they are typically the most granular piece of the fundraising hierarchy. Examples of appeals include direct mailings, online donation pages, phonathons, auctions, and events. The initial release contains endpoints to retrieve these entities by ID and to manage custom fields. For more information, check out the entity and endpoint references. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Gift (Beta)",
   "description": "Information on additions and changes for the Gift API (Beta).",
   "order": 100,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-gift",
   "back_to_top": true,
   "title": "Gift (Beta) Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Gift",
   "abspath": "support/changelog/gift/index.md",
   "uri": "/support/changelog/gift/",
   "text": " Gift (Beta)\nMonitor this page to keep up with the Gift API (Beta) latest changes and SKY API service releases.\n2017-03-08\nNew\nThe Gift API has been released for a public beta. This API handles information related to gifts, including related entities such as gift splits, gift fundraisers, and soft credits.\nThe initial release contains endpoints to retrieve a list of all gifts, to retrieve gifts by their IDs, and to manage attachments. For more information, check out the entity and endpoint references. "
  },
  {
   "layout": "layout-sidebar",
   "name": "General Ledger",
   "description": "Information on additions and changes for the General Ledger API.",
   "order": 200,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-book",
   "back_to_top": true,
   "title": "General Ledger Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Gl",
   "abspath": "support/changelog/gl/index.md",
   "uri": "/support/changelog/gl/",
   "text": " General Ledger\nMonitor this page to keep up with the General Ledger API latest changes and SKY API service releases.\n2017-01-18\nNew\nAdded the following endpoints: Operation Method Route Account GET /accounts/{account_id} Project GET /projects/{project_id} Account cashflows (List) GET /accounts/cashflows Account working capitals (List) GET /accounts/workingcapitals Account custom fields (List) GET /accounts/customfields December 2016\n2016-12-06\nNew Added the following endpoints: Operation Method Route Journal entry custom field (List) GET /journalentries/customfields Project custom field (List) GET /projects/customfields Budget GET /budgets Budget (List) GET /budgets/{scenario_id} Budget account (List) GET /budgets/{scenario_id}/accounts Ledger summary (List) GET /summary/{fiscal_year_id} Added new custom field entities to the following endpoints: Operation Method Route Project POST /projects Journal entry POST /journalentrybatches/{batch_id}/journalentries Journal entry batch GET /journalentrybatches/{batch_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values November 2016\n2016-11-14\nAnnouncement: Breaking Change Planned for General Ledger API\nFor consistency across APIs, we will implement the following changes: All responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties.\nThe following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values 2016-11-01\nNew\nAdded the following endpoints: Operation Method Route Create project (Post) POST /projects Create project contact (Post) POST /projects/{project_id}/contacts October 2016\n2016-10-06\nNew\nAdded the following endpoints: Operation Method Route Fiscal year (List) GET /fiscalyears Class (List) GET /classes Account structure GET /accounts/structure Account segment value (List) GET /accounts/segments Account code (List) GET /accounts/codes Account fund (List) GET /accounts/funds Project type (List) GET /projects/types Project status (List) GET /projects/statuses Project division (List) GET /projects/divisions Project department (List) GET /projects/departments Project location (List) GET /projects/locations Changed\nYou can now specify Class on journal entries (this affects all endpoints associated with journal entry batches).\nAugust 2016\n2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Transaction distribution (Search) GET /transactiondistributions Account (Search) GET /accounts Project (Search) GET /projects Journal entry batch (List) GET /journalentrybatches July 2016\n2016-07-05\nChanged\nWe implemented a previously announced, breaking change. We removed the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\nJune 2016\n2016-06-30\nAnnouncement: Breaking Change Planned for General Ledger API\nIn the coming days, a breaking change will be placed into effect. We will remove the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\n2016-06-22\nNew\nAdded the following endpoint: Operation Method Route Transaction distribution (Search) GET /transactiondistributions 2016-06-15\nChanged\nWe've added a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/generalledger/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for General Ledger API We will be adding a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/generalledger/v1.\nThis change is planned to take effect on Wednesday, June 15. May 2016\n2016-05-27\nNew Added a General Ledger getting started guide to help you make your first General Ledger API call with our interactive SKY API Console. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Shared",
   "description": "Common changes shared across all our APIs.",
   "order": 50,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-cloud",
   "back_to_top": true,
   "title": "Shared Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Shared",
   "abspath": "support/changelog/shared/index.md",
   "uri": "/support/changelog/shared/",
   "text": " Shared\nMonitor this page to keep up with common changes shared across all our APIs.\n2017-3-03\nNew\nThe SKY API developer site now offers commenting capability through Disqus. We encourage community involvement to improve our documentation. We will monitor comments just like we monitor feedback in our GitHub repository, and we will incorporate feedback to make our docs better. See something that is unclear? Want more detail? Leave a comment and let us know!\nOn the SKY API developer site, comments now appear at the bottom of most documentation pages, and buttons are available at the top of pages to take users to the comments.\nDecember 2016\n2016-12-02\nWe added a new Status link to the Support menu. This link takes you to our SKY API status page. The status page provides the current state of API availability, as well as specific details on downtime incidents. We also provide the option for you to subscribe to automatic incident notifications by email, SMS, or feed.\nOctober 2016\n2016-10-17\nLogos can now be associated with your applications. The logo is the icon that users will see on the consent form when they give an application authorization to use their product's account to access the API. Logos can be added to new and existing applications through the My Applications page. Application logo images must be: 512 by 512 pixels\nSmaller than 2MB\nPNG or JPEG format September 2016\n2016-09-22\nSKY API's support for CORS now includes accept and content-type in the list of accepted request headers. You can now specify these headers in API requests from within a browser.\nJuly 2016\n2016-07-08\nTo support approved API subscribers with access to their own dedicated tenants, we've added instructions for activating the SKY API Console\nto our Basics guide.\nJune 2016\n2016-06-27 When requesting an access token, you may now supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. This is an alternative to using the Authorization header. See Authorization Code Flow. Created a C# Auth Code Flow code sample and tutorial. 2016-06-09\nNew We've added the OAuth2 Implicit Flow for use in web browser and mobile apps where application secret confidentiality is not guaranteed. A new feature allows you to export API definitions in Swagger and WADL formats from within the SKY API Console. Use these files to generate client-side code by using tools such as Swagger Codegen. You can import these files into API client tools such as Postman and start calling the API in very little time. May 2016\n2016-05-27\nChanged\nWhen registering your application, we've relaxed the https requirement for whitelisted redirect URIs. To facilitate and shorten the development process, we now accept http://localhost:* (or, http://127.0.0.1:*) whitelisted web addresses to redirect to after users grant or deny permission for your app. You will no longer need to install a self-signed SSL certificate on your local machine when building your applications.\n2016-05-13\nNew\nA next_link property has been added to our paginated collection responses and represents the URI for the next page of results. This property takes into account any relevant pagination parameters, such as limit, offset, or last_modified, and date_added provided on the request.\n2016-05-06\nChanged limit and offset have replaced top and skip parameters for Pagination. Pagination behavior will remain unchanged. When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. April 2016\n2016-04-26\nPagination will be facilitated through the results via the use of limit and offset instead of top and skip parameters. Pagination behavior will remain unchanged.\nMarch 2016\n2016-03-15\nUpdates to code samples including Authorization Code Flow Tutorial and Barkbaud: Authorization Code Flow Tutorial Environment variables automatically load when the application starts. Tutorial instructions have been simplified accordingly.\nUsing AngularJS for display of Log in button, Log out button and constituent data.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. Barkbaud Environment variables automatically load when the application starts. README instructions have been simplified accordingly.\nBiographies, owner and medical history for each animal are now stored in a MongoDB database at mLab instead of Parse. The Parse database service will be retired on January 28, 2017.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. 2016-03-11\nUsage limits are now in effect. Exceeding the rate limit results in a 429 - Too Many Requests response status code. Exceeding the quota results in a 403 - Quota Exceeded response status code.\n2016-03-10\nChanged OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization Older\n2015-12-8\nNew The My Applications page now includes the ability to edit applications. Once registered, your application will automatically have access to the Developer Sandbox tenant. The Auth Code Flow Tutorial demonstrates how to create a small server-side application that negotiates authorization and access constituent data. Code Samples include Barkbaud which was introduced at bbcon 2015. Also included is the source code for the Auth Code Flow Tutorial. General Enhancements Enhanced FAQ, including new questions and references to new Auth Code Flow Tutorial and application management. 2015-11-20\nNew\nThe My Applications page and associated documentation provide self-service application registration for the purpose of accessing data via SKY API.\n2015-10-20\nChanged Improved handling of enumerations within the API. Enumeration values are now emitted using string representations instead of numeric representations. For example, Constituent.Type now returns individual or organization. Improved handling of default values within the SKY API. Previously, default values were not included in the JSON response. Values are now included in the payload. Enhanced sample response representations in the developer portal to account for enumeration and default value handling. Added a Support menu to the developer portal, with links to the Changelog, Issues, Ideas, and FAQ. "
  },
  {
   "layout": "layout-container",
   "name": "Community",
   "description": "Learn and get help from your peers in the Blackbaud Developer Community.",
   "order": 50,
   "showInNav": true,
   "published": true,
   "showInHeader": true,
   "title": "Developer Community",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Community",
   "abspath": "support/community/index.md",
   "uri": "/support/community/",
   "text": " "
  },
  {
   "layout": "layout-sidebar",
   "order": 300,
   "name": "FAQ",
   "description": "A listing of frequently asked questions and answers.",
   "icon": "fa fa-comment-o fa-4x",
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "FAQs",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Faq",
   "abspath": "support/faq/index.md",
   "uri": "/support/faq/",
   "text": " Comments Edit in GitHub Frequently Asked Questions\nLearn the answers to commonly asked questions, recommended patterns, and best practices for the SKY API.\nBasics\nHow do I get started?\nThe Getting Started guide and Authorization Code Flow tutorial demonstrate basic implementations of SKY API using easy-to-follow setup instructions.\nDo you have any code samples?\nSee Code Samples. Our Endpoint Reference contains code samples in multiple languages.\nI am seeing an issue, where can I get support?\nSee our Issues page for any existing issues. If you find a new issue, please contact us.\nAuthorization\nHow do I pass security credentials from my application to the SKY API?\nTo call the SKY API, your application will need to provide two things: Your developer subscription key - this key represents Blackbaud's permission for you to call the API, and it should be sent as part of the bb-api-subscription-key request header. An access token - this represents a Blackbaud customer's permission for you to access their data, and it should be sent as part of the authorization request header. This token is associated with the authenticated user's account and organization, and can only be used to access data to which the user has permission. For more information, see request headers.\nWhat is the recommended authorization flow for a browser-based app?\nIn applications where you cannot maintain the confidentiality of their Application secret, the most appropriate OAuth flow to use in this case is the Implicit Flow.\nBrowser-based (javascript) apps run entirely in the browser after loading the source code from a web page. Since the entire source code is available to the browser, they cannot maintain the confidentiality of their Application secret, so the secret is not used in this case.\nSee Authorization to learn about the OAuth flows that are supported.\nWhat is the recommended authorization flow for a native applications?\nLike browser-based apps, the most appropriate flow to use for a native applications (desktop and mobile devices) is the Implicit Flow.\nSee Authorization to learn about the OAuth flows that are supported.\nI want to create a script that adds new constituents to my database every day. Is there a way I can do this without having to open the browser and log in? (My username and password would preferably be set in the script.)\nThe SKY API doesn’t support basic authorization through username/password. Instead, obtain an access token through the Authorization Code Flow.\nWhen should my application initiate authorization?\nAuthorization begins when your application redirects the user's browser to our https://oauth2.apim.blackbaud.com/authorization Authorization endpoint. Exactly when you decide to make this request is up to you. You can request authorization when your application gathers initial information from the user, or when the user first attempts to access some data from the SKY API.\nSee Authorization.\nWhen I register my app, can I use localhost in my redirect URIs?\nYes. We allow you to register multiple redirect URIs with your application. For production, we require https, but to facilitate local development we allow http and the use of localhost or the localhost IP (127.0.0.1).\nSee Register your application and the Auth Code Flow tutorial.\nAfter redirection occurs, how can I track where authorization initiated?\nAfter the user grants (or denies) access to your application, we'll redirect the browser to the URI that you passed to us when you initiated the authorization process (this URI must exactly match one of the values you registered with your application).\nWe also support the OAuth 2.0 state parameter (described in Section 4.1.1 of the OAuth 2.0 spec), which allows you to provide some context to us that we will echo back to your redirect URI after the user grants (or denies) access to your application. We recommend that you use an opaque value and verify that it matches the value you provided when your app initiated authorization. In this way, you can prevent cross-site request forgeries as well as track where your application initiated the authorization flow. You can then further redirect the user's browser to the appropriate area within your application upon consent.\nSee Authorization.\nWhen must my application re-authenticate the user?\nIf both your access token and refresh token have expired, then you'll need to send the user back through the interactive authorization process. If your access token has expired but you have a valid refresh token, then you can simply exchange the refresh token for a new access token (and a new refresh token) non-interactively.\nSee Authorization.\nCORS\nDo you support cross-origin resource sharing to allow you to interact securely with our API from within the browser?\nYes, we've enabled CORS support in the SKY API. We allow GET, PUT, POST, PATCH, and DELETE methods, and we allow bb-api-subscription-key, authorization, accept, and content-type request headers.\nTokens\nWhen do my tokens expire?\nDuring the initial user-interactive authorization process, the authorization code sent to your application will expire in 5 minutes, which means you have a very short window of time in which to exchange the authorization code for an access token.\nAccess tokens will expire in 60 minutes, after which you can use the refresh token to obtain a new access token (and a new refresh token). For the Authorization Code Flow, refreshing an access token does not involve any user interaction, so your application can have indefinite connectivity to the SKY API once the user provides consent. Refresh tokens are longer-lived values that will eventually expire in 60 days, using a sliding window model. As long as your application connects at least once to the SKY API within the window, it will be able to retain connectivity to the customer's data.\nSee Token Expiration.\nMay I store access tokens in my application's database?\nYes, you may store access tokens and refresh tokens within your app, associated with your app's concept of a user (if applicable). When the user logs in with your application's credentials, you can check to see if you have an access token for that user and adjust your app's experience accordingly. For example, you may immediately route the user through the authorization process in order to obtain an access token, or disable functionality until the user provides consent.\nIf your application doesn't have the notion of user credentials, you can simply direct the user to log in with their Blackbaud credentials when they log into your application. We'll provide you with the user's access token and expiration details as part of the Token response during the authorization code flow.\nIn any case, be sure to store access tokens and refresh tokens securely in your system so that they aren't exposed to the public.\nSubscription keys\nWhat is the purpose of the subscription key?\nThe subscription key is associated with your developer account and must be provided as part of the bb-api-subscription-key header when calling the SKY API. It represents our permission for you to call the API, and we also use it to enforce usage limits (see Rate limits and Quotas) to ensure that the API performs well for everyone. We also aggregate API call analytics associated with your subscription to show you how your apps are performing within the Analytics area of the portal.\nSee Subscription.\nWhy do I have two subscription keys?\nWhen you obtain a subscription to the SKY API, we'll provide two keys (primary and secondary) that you can use when calling the API. Both keys are equally functional; we provide two keys to support rotation on your end.\nWe don't require you to rotate your subscription keys, and you can adopt whatever key rotation schedule and strategy that best fits your needs. If you do need to regenerate your subscription keys, you can do so from your profile.\nImportant! Subscription keys are associated with your developer account, and should NOT be shared with the public since it would allow someone else to impersonate you when calling the SKY API! My app\nHow do I register my application and get an OAuth 2.0 ID and secret?\nYou can register your app in the My Applications area to obtain the unique ID and secret, which will be used during the authorization process to obtain an access token to call the API.\nSee Managing your apps.\nMy application secret may have been compromised, what should I do?\nIf you believe your application's secret has been exposed, you should regenerate the secret and update your application to use the new value when calling the SKY API.\nWhat control does a Blackbaud customer have over my application?\nCustomers always have control over whether or not your application can access their data. An administrator within the customer's organization must first activate your app before any user will be able to use it, and at any time the administrator can deactivate or completely remove your application (deactivating is intended to reflect a short-term state where eventual re-activation is expected). If that happens, your application will not be able to obtain or refresh any access tokens to use when calling the API.\nIf your application is deactivated or removed, users will see the following message in the authorization process: “This application has not been approved by your administrator…” See Authorization.\nScopes\nWhat scopes do you support and how do I pass them in my authorization request?\nOAuth 2.0 Scopes are not yet supported within the SKY API. In the future, applications may be able to express intent via scopes but for now API access is always within the context of an authenticated user, which means that API access is limited to the user's security permissions. "
  },
  {
   "layout": "layout-container",
   "name": "Ideas",
   "description": "Provide feedback on how to improve the Blackbaud APIs and developer experience.",
   "order": 200,
   "published": true,
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "icon": "fa fa-lightbulb-o",
   "title": "Ideas",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Support Ideas",
   "abspath": "support/ideas/index.md",
   "uri": "/support/ideas/",
   "text": " Ideas Have feedback on how to improve the SKY API developer experience? Add your idea below, or vote and comment on existing ideas. Your browser does not support iframes. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Issues",
   "description": "Information on additions, removals, and bug fixes of the API.",
   "order": 150,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-file-text-o",
   "back_to_top": true,
   "title": "Issues",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Issues",
   "abspath": "support/issues/index.md",
   "uri": "/support/issues/",
   "text": " Issues\nIf you find an issue, please contact us.\n2017-02-17\nResolved\nFor the issue reported earlier today about the Applications page, the functionality has been restored. 2017-02-17\nWe are aware of an issue on the Control Panel, Applications page in SKY API enabled Blackbaud products. The Applications page does not load. Previous applications you authorized do not appear. While they have not been deleted, during this time you may get an error message that your application doesn’t have access to any SKY API enabled Blackbaud products. API calls, however, are not impacted. We are working to resolve this issue as soon as possible, and will provide an update when functionality has been restored. 2016-11-14\nResolved\nFor the issue reported on 2016-10-20, the behavior of the attributes has been addressed so that they no longer fail to populate on returned address entities.\n2016-10-21\nService Resolved\nFor the issue reported earlier on 2016-10-21, the availability of the API has been restored.\nWe are aware of an issue that is currently disrupting the availability of the API. The disruption is related to a massive East Coast outage caused by a denial of service attack that is severely degrading Internet services. We are working with one of our DNS providers to restore service and will post another update when we have more information. 2016-10-20\nWe are aware of an issue with the new Address (List) where the formatted_address and inactive attributes are not populated on the returned address entities. We are addressing this issue and will post an update when we fix it.\n2016-10-17\nService Resolved\nFor the intermittent issue reported on 2016-10-15, service has been restored as of Monday, October 17th, 2016 at 9:30 AM EDT (1:30 PM UTC).\n2016-10-15\nWe are aware of an intermittent issue affecting a subset of Raiser's Edge NXT tenants, whereby Constituent API requests result in exceedingly long response times or timeouts. We are researching the issue and will post another update soon when we have more information.\n2016-08-01\nResolved: Firefox Hangs on Authorization\nThe issue has been resolved as of Monday, August 1st, 2016 at 3:20 PM EDT (7:20 PM UTC).\n2016-07-29\nFirefox Hangs on Authorization\nFirefox hangs when loading the SKY API OAuth 2.0 Authorization endpoint https://oauth2.apim.blackbaud.com/authorization.\nWe are currently researching the issue. Stay tuned for details.\n2016-04-22\nSKY API Console autofill bug\nOn specific SKY API Console pages that display an operation which contains either a query parameter or header data entry field before the bb-api-subscription-key control, Chrome mistakenly treats the bb-api-subscription-key control as a password. As a result Chrome treats the page as a login page. If the developer elects to save their a user name and password when prompted, Chrome incorrectly auto-fills the page the next time the page loads : Workaround steps Open Settings in Chrome\nClick the Show advanced settings link at the bottom of the Settings page.\nWithin the Passwords and forms section, click Manage passwords.\nDelete any mistakenly saved passwords for developer.sky.blackbaud.com. 2016-04-04\nResolved: My Applications page not displaying within Microsoft Edge browsers\nThe issue has been resolved as of Monday, April 4, 2016 at 8:00 AM EDT (Monday, April 4, 2016 at 12:00 PM UTC).\n2016-03-15\nMy Applications page not displaying within Microsoft Edge browsers\nWe have noticed an issue with the My Applications page not displaying within Microsoft Edge browsers. We are currently researching the issue. Stay tuned for details. In the meantime, we recommend using other browsers for managing your applications. "
  },
  {
   "layout": "layout-container",
   "name": "Status",
   "description": "Check the SKY API status and sign up for notifications.",
   "order": 400,
   "showInNav": true,
   "published": true,
   "showInHeader": true,
   "title": "Status",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Status",
   "abspath": "support/status/index.md",
   "uri": "/support/status/",
   "text": " "
  }
 ]
}